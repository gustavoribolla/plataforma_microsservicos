{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Plataformas, Microsservi\u00e7os e APIs","text":"Info <p>Carga Hor\u00e1ria: 80</p> <p>Semestre: 5\u00ba per\u00edodo</p>"},{"location":"#ementa","title":"Ementa","text":"<p>Conceitos de Aplica\u00e7\u00f5es em Mon\u00f3l\u00edto e Microservi\u00e7os; Conteineriza\u00e7\u00e3o; Padr\u00f5es de Constru\u00e7\u00e3o de Softwares (Design Patterns); Monitoramento e Rastreabilidade de Aplica\u00e7\u00f5es; Seguran\u00e7a (autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o); Mensageria; Dados Distribu\u00eddos; Orquestra\u00e7\u00e3o de computa\u00e7\u00e3o em nuvem, sistemas de gerenciamento, monitoramento e configura\u00e7\u00e3o de recursos virtualizados; Integra\u00e7\u00e3o entre Desenvolvimento e Opera\u00e7\u00e3o; Utiliza\u00e7\u00e3o de Plataformas em Nuvem para Produ\u00e7\u00e3o (Cloud Computing); Aspectos de automa\u00e7\u00e3o de gest\u00e3o de sistema em cloud \u2013 DevOps. Serverless computing \u2013 FaaS - function as a service; Utiliza\u00e7\u00e3o da Plataforma como Produto para Neg\u00f3cios: Infraestrutura como Servi\u00e7o (IaaS), Plataforma como Servi\u00e7o (PaaS) e Software como Servi\u00e7o (SaaS). Gest\u00e3o de n\u00edveis de servi\u00e7o (SLA - Service Level Agreement). Custos de projeto e de opera\u00e7\u00e3o de sistemas em cloud.</p>"},{"location":"#objetivos","title":"Objetivos","text":"<p>Ao final da disciplina o aluno ser\u00e1 capaz de:</p> <ol> <li>Tomar decis\u00f5es a respeito da escolha de estrat\u00e9gias de arquiteturas para o emprego de problemas computacionais;</li> <li>Implementar e interconectar aplica\u00e7\u00f5es computacionais para a constru\u00e7\u00e3o de plataformas de alto desempenho: escalabilidade por meio do uso de t\u00e9cnicas de computa\u00e7\u00e3o em nuvem;</li> <li>Administrar um sistema de gerenciamento de nuvem, provisionando a infraestrutura necess\u00e1ria como um servi\u00e7o;</li> <li>Construir, com o aux\u00edlio de frameworks, solu\u00e7\u00f5es de plataformas completas e integradas de forma profissional;</li> <li>Arquitetar e implementar linhas de produ\u00e7\u00f5es de softwares robustos (CI/CD);</li> <li>Analisar, projetar e especificar uma solu\u00e7\u00e3o de computa\u00e7\u00e3o em nuvem mista baseada em hardware, software e redes para atender aos requisitos de determinado pacto de n\u00edvel de servi\u00e7o (SLA);</li> <li>Planejar e analisar o uso de plataformas empresariais como subs\u00eddio para cria\u00e7\u00e3o de novos neg\u00f3cios (PaaS).</li> </ol>"},{"location":"#conteudo-programatico","title":"Conte\u00fado Program\u00e1tico","text":"<ol> <li>Conceitos de Arquitetura e Microsservi\u00e7os;</li> <li>Microsservi\u00e7os com Interface API - RESTful;</li> <li>Introdu\u00e7\u00e3o a Cont\u00eaineres;</li> <li>Introdu\u00e7\u00e3o e Implementa\u00e7\u00e3o de Design Patterns;</li> <li>Apresenta\u00e7\u00e3o de Design Patterns mais Complexos: Seguran\u00e7a, Mensageria, Cache, etc;</li> <li>Fundamentos de Computa\u00e7\u00e3o em Nuvem.</li> <li>Orquestra\u00e7\u00e3o, Implementa\u00e7\u00e3o e Monitoramento de Ambientes Virtualizados e Distribu\u00eddos;</li> <li>Infraestrutura como um Servi\u00e7o.</li> <li>Redes Definidas por Software;</li> <li>Software como um Servi\u00e7o;</li> <li>Gest\u00e3o de N\u00edveis de Servi\u00e7o.</li> </ol>"},{"location":"#bibliografia-basica","title":"Bibliografia B\u00e1sica","text":"<p>Livros:</p> <ol> <li> <p>ROMAN, Ed; AMBLER, Scott W.; JEWELL, Tyler. Dominando Enterprise Javabeans. Porto Alegre: Bookman, 2004. E-book. ISBN 9788577804061. Dispon\u00edvel em: https://integrada.minhabiblioteca.com.br/#/books/9788577804061. Acesso em: 30 de maio de 2023.</p> </li> <li> <p>ALVES, William Pereira. Java para Web - Desenvolvimento de Aplica\u00e7\u00f5es. S\u00e3o Paulo: \u00c9rica, 2015. E-book. ISBN 9788536519357. Dispon\u00edvel em: https://integrada.minhabiblioteca.com.br/#/books/9788536519357. Acesso em: 30 de maio de 2023.</p> </li> <li> <p>FREEMAN, Emily. DevOps Para Leigos. Rio de Janeiro: Editora Alta Books, 2021. E-book. ISBN 9788550816661. Dispon\u00edvel em: https://integrada.minhabiblioteca.com.br/#/books/9788550816661. Acesso em: 30 de maio de 2023.</p> </li> </ol>"},{"location":"#bibliografia-complementar","title":"Bibliografia Complementar","text":"<p>Livros:</p> <ol> <li> <p>XU, A., System Design Interview - An insider's guide, 1\u00aa ed., Independently Published, 2020.</p> </li> <li> <p>MARTIN, R. C., Arquitetura Limpa: o guia do artes\u00e3o para estrutura e design de software, 1\u00aa ed., Alta Books, 2018.</p> </li> <li> <p>PARKER, G. G.; VAN ALSTYNE, M. W.; CHOUDARY, S. P., Plataforma: a revolu\u00e7\u00e3o da estrat\u00e9gia, 1\u00aa ed., Alta Books, 2018.</p> </li> <li> <p>SEHGAL, N. K.; BHATT, P. C. P.; ACKEN J. M., Cloud Computing with Security and Scalability.: Concepts and Practices, 3\u00aa ed., Springer, 2023.</p> </li> <li> <p>KRIEF, M., Learning DevOps: A comprehensive guide to accelerating DevOps culture adoption with Terraform, Azure DevOps, Kubernetes, and Jenkins, 2\u00aa ed., Packt Publishing, 2022.</p> </li> <li> <p>GAMMA, E.; HELM, R.; JOHNSON, R., VLISSIDES, J., Design Patterns: Elements of Reusable Object-Oriented Software, 1\u00aa ed., Addison-Wesley Professional, 1994.</p> </li> <li> <p>SANTANA, E. F. Z., Back-end Java: Microsservi\u00e7os, Spring Boot e Kubernetes, Casa do C\u00f3digo, 2021. Material.</p> </li> <li> <p>SANTANA, E. F. Z., Apache Kafka e Spring Boot: Comunica\u00e7\u00e3o ass\u00edncrona entre microsservi\u00e7os, Casa do C\u00f3digo, 2022. Material.</p> </li> <li> <p>VERONEZ, F., Canal do YouTube.</p> </li> </ol> <p>Artigos:</p> <ul> <li> <p>XU, A. et al.. ByteByteGo - System Design 101. Dispon\u00edvel em: https://github.com/ByteByteGoHq/system-design-101. Acesso em: 19 dezembro 2023.</p> </li> <li> <p>Spring. Spring Cloud. Dispon\u00edvel em: https://spring.io/projects/spring-cloud. Acesso em: 19 dezembro 2023.</p> </li> <li> <p>CHOI, K., Software Engineering Blogs. Dispon\u00edvel em: https://github.com/kilimchoi/engineering-blogs. Acesso em: 20 dezembro 2023.</p> </li> <li> <p>Ghemawat, S. et al.. Towards Modern Development of Cloud Applications.  Proceedings of the 19th Workshop on Hot Topics in Operating Systems, 2023 - p. 110-117. Association for Computing Machinery, Providence, RI, USA. Dispon\u00edvel em: doi:10.1145/3593856.3595909. Acesso em: 05 fevereiro de 2024.</p> </li> </ul>"},{"location":"disclaimer/","title":"Disclaimer","text":""},{"location":"disclaimer/#contributors","title":"Contributors","text":"Name Humberto Sandmann Fabio Roberto de Miranda Raul Ikeda Maciel Calebe Vidal Eduardo Felipe Zambom Santana"},{"location":"disclaimer/#source","title":"Source","text":"<p>Circa of 70% of the whole conceptual texts were generated by ChatGPT nonetheless all of them were revised by the editor. The sections of handout was produced by the contributors.</p>"},{"location":"api/documentation/","title":"Documentation","text":""},{"location":"api/documentation/#swagger","title":"Swagger","text":"mavengradle <pre><code>&lt;dependency&gt;\n&lt;/dependency&gt;\n</code></pre> <pre><code>\n</code></pre> <p>```javascript I'm A tab console.log('Code Tab A'); <pre><code>```javascript I'm tab B\nconsole.log('Code Tab B');\n</code></pre></p> CC++ <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre> <p>https://www.baeldung.com/spring-rest-openapi-documentation</p>"},{"location":"api/spring-boot-cloud/","title":"Spring Boot Cloud","text":"<p>Containering:</p> <p>https://spring.io/projects/spring-cloud/</p> <p>https://github.com/spring-cloud/spring-cloud-release/wiki/Supported-Versions</p>"},{"location":"appendix/ohmyzsh/","title":"Oh My Zsh","text":"<p>Install:</p> <pre><code>sudo apt install zsh\nchsh -s $(which zsh)\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n</code></pre> <p>Plugins:</p> <pre><code>git clone https://github.com/zsh-users/zsh-syntax-highlighting ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\ngit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\ngit clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf &amp;&amp; ~/.fzf/install\n</code></pre> <p>Edit the file <code>~/.zshrc</code> at home's folder:</p> <pre><code>nano ~/.zshrc\n</code></pre> ~/.zshrc<pre><code>ZSH_THEME=\"afowler\"\nplugins=(\n  git\n  zsh-syntax-highlighting\n  zsh-autosuggestions\n  fzf\n)\n</code></pre> <p>Reference:</p> <ul> <li>Oh My Zsh</li> </ul>"},{"location":"appendix/others/","title":"Others","text":""},{"location":"appendix/others/#architectures","title":"Architectures","text":"<p> Clojure and Datomic Studies with Docker and Kafka by Pelichero, F.</p>"},{"location":"appendix/others/#data-centers","title":"Data centers","text":"Google AWS Tesla <p> Inside a Google data center</p> <p></p> <p> Inside Amazon's Massive Data Center</p> <p></p> <p> Inside Elon Musk's Colossus Supercomputer!</p> <p></p>"},{"location":"appendix/others/#security","title":"Security","text":"<p>The Heartbleed Bug</p> <p>The HTTPS-Only Standard</p> <p>Let's Encrypt</p>"},{"location":"appendix/others/#interesting-articles","title":"Interesting Articles","text":"<p>RFC 9562 - Universally Unique IDentifiers (UUIDs)</p> <p>RFC 9457 - Problem Details for HTTP APIs</p>"},{"location":"appendix/rest-vs-graphql/","title":"REST vs GraphQL","text":"Source: System Design 101 - REST API vs. GraphQL <ol> <li> <p>XU, A., System Design 101.\u00a0\u21a9</p> </li> <li> <p> REST.\u00a0\u21a9</p> </li> <li> <p> GraphQL.\u00a0\u21a9</p> </li> </ol>"},{"location":"appendix/rsa/","title":"RSA Algorithm","text":""},{"location":"appendix/rsa/#generating-the-rsa-keys","title":"Generating the RSA Keys","text":"Part 1Part 2 <p> The RSA Encryption Algorithm (1 of 2: Generating the Keys)</p> <p></p> <p> The RSA Encryption Algorithm (2 of 2: Generating the Keys)</p> <p></p>"},{"location":"appendix/versioning-rest-apis/","title":"Versioning REST API","text":"<ol> <li> <p>Jacky, Versioning RESTful APIs with Spring Boot: A Step-by-Step Guide in 5 minutes.\u00a0\u21a9</p> </li> </ol>"},{"location":"checkpoints/checkpoint1/","title":"Checkpoint1","text":""},{"location":"checkpoints/checkpoint1/#account-microservice","title":"Account Microservice","text":"<p>The Account microservice is responsible for managing user accounts, basically, almost every application has a user account system. This microservice provides the necessary endpoints to create, read, update, and delete accounts. The microservice is built using Spring Boot and follows the Domain-Driven Design (DDD) approach.</p> <p>The microservice is divided into two main modules: <code>account</code> and <code>account-service</code>:</p> <ul> <li>the <code>account</code> module contains the API definition and the data transfer objects (DTOs) for the Account microservice;</li> <li>the <code>account-service</code> module contains the service implementation, repository, and entity classes.</li> </ul> <pre><code>classDiagram\n    namespace account {\n        class AccountController {\n            +create(AccountIn accountIn): AccountOut\n            +delete(String id): void\n            +findAll(): List&lt;AccountOut&gt;\n            +findById(String id): AccountOut\n        }\n        class AccountIn {\n            -String name\n            -String email\n            -String password\n        }\n        class AccountOut {\n            -String id\n            -String name\n            -String email\n        }\n    }\n    namespace account-service {\n        class AccountResource {\n            +create(AccountIn accountIn): AccountOut\n            +delete(String id): void\n            +findAll(): List&lt;AccountOut&gt;\n            +findById(String id): AccountOut\n        }\n        class AccountService {\n            +create(AccountIn accountIn): AccountOut\n            +delete(String id): void\n            +findAll(): List&lt;AccountOut&gt;\n            +findById(String id): AccountOut\n        }\n        class AccountRepository {\n            +create(AccountIn accountIn): AccountOut\n            +delete(String id): void\n            +findAll(): List&lt;AccountOut&gt;\n            +findById(String id): AccountOut\n        }\n        class Account {\n            -String id\n            -String name\n            -String email\n            -String password\n            -String sha256\n        }\n        class AccountModel {\n            +create(AccountIn accountIn): AccountOut\n            +delete(String id): void\n            +findAll(): List&lt;AccountOut&gt;\n            +findById(String id): AccountOut\n        }\n    }\n    &lt;&lt;Interface&gt;&gt; AccountController\n    AccountController ..&gt; AccountIn\n    AccountController ..&gt; AccountOut\n\n    &lt;&lt;Interface&gt;&gt; AccountRepository\n    AccountController &lt;|-- AccountResource\n    AccountResource *-- AccountService\n    AccountService *-- AccountRepository\n    AccountService ..&gt; Account\n    AccountService ..&gt; AccountModel\n    AccountRepository ..&gt; AccountModel</code></pre> <p>This approach allows the separation of concerns and the organization of the codebase into different modules, making it easier to maintain and scale the application. Also, it creates a facility to reuse the microservice by other microservices in the future - builts in Java.</p> <p>The construction of the Account microservice follows the Clean Architecture approach, which promotes the total decoupling of business rules from interface layers. The diagram below illustrates the flow of data among the layers of the Account microservice:</p> <pre><code>sequenceDiagram\n    title Clean architecture's approach \n    Actor Request\n    Request -&gt;&gt;+ Controller: \n    Controller -&gt;&gt;+ Service: parser (AccountIn -&gt; Account)\n    Service -&gt;&gt;+ Repository: parser (Account -&gt; AccountModel)\n    Repository -&gt;&gt;+ Database: \n    Database -&gt;&gt;- Repository: \n    Repository -&gt;&gt;- Service: parser (Account &lt;- AccountModel)\n    Service -&gt;&gt;- Controller: parser (AccountOut &lt;- Account)\n    Controller -&gt;&gt;- Request: </code></pre> <p>Previously to build the Account microservice, it is necessary to prepare the environment by installing the database to persist the data. For that, we will use a Docker Compose file to create a PostgreSQL container, as well as, a cluster to isolate the microservices from external access, creating a secure environment - trusted layer. A Docker Compose file is a YAML file that defines how Docker containers should behave in production. The file contains the configuration for the database, the microservices, and the network configuration.</p> <pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        account e3@==&gt; db@{ shape: cyl, label: \"Database\" }\n    end\n    internet e1@==&gt;|request| account:::red\n    e1@{ animate: true }\n    e3@{ animate: true }\n    classDef red fill:#fcc</code></pre>"},{"location":"checkpoints/checkpoint1/#docker-compose","title":"Docker Compose","text":"<pre><code>\ud83d\udcc1 api/\n\u251c\u2500\u2500 \ud83d\udcc1 account/\n\u251c\u2500\u2500 \ud83d\udcc1 account-service/\n\u251c\u2500\u2500 \ud83d\udcc4 .env\n\u2514\u2500\u2500 \ud83d\udcc4 compose.yaml\n</code></pre> compose.yaml.env <pre><code>name: store\n\nservices:\n\n  db:\n    image: postgres:latest\n    hostname: db\n    environment:\n      POSTGRES_DB: ${POSTGRES_DB:-store}\n      POSTGRES_USER: ${POSTGRES_USER:-store}\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-store}\n    volumes:\n      - $VOLUME/postgres/store:/var/lib/postgresql/data\n    # ports:\n    #   - 5432:5432\n\n  account:\n    hostname: account\n    image: humbertosandmann/account\n    environment:\n      DATABASE_HOST: db\n      DATABASE_USER: ${POSTGRES_USER:-store}\n      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-store}\n\n  # auth:\n  #   hostname: auth\n  #   image: humbertosandmann/auth\n  #   environment:\n  #     JWT_SECRET_KEY: ${JWT_SECRET_KEY:-yrBBgYlvJQeslzFlgX9MFZccToI2fjRFqualquercoisa}\n\n  gateway:\n    hostname: gateway\n    image: humbertosandmann/gateway\n    environment:\n      - LOGGING_LEVEL_STORE=${LOGGING_LEVEL_STORE:-debug}\n    ports:\n      - 8080:8080\n\n  # exchange:\n  #   build:\n  #     context: ./exchange-service\n  #     dockerfile: Dockerfile\n</code></pre> <pre><code>POSTGRES_DB=store\nPOSTGRES_USER=store\nPOSTGRES_PASSWORD=5eCr3t\nVOLUME=./volume\nLOGGING_LEVEL_STORE=debug\nJWT_SECRET_KEY=yrBBgYlvJQeslzFlgX9MFZccToI2fjRFqualquercoisa\n</code></pre> docker compose up -d --build[+] Running 2/2 \u2714 Network store_default  Created            0.1s  \u2714 Container store-db-1   Started            0.2s"},{"location":"checkpoints/checkpoint1/#account","title":"Account","text":"<pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 account/\n    \u251c\u2500\u2500 \ud83d\udcc1 src/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main/\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc1 java/\n    \u2502           \u2514\u2500\u2500 \ud83d\udcc1 store/\n    \u2502               \u2514\u2500\u2500 \ud83d\udcc1 account/\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 AccountController.java\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 AccountIn.java\n    \u2502                   \u2514\u2500\u2500 \ud83d\udcc4 AccountOut.java\n    \u2514\u2500\u2500 \ud83d\udcc4 pom.xml\n</code></pre> Source pom.xmlAccountControllerAccountInAccountOut <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.4.2&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;account&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;name&gt;account&lt;/name&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2024.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n&lt;/project&gt;\n</code></pre> AccountController.java<pre><code>package store.account;\n\nimport java.util.List;\n\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestHeader;\n\n@FeignClient(name = \"account\", url = \"http://account:8080\")\npublic interface AccountController {\n\n    @PostMapping(\"/account\")\n    public ResponseEntity&lt;AccountOut&gt; create(\n        @RequestBody AccountIn accountIn\n    );\n\n    @GetMapping(\"/account\")\n    public ResponseEntity&lt;List&lt;AccountOut&gt;&gt; findAll();\n\n    @PostMapping(\"/account/login\")\n    public ResponseEntity&lt;AccountOut&gt; findByEmailAndPassword(\n        @RequestBody AccountIn accountIn\n    );\n\n    @GetMapping(\"/account/whoami\")\n    public ResponseEntity&lt;AccountOut&gt; whoami(\n        @RequestHeader(value = \"id-account\", required = true) String idAccount\n    );\n\n}\n</code></pre> AccountIn.java<pre><code>package store.account;\n\nimport lombok.Builder;\nimport lombok.experimental.Accessors;\n\n@Builder @Accessors(fluent = true)\npublic record AccountIn(\n    String name,\n    String email,\n    String password\n) {\n\n}\n</code></pre> AccountOut.java<pre><code>package store.account;\n\nimport lombok.Builder;\nimport lombok.experimental.Accessors;\n\n@Builder @Accessors(fluent = true)\npublic record AccountOut(\n    String id,\n    String name,\n    String email\n) {\n}\n</code></pre> <p>mvn clean install</p>"},{"location":"checkpoints/checkpoint1/#account-service","title":"Account-Service","text":"<pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 account-service/\n    \u251c\u2500\u2500 \ud83d\udcc1 src/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main/\n    \u2502       \u251c\u2500\u2500 \ud83d\udcc1 java/\n    \u2502       \u2502   \u2514\u2500\u2500 \ud83d\udcc1 store/\n    \u2502       \u2502       \u2514\u2500\u2500 \ud83d\udcc1 account/\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 Account.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 AccountApplication.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 AccountModel.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 AccountParser.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 AccountRepository.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 AccountResource.java\n    \u2502       \u2502           \u2514\u2500\u2500 \ud83d\udcc4 AccountService.java\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc1 resources/\n    \u2502           \u251c\u2500\u2500 \ud83d\udcc4 application.yaml\n    \u2502           \u2514\u2500\u2500 \ud83d\udcc1 db/\n    \u2502               \u2514\u2500\u2500 \ud83d\udcc1 migration/\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 V2025.02.21.001__create_schema_account.sql\n    \u2502                   \u2514\u2500\u2500 \ud83d\udcc4 V2025.02.21.002__create_table_account.sql\n    \u251c\u2500\u2500 \ud83d\udcc4 pom.xml\n    \u2514\u2500\u2500 \ud83d\udcc4 Dockerfile\n</code></pre> Source pom.xmlapplication.yamlAccount.javaAccountApplication.javaAccountModel.javaAccountParser.javaAccountRepository.javaAccountResource.javaAccountService.javaV2025.02.21.001__create_schema_account.sqlV2025.02.21.002__create_table_account.sqlDockerfile <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.4.2&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;account-service&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2024.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;store&lt;/groupId&gt;\n            &lt;artifactId&gt;account&lt;/artifactId&gt;\n            &lt;version&gt;${project.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;\n            &lt;artifactId&gt;flyway-core&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;!-- https://mvnrepository.com/artifact/org.flywaydb/flyway-database-postgresql --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;\n            &lt;artifactId&gt;flyway-database-postgresql&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre> <pre><code>server:\n  port: 8080\n\nspring:\n  application:\n    name: account\n\n  datasource:\n    url: jdbc:postgresql://${DATABASE_HOST}:${DATABASE_PORT:5432}/store\n    username: ${DATABASE_USER:store}\n    password: ${DATABASE_PASSWORD:store}\n    driver-class-name: org.postgresql.Driver\n\n  jpa:\n    properties:\n      hibernate:\n        dialect: org.hibernate.dialect.PostgreSQLDialect\n        default_schema: account\n\n  flyway:\n    schemas: account\n    baseline-on-migrate: true\n</code></pre> <pre><code>package store.account;\n\nimport java.util.Date;\n\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\n@Builder\n@Data @Accessors(fluent = true)\npublic class Account {\n\n    private String id;\n    private String name;\n    private String email;\n    private String password;\n    private String sha256;\n    private Date birthdate;\n    private Date creation;\n\n}\n</code></pre> <pre><code>package store.account;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class AccountApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AccountApplication.class, args);\n    }\n\n}\n</code></pre> <pre><code>package store.account;\n\nimport java.util.Date;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Table;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\nimport lombok.experimental.Accessors;\n\n@Entity\n@Table(name = \"account\")\n@Setter @Accessors(fluent = true)\n@NoArgsConstructor\npublic class AccountModel {\n\n    @Id\n    @Column(name = \"id_account\")\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private String id;\n\n    @Column(name = \"tx_name\")\n    private String name;\n\n    @Column(name = \"tx_email\")\n    private String email;\n\n    @Column(name = \"tx_sha256\")\n    private String sha256;\n\n    @Column(name = \"dt_birthdate\")\n    private Date birthdate;\n\n    @Column(name = \"dt_creation\")\n    private Date creation;\n\n    public AccountModel(Account a) {\n        this.id = a.id();\n        this.name = a.name();\n        this.email = a.email();\n        this.sha256 = a.sha256();\n        this.birthdate = a.birthdate();\n        this.creation = a.creation();\n    }\n\n    public Account to() {\n        return Account.builder()\n            .id(this.id)\n            .name(this.name)\n            .email(this.email)\n            .sha256(this.sha256)\n            .birthdate(this.birthdate)\n            .creation(this.creation)\n            .build();\n        }\n\n}\n</code></pre> <pre><code>package store.account;\n\npublic class AccountParser {\n\n    public static Account to(AccountIn in) {\n        return in == null ? null :\n            Account.builder()\n                .name(in.name())\n                .email(in.email())\n                .password(in.password())\n                .build();\n    }\n\n    public static AccountOut to(Account a) {\n        return a == null ? null :\n            AccountOut.builder()\n                .id(a.id())\n                .name(a.name())\n                .email(a.email())\n                .build();\n    }\n\n}\n</code></pre> <pre><code>package store.account;\n\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\n\n/*\n * https://docs.spring.io/spring-data/jpa/reference/jpa/query-methods.html\n */\n\n@Repository\npublic interface AccountRepository extends CrudRepository&lt;AccountModel, String&gt; {\n\n    public AccountModel findByEmailAndSha256(String email, String sha256);\n\n}\n</code></pre> <pre><code>package store.account;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class AccountResource implements AccountController {\n\n    @Autowired\n    private AccountService accountService;\n\n    @Override\n    public ResponseEntity&lt;AccountOut&gt; create(AccountIn accountIn) {\n        Account created = accountService.create(AccountParser.to(accountIn));\n        return ResponseEntity.ok().body(AccountParser.to(created));\n    }\n\n    @Override\n    public ResponseEntity&lt;List&lt;AccountOut&gt;&gt; findAll() {\n        return ResponseEntity\n            .ok()\n            .body(accountService.findAll().stream().map(AccountParser::to).toList());\n    }\n\n    @Override\n    public ResponseEntity&lt;AccountOut&gt; findByEmailAndPassword(AccountIn accountIn) {\n        Account account = accountService.findByEmailAndPassword(\n            accountIn.email(),\n            accountIn.password()\n        );\n        return ResponseEntity\n            .ok()\n            .body(AccountParser.to(account));\n    }\n\n    @Override\n    public ResponseEntity&lt;AccountOut&gt; whoami(String idAccount) {\n        return ResponseEntity\n            .ok()\n            .body(AccountParser.to(accountService.findById(idAccount)));\n    }\n\n}\n</code></pre> <pre><code>package store.account;\n\nimport java.nio.charset.StandardCharsets;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Base64;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.stream.StreamSupport;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.server.ResponseStatusException;\n\n@Service\npublic class AccountService {\n\n    @Autowired\n    private AccountRepository accountRepository;\n\n    public Account findById(String id) {\n        return accountRepository.findById(id).get().to();\n    }\n\n    public Account create(Account account) {\n        final String pass = account.password().trim();\n        if (pass.length() &lt; 8) {\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"Password too short!\");\n        }\n        account.sha256(calcHash(pass));\n        account.creation(new Date());\n        return accountRepository.save(new AccountModel(account)).to();\n    }\n\n    public Account findByEmailAndPassword(String email, String password) {\n        final String sha256 = calcHash(password);\n        AccountModel m  = accountRepository.findByEmailAndSha256(email, sha256);\n        return m == null ? null : m.to();\n    }\n\n    public List&lt;Account&gt; findAll() {\n        return StreamSupport\n            .stream(accountRepository.findAll().spliterator(), false)\n            .map(AccountModel::to)\n            .toList();\n    }\n\n    /*\n     * A reference to implement a nice password's hash\n     * https://github.com/ByteByteGoHq/system-design-101/tree/main?tab=readme-ov-file#how-to-store-passwords-safely-in-the-database-and-how-to-validate-a-password\n     */\n    private String calcHash(String value) {\n        try {\n            MessageDigest digester = MessageDigest.getInstance(\"SHA-256\");\n            byte[] hash = digester.digest(value.getBytes(StandardCharsets.UTF_8));\n            String encoded = Base64.getEncoder().encodeToString(hash);\n            return encoded;\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n</code></pre> <pre><code>CREATE SCHEMA IF NOT EXISTS account;\n</code></pre> <pre><code>CREATE TABLE account (\n    id_account VARCHAR(36) NOT NULL,\n    tx_name VARCHAR(256) NOT NULL,\n    tx_email VARCHAR(256) NOT NULL,\n    tx_sha256 VARCHAR(64) NOT NULL,\n    dt_birthdate DATE NULL,\n    dt_creation TIMESTAMP NOT NULL,\n    CONSTRAINT pk_account PRIMARY KEY (id_account)\n);\n</code></pre> <pre><code>FROM openjdk:21-slim\nVOLUME /tmp\nCOPY target/*.jar app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n</code></pre> mvn clean package spring-boot:run"},{"location":"checkpoints/checkpoint2/","title":"Checkpoint2","text":"<p>The main functionality of Gateway Microservice is to route the incoming requests to the appropriate microservice, therefore, it is the entry point for all the incoming requests. In counterpart, each microservice have to expose their own port and endpoints to the internet, which is not a good practice. The Gateway Microservice will act as a reverse proxy and route the incoming requests to the appropriate microservice. Also, it will also handle the authentication and authorization of the incoming requests.</p> <pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        gateway e2@==&gt; account\n        gateway e4@==&gt; others\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        others --&gt; db\n    end\n    internet e1@==&gt;|request| gateway:::red\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e4@{ animate: true }\n    classDef red fill:#fcc</code></pre> <p>The key functionalities of Gateway Microservice are:</p> <ul> <li>Routing: it will route the incoming requests to the appropriate microservice.</li> <li>Authentication/Authorization: it will handle the authentication and the authorization of the incoming requests.</li> </ul>"},{"location":"checkpoints/checkpoint2/#gateway-service","title":"Gateway-Service","text":"<pre><code>\ud83d\udcc1 api\n\u2514\u2500\u2500 \ud83d\udcc1 gateway-service/\n    \u251c\u2500\u2500 \ud83d\udcc1 src/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main/\n    \u2502       \u251c\u2500\u2500 \ud83d\udcc1 java/\n    \u2502       \u2502   \u2514\u2500\u2500 \ud83d\udcc1 store/\n    \u2502       \u2502       \u2514\u2500\u2500 \ud83d\udcc1 gateway/\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 GatewayApplication.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 GatewayResource.java\n    \u2502       \u2502           \u2514\u2500\u2500 \ud83d\udcc1 security\n    \u2502       \u2502               \u2514\u2500\u2500 \ud83d\udcc4 CorsFilter.java\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc1 resources/\n    \u2502           \u2514\u2500\u2500 \ud83d\udcc4 application.yaml\n    \u251c\u2500\u2500 \ud83d\udcc4 pom.xml\n    \u2514\u2500\u2500 \ud83d\udcc4 Dockerfile\n</code></pre> Source pom.xmlapplication.yamlGatewayApplication.javaGatewayResource.javaCorsFilter.javaDockerfile <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.4.2&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;gateway-service&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2024.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.micrometer&lt;/groupId&gt;\n            &lt;artifactId&gt;micrometer-registry-prometheus&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre> <pre><code>server:\n  port: 8080\n\nspring:\n  application:\n    name: gateway\n\n  cloud:\n    gateway:\n      routes:\n\n        # - id: google\n        #   uri: https://www.google.com\n        #   predicates:\n        #     - Path=/google/**\n\n        - id: account\n          uri: http://account:8080\n          predicates:\n            - Path=/account/**\n\n        - id: auth\n          uri: http://auth:8080\n          predicates:\n            - Path=/auth/**\n\n        - id: order\n          uri: http://order:8080\n          predicates:\n            - Path=/order/**\n\n        - id: product\n          uri: http://product:8080\n          predicates:\n            - Path=/product/**\n\n        # - id: exchange\n        #   uri: http://exchange:80\n        #   predicates:\n        #     - Path=/exchange/**\n\nlogging:\n  level:\n    store: ${LOGGING_LEVEL_STORE:debug}\n\nmanagement:\n  endpoint:\n    gateway:\n      enabled: true\n  endpoints:\n    web:\n      base-path: /gateway/actuator\n      exposure:\n        include: [ 'prometheus', 'gateway' ]\n</code></pre> <pre><code>package store.gateway;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class GatewayApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(GatewayApplication.class, args);\n    }\n\n}\n</code></pre> <pre><code>package store.gateway;\n\nimport java.net.InetAddress;\nimport java.net.NetworkInterface;\nimport java.net.SocketException;\nimport java.net.UnknownHostException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Enumeration;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class GatewayResource {\n\n    @GetMapping(\"/\")\n    public ResponseEntity&lt;String&gt; hallo() {\n        return new ResponseEntity&lt;String&gt;(\"api\", HttpStatus.OK);\n    }\n\n\n    @GetMapping({\"/info\", \"/health-check\"})\n    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; version() {\n\n        String hostname = \"hostname can not be resolved\";\n        try {\n            InetAddress addr;\n            addr = InetAddress.getLocalHost();\n            hostname = addr.getHostName();\n        } catch (UnknownHostException ex) { }\n\n        List&lt;String&gt; ips = new ArrayList&lt;String&gt;();\n        try {\n            Enumeration&lt;NetworkInterface&gt; e = NetworkInterface.getNetworkInterfaces();\n            while(e.hasMoreElements()) {\n                NetworkInterface n = (NetworkInterface) e.nextElement();\n                Enumeration&lt;InetAddress&gt; ee = n.getInetAddresses();\n                while (ee.hasMoreElements()) {\n                    InetAddress i = (InetAddress) ee.nextElement();\n                    ips.add(i.getCanonicalHostName() + \": \" + i.getHostAddress());\n                }\n            }\n        } catch (SocketException e) { }\n\n        return new ResponseEntity&lt;Map&lt;String, String&gt;&gt;(\n            Map.ofEntries(\n                Map.entry(\"hostname\", hostname),\n                Map.entry(\"ip\", Arrays.toString(ips.toArray())),\n                Map.entry(\"os.arch\", System.getProperty(\"os.arch\")),\n                Map.entry(\"os.name\", System.getProperty(\"os.name\")),\n                Map.entry(\"os.version\", System.getProperty(\"os.version\")),\n                Map.entry(\"file.separator\", System.getProperty(\"file.separator\")),\n                Map.entry(\"java.class.path\", System.getProperty(\"java.class.path\")),\n                Map.entry(\"java.home\", System.getProperty(\"java.home\")),\n                Map.entry(\"java.vendor\", System.getProperty(\"java.vendor\")),\n                Map.entry(\"java.vendor.url\", System.getProperty(\"java.vendor.url\")),\n                Map.entry(\"java.version\", System.getProperty(\"java.version\")),\n                Map.entry(\"line.separator\", System.getProperty(\"line.separator\")),\n                Map.entry(\"path.separator\", System.getProperty(\"path.separator\")),\n                Map.entry(\"user.dir\", System.getProperty(\"user.dir\")),\n                Map.entry(\"user.home\", System.getProperty(\"user.home\")),\n                Map.entry(\"user.name\", System.getProperty(\"user.name\")),\n                Map.entry(\"jar\", new java.io.File(\n                    GatewayApplication.class.getProtectionDomain()\n                        .getCodeSource()\n                        .getLocation()\n                        .getPath()\n                    ).toString())\n            ), HttpStatus.OK\n        );\n    }\n\n}\n</code></pre> <pre><code>package store.gateway.security;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.reactive.CorsWebFilter;\nimport org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;\n\n@Configuration\npublic class CorsFilter {\n\n    @Bean\n    public CorsWebFilter corsWebFilter() {\n\n        CorsConfiguration corsConfig = new CorsConfiguration();\n        corsConfig.setAllowCredentials(false);\n        corsConfig.addAllowedHeader(\"*\");\n        corsConfig.addAllowedMethod(\"*\");\n        corsConfig.addAllowedOrigin(\"*\");\n\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        source.registerCorsConfiguration(\"/**\", corsConfig);\n\n        return new CorsWebFilter(source);\n    }\n\n}\n</code></pre> <pre><code>FROM openjdk:21-slim\nVOLUME /tmp\nCOPY target/*.jar app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n</code></pre>"},{"location":"checkpoints/checkpoint3/","title":"Checkpoint3","text":"<p>A secutiry of the system is a very important aspect of the system. All security systems are based on authentication and authorization.</p> <ul> <li> <p>Authentication is the process of verifying the identity of a user.</p> </li> <li> <p>Authorization is the process of verifying what the user has access to.</p> </li> </ul> <pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        gateway --&gt; account\n        gateway --&gt; others\n        gateway e4@==&gt; auth:::red\n        auth e2@==&gt; account\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        others --&gt; db\n    end\n    internet e1@==&gt;|request| gateway:::orange\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e4@{ animate: true }\n    classDef red fill:#fcc\n    classDef orange fill:#FCBE3E</code></pre> <pre><code>classDiagram\n    namespace auth {\n        class AuthController {\n            +register(RegisterIn RegisterIn): TokenOut\n            +login(LoginIn loginIn): TokenOut\n        }\n        class RegisterIn {\n            -String name\n            -String email\n            -String password\n        }\n        class LoginIn {\n            -String name\n            -String email\n        }\n        class TokenOut {\n            -String token\n        }\n        class SolveOut {\n            -String idAccount\n        }\n    }\n    namespace auth-service {\n        class AuthResource {\n            +register(RegisterIn RegisterIn) TokenOut\n            +login(LoginIn loginIn) TokenOut\n        }\n        class AuthService {\n            +register(Register) Regiter\n            +login(LoginIn loginIn) String\n        }\n        class Register {\n            -String id\n            -String name\n            -String email\n            -String password\n        }\n    }\n    &lt;&lt;Interface&gt;&gt; AuthController\n    AuthController ..&gt; RegisterIn\n    AuthController ..&gt; LoginIn\n    AuthController ..&gt; TokenOut\n\n    AuthController &lt;|-- AuthResource\n    AuthResource *-- AuthService\n    AuthService ..&gt; Register</code></pre>"},{"location":"checkpoints/checkpoint3/#auth","title":"Auth","text":"<pre><code>\ud83d\udcc1 api\n\u2514\u2500\u2500 \ud83d\udcc1 auth\n    \u251c\u2500\u2500 \ud83d\udcc1 src\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc1 java\n    \u2502           \u2514\u2500\u2500 \ud83d\udcc1 store\n    \u2502               \u2514\u2500\u2500 \ud83d\udcc1 auth\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 AuthController.java\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 LoginIn.java\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 RegisterIn.java\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 SolveOut.java\n    \u2502                   \u2514\u2500\u2500 \ud83d\udcc4 TokenOut.java\n    \u2514\u2500\u2500 \ud83d\udcc4 pom.xml\n</code></pre> Source pom.xmlAuthController.javaLoginIn.javaRegisterIn.javaSolveOut.javaTokenOut.java <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.4.2&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;auth&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;name&gt;auth&lt;/name&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2024.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n&lt;/project&gt;\n</code></pre> <pre><code>package store.auth;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\n\npublic interface AuthController {\n\n    @PostMapping(\"/auth/register\")\n    public ResponseEntity&lt;TokenOut&gt; register(\n        @RequestBody RegisterIn registerIn\n    );\n\n    @PostMapping(\"/auth/login\")\n    public ResponseEntity&lt;TokenOut&gt; login(\n        @RequestBody LoginIn loginIn\n    );\n\n    @PostMapping(\"auth/solve\")\n    public ResponseEntity&lt;SolveOut&gt; solve(\n        @RequestBody TokenOut token\n    );\n\n}\n</code></pre> <pre><code>package store.auth;\n\nimport lombok.Builder;\nimport lombok.experimental.Accessors;\n\n@Builder @Accessors(fluent = true)\npublic record LoginIn(\n    String email,\n    String password\n) {\n}\n</code></pre> <pre><code>package store.auth;\n\nimport lombok.Builder;\nimport lombok.experimental.Accessors;\n\n@Builder @Accessors(fluent = true)\npublic record RegisterIn(\n    String name,\n    String email,\n    String password\n) {\n\n}\n</code></pre> <pre><code>package store.auth;\n\nimport lombok.Builder;\nimport lombok.experimental.Accessors;\n\n@Builder @Accessors(fluent = true)\npublic record SolveOut(\n    String idAccount\n) {\n\n}\n</code></pre> <pre><code>package store.auth;\n\nimport lombok.Builder;\nimport lombok.experimental.Accessors;\n\n@Builder @Accessors(fluent = true)\npublic record TokenOut(\n    String token\n) {\n\n}\n</code></pre>"},{"location":"checkpoints/checkpoint3/#auth-service","title":"Auth-Service","text":"<pre><code>\ud83d\udcc1 api\n\u2514\u2500\u2500 \ud83d\udcc1 auth-service\n    \u251c\u2500\u2500 \ud83d\udcc1 src\n    \u2502   \u251c\u2500\u2500 \ud83d\udcc1 main\n    \u2502   \u2502   \u2514\u2500\u2500 \ud83d\udcc1 java\n    \u2502   \u2502       \u2514\u2500\u2500 \ud83d\udcc1 store\n    \u2502   \u2502           \u2514\u2500\u2500 \ud83d\udcc1 auth\n    \u2502   \u2502               \u251c\u2500\u2500 \ud83d\udcc4 AuthApplication.java\n    \u2502   \u2502               \u251c\u2500\u2500 \ud83d\udcc4 AuthParser.java\n    \u2502   \u2502               \u251c\u2500\u2500 \ud83d\udcc4 AuthResource.java\n    \u2502   \u2502               \u251c\u2500\u2500 \ud83d\udcc4 AuthService.java\n    \u2502   \u2502               \u251c\u2500\u2500 \ud83d\udcc4 JwtService.java\n    \u2502   \u2502               \u2514\u2500\u2500 \ud83d\udcc4 Register.java\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 resources\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc4 application.yaml\n    \u251c\u2500\u2500 \ud83d\udcc4 pom.xml\n    \u2514\u2500\u2500 \ud83d\udcc4 Dockerfile\n</code></pre> Source pom.xmlapplication.yamlAuthApplication.javaAuthParser.javaAuthResource.javaAuthService.javaJwtService.javaRegister.javaDockerfile <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.4.2&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;auth-service&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;store&lt;/groupId&gt;\n            &lt;artifactId&gt;auth&lt;/artifactId&gt;\n            &lt;version&gt;${project.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;store&lt;/groupId&gt;\n            &lt;artifactId&gt;account&lt;/artifactId&gt;\n            &lt;version&gt;${project.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-api --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n            &lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;\n            &lt;version&gt;0.12.6&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n            &lt;artifactId&gt;jjwt-impl&lt;/artifactId&gt;\n            &lt;version&gt;0.12.6&lt;/version&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n            &lt;artifactId&gt;jjwt-jackson&lt;/artifactId&gt; &lt;!-- or jjwt-gson if Gson is preferred --&gt;\n            &lt;version&gt;0.12.6&lt;/version&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- Observability --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.micrometer&lt;/groupId&gt;\n            &lt;artifactId&gt;micrometer-registry-prometheus&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre> <pre><code>server:\n  port: 8080\n\nspring:\n  application:\n    name: auth\n\n\nstore:\n  jwt:\n    issuer: Insper\n    secretKey: ${JWT_SECRET_KEY:yrBBgYlvJQeslzFlgX9MFZccToI2fjRFqualquercoisa}\n\nmanagement:\n  endpoints:\n    web:\n      base-path: /auth/actuator\n      exposure:\n        include: [ 'prometheus' ]    \n</code></pre> <pre><code>package store.auth;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\n\n@EnableFeignClients(basePackages = {\n    \"store.account\"\n})\n@SpringBootApplication\npublic class AuthApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AuthApplication.class, args);\n    }\n\n}\n</code></pre> <pre><code>package store.auth;\n\npublic class AuthParser {\n\n    public static Register to(RegisterIn in) {\n        return in == null ? null :\n            Register.builder()\n                .name(in.name())\n                .email(in.email())\n                .password(in.password())\n                .build();\n    }\n\n    public static TokenOut to(String token) {\n        return token == null ? null :\n            TokenOut.builder()\n                .token(token)\n                .build();\n    }\n\n}\n</code></pre> <pre><code>package store.auth;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class AuthResource implements AuthController {\n\n    @Autowired\n    private AuthService authService;\n\n    @Override\n    public ResponseEntity&lt;TokenOut&gt; register(RegisterIn registerIn) {\n        String token = authService.register(AuthParser.to(registerIn));\n        return ResponseEntity.ok().body(AuthParser.to(token));\n    }\n\n    @Override\n    public ResponseEntity&lt;TokenOut&gt; login(LoginIn loginIn) {\n        String token = authService.login(loginIn.email(), loginIn.password());\n        return ResponseEntity.ok().body(AuthParser.to(token));\n    }\n\n    @Override\n    public ResponseEntity&lt;SolveOut&gt; solve(TokenOut token) {\n        return ResponseEntity.ok().body(\n            authService.solve(token.token())\n        );\n    }\n\n}\n</code></pre> <pre><code>package store.auth;\n\nimport java.util.Date;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Service;\n\nimport store.account.AccountController;\nimport store.account.AccountIn;\nimport store.account.AccountOut;\n\n@Service\npublic class AuthService {\n\n    @Autowired\n    private AccountController accountController;\n\n    @Autowired\n    private JwtService jwtService;\n\n    public String register(Register register) {\n        AccountIn accountIn = AccountIn.builder()\n            .email(register.email())\n            .name(register.name())\n            .password(register.password())\n            .build();\n\n        // registrar no account\n        // aqui estou substituindo o RestTemplate\n        ResponseEntity&lt;AccountOut&gt; response = accountController.create(accountIn);\n        AccountOut accountOut = response.getBody();\n\n        // gerar o token\n        // regra de geracao de token\n        return generateToken(accountOut.id());\n    }\n\n    public String login(String email, String password) {\n\n        ResponseEntity&lt;AccountOut&gt; response = accountController.findByEmailAndPassword(\n            AccountIn.builder()\n                .email(email)\n                .password(password)\n                .build()\n        );\n        AccountOut accountOut = response.getBody();\n\n        return generateToken(accountOut.id());\n    }\n\n    private String generateToken(String id) {\n        Date notBefore = new Date();\n        Date expiration = new Date(notBefore.getTime() + 1000l * 60 * 60 * 24);\n        String token = jwtService.create(id, notBefore, expiration);\n        return token;\n    }\n\n    public SolveOut solve(String token) {\n        return SolveOut.builder()\n            .idAccount(jwtService.getId(token))\n            .build();\n    }\n\n}\n</code></pre> <pre><code>package store.auth;\n\nimport java.util.Date;\n\nimport javax.crypto.SecretKey;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\n\nimport io.jsonwebtoken.Claims;\nimport io.jsonwebtoken.JwtParser;\nimport io.jsonwebtoken.Jwts;\nimport io.jsonwebtoken.io.Decoders;\nimport io.jsonwebtoken.security.Keys;\n\n@Service\npublic class JwtService {\n\n    @Value(\"${store.jwt.issuer}\")\n    private String issuer;\n\n    @Value(\"${store.jwt.secret-key}\")\n    private String secretKey;\n\n    public String create(String id, Date notBefore, Date expiration) {\n        SecretKey key = Keys.hmacShaKeyFor(Decoders.BASE64.decode(secretKey));\n        String jwt = Jwts.builder()\n            .header()\n            .and()\n            .id(id)\n            .issuer(issuer)\n            .signWith(key)\n            .notBefore(notBefore)\n            .expiration(expiration)\n            .compact();\n        return jwt;\n    }\n\n    public String getId(String token) {\n        Claims claims = resolveClaims(token);\n\n        Date now = new Date();\n        if (claims.getExpiration().before(now)) {\n            throw new RuntimeException(\"Expired token\");\n        }\n        if (claims.getNotBefore().after(now)) {\n            throw new RuntimeException(\"Token is actived yet\");\n        }\n        // check if token is revoked by a CRL\n        return claims.getId();\n    }\n\n    private Claims resolveClaims(String token) {\n        SecretKey key = Keys.hmacShaKeyFor(Decoders.BASE64.decode(secretKey));\n        JwtParser parser = Jwts.parser().verifyWith(key).build();\n        return parser.parseSignedClaims(token).getPayload();\n    }\n\n}\n</code></pre> <pre><code>package store.auth;\n\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\n@Builder\n@Data @Accessors(fluent = true)\npublic class Register {\n\n    private String id;\n    private String name;\n    private String email;\n    private String password;\n\n}\n</code></pre> <pre><code>FROM openjdk:21-slim\nVOLUME /tmp\nCOPY target/*.jar app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n</code></pre> RegisterLogin <pre><code>POST /auth/register\n</code></pre> <p>Body <pre><code>{\n    \"name\": \"Antonio do Estudo\",\n    \"email\": \"acme@insper.edu.br\",\n    \"password\": \"123@321\"\n}\n</code></pre></p> <p>Sequence Diagram</p> <pre><code>sequenceDiagram\nautonumber\nactor User\nUser-&gt;&gt;+Auth: register (RegisterIn)\nAuth-&gt;&gt;+Account: create (AccountIn)\nAccount-&gt;&gt;-Auth: returns the new account (AccountOut)\nAuth-&gt;&gt;-User: returns 201 (TokenOut)</code></pre> <pre><code>POST /auth/login\n</code></pre> <p>Body <pre><code>{\n    \"email\": \"acme@insper.edu.br\",\n    \"password\": \"123@321\"\n}\n</code></pre></p> <p>Sequence Diagram</p> <pre><code>sequenceDiagram\nautonumber\nactor User\nUser-&gt;&gt;+Auth: authenticate (LoginIn)\nAuth-&gt;&gt;+Account: findByEmailAndPassword\ncritical validated\n    Account-&gt;&gt;-Auth: returns the account\noption denied\n    Auth--&gt;&gt;User: unauthorized message\nend  \nAuth-&gt;&gt;Auth: generates a token\nAuth-&gt;&gt;-User: returns TokenOut\nUser-&gt;&gt;User: stores the token to use for the next requests</code></pre>"},{"location":"checkpoints/checkpoint3/#security","title":"Security","text":"<p>Security is an important aspect of software development. It involves protecting the confidentiality, integrity, and availability of data and resources. Two key concepts in security are authentication and authorization.</p>"},{"location":"checkpoints/checkpoint3/#authentication","title":"Authentication","text":"<p>Authentication is the process of verifying the identity of a user or system. It ensures that the user or system is who they claim to be. Common authentication methods include passwords, biometrics, and two-factor authentication. The system checks these credentials against the stored data. If the credentials are valid, the system confirms the user's identity.</p> <p>In many systems, after successful authentication, the system generates a token. This token is a piece of data that represents the user's authentication session. It's like a digital ticket that proves the user's identity for a certain period of time.</p> <p>This token is then sent back to the user. The user's client software (like a web browser) stores this token and sends it along with every subsequent request to the server (in case of stateless server). This way, the server knows that the request comes from an authenticated user without needing to ask for the credentials again.</p> <p>Here's a simplified step-by-step process:</p> <pre><code>sequenceDiagram\n  autonumber\n  actor User\n  User-&gt;&gt;+Auth Service: authentication(credentials)\n  Auth Service-&gt;&gt;Auth Service: verifies credenditals and generates a token\n  Auth Service-&gt;&gt;-User: returns the token\n  User-&gt;&gt;User: stores the token to use for the next requests</code></pre> <ol> <li>The user sends their username and password (or other credentials) to the server;</li> <li>The server verifies the credentials. If they're valid, the server generates a token.</li> <li>The server sends this token back to the user.</li> <li>The user's client software stores this token.</li> <li>For every subsequent request, the client sends this token along with the request.</li> <li>The server checks the token to ensure it's valid and hasn't expired.</li> <li>This token-based authentication process is commonly used in many modern web applications and APIs. It helps maintain the user's session and allows the server to authenticate requests without storing the user's state.</li> </ol>"},{"location":"checkpoints/checkpoint3/#authorization","title":"Authorization","text":"<p>Authorization is the process of granting or denying access to specific resources or actions based on the authenticated user's privileges. It determines what a user is allowed to do within a system. Authorization can be role-based, where permissions are assigned based on predefined roles, or attribute-based, where permissions are based on specific attributes of the user.</p> <p>In many systems, the token not only represents the user's identity, but also includes information about their permissions or roles. This is often done using a type of token called a JSON Web Token (JWT), which can include a payload of data.</p> <p>Here's a simplified step-by-step process:</p> <pre><code>sequenceDiagram\n  autonumber\n  actor User\n  User-&gt;&gt;Auth Service: request with token\n  Auth Service-&gt;&gt;Auth Service: decodes the token and extracts claims\n  Auth Service-&gt;&gt;Auth Service: verifies permissions\n  critical allowed\n    Auth Service-&gt;&gt;Secured Resource: authorizes the request\n    Secured Resource-&gt;&gt;User: returns the response\n  option denied\n    Auth Service--&gt;&gt;User: unauthorized message\n  end  </code></pre> <ol> <li>After authentication, the user's client software sends a request to a server. This request includes the token.</li> <li>The server decodes the token and extracts the user's identity and permissions.</li> <li>The server checks whether the user has the necessary permissions for the requested action. This could involve checking the user's roles or other attributes against the requirements for the action.</li> <li>If the user has the necessary permissions, the server allows the action. If not, the server denies the action.</li> </ol> <p>This process allows the server to authorize actions without needing to repeatedly look up the user's permissions. It also allows for stateless servers, as the necessary information is included in every request.</p> <p>By implementing strong authentication and authorization mechanisms, software systems can ensure that only authorized users have access to sensitive data and functionalities, reducing the risk of unauthorized access and potential security breaches.</p> <p>As the platform has only one entrace point, it is</p> <p>JWT is a decentralized </p> <p>The point of entrance of API is the gateway, then as suggested by <sup>8</sup>.</p> <p>The gateway is responsible for the security of the system. It is the first point of contact for all incoming requests. The gateway is responsible for routing requests to the appropriate services and ensuring that only authorized users can access the system.</p> <pre><code>sequenceDiagram\n  autonumber\n  actor User\n  User-&gt;&gt;Gateway: route(ServerHttpRequest)\n  Gateway-&gt;&gt;+AuthorizationFilter: filter(ServerWebExchange, GatewayFilterChain)\n  AuthorizationFilter-&gt;&gt;RouteValidator: isSecured.test(ServerHttpRequest)\n  RouteValidator--&gt;&gt;AuthorizationFilter: True | False\n  critical notSecured\n    AuthorizationFilter-&gt;&gt;Gateway: follow the flux\n  end\n  AuthorizationFilter-&gt;&gt;AuthorizationFilter: isAuthMissing(ServerHttpRequest)\n  critical isAuthMissing\n    AuthorizationFilter-&gt;&gt;User: unauthorized message\n  end\n  AuthorizationFilter-&gt;&gt;AuthorizationFilter: validateAuthorizationHeader()\n  critical isInvalidAuthorizationHeader\n    AuthorizationFilter-&gt;&gt;User: unauthorized message\n  end\n  AuthorizationFilter-&gt;&gt;Auth: solve(Token)\n  critical isInvalidToken\n    Auth-&gt;&gt;User: unauthorized message\n  end\n  Auth-&gt;&gt;AuthorizationFilter: returns SolveOut\n  AuthorizationFilter-&gt;&gt;AuthorizationFilter: updateRequestHeader(ServerHttpRequest)\n  AuthorizationFilter-&gt;&gt;Gateway: follow the flux</code></pre>"},{"location":"checkpoints/checkpoint3/#gateway-service","title":"Gateway-Service","text":"<pre><code>\ud83d\udcc1 api\n\u2514\u2500\u2500 \ud83d\udcc1 gateway-service\n    \u251c\u2500\u2500 \ud83d\udcc1 src\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main\n    \u2502       \u251c\u2500\u2500 \ud83d\udcc1 java\n    \u2502       \u2502   \u2514\u2500\u2500 \ud83d\udcc1 store\n    \u2502       \u2502       \u2514\u2500\u2500 \ud83d\udcc1 gateway\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 GatewayApplication.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 GatewayResource.java\n    \u2502       \u2502           \u2514\u2500\u2500 \ud83d\udcc1 security\n    \u2502       \u2502               \u251c\u2500\u2500 \ud83d\udcc4 AuthorizationFilter.java\n    \u2502       \u2502               \u251c\u2500\u2500 \ud83d\udcc4 CorsFilter.java\n    \u2502       \u2502               \u251c\u2500\u2500 \ud83d\udcc4 RouterValidator.java\n    \u2502       \u2502               \u251c\u2500\u2500 \ud83d\udcc4 SolveOut.java\n    \u2502       \u2502               \u2514\u2500\u2500 \ud83d\udcc4 TokenOut.java\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc1 resources\n    \u2502           \u2514\u2500\u2500 \ud83d\udcc4 application.yaml\n    \u251c\u2500\u2500 \ud83d\udcc4 pom.xml\n    \u2514\u2500\u2500 \ud83d\udcc4 Dockerfile\n</code></pre> Source pom.xmlapplication.yamlGatewayApplication.javaGatewayResource.javaAuthorizationFilter.javaCorsFilter.javaRouterValidator.javaSolveOut.javaTokenOut.javaDockerfile <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.4.2&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;gateway-service&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2024.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.micrometer&lt;/groupId&gt;\n            &lt;artifactId&gt;micrometer-registry-prometheus&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre> <pre><code>server:\n  port: 8080\n\nspring:\n  application:\n    name: gateway\n\n  cloud:\n    gateway:\n      routes:\n\n        # - id: google\n        #   uri: https://www.google.com\n        #   predicates:\n        #     - Path=/google/**\n\n        - id: account\n          uri: http://account:8080\n          predicates:\n            - Path=/account/**\n\n        - id: auth\n          uri: http://auth:8080\n          predicates:\n            - Path=/auth/**\n\n        - id: order\n          uri: http://order:8080\n          predicates:\n            - Path=/order/**\n\n        - id: product\n          uri: http://product:8080\n          predicates:\n            - Path=/product/**\n\n        # - id: exchange\n        #   uri: http://exchange:80\n        #   predicates:\n        #     - Path=/exchange/**\n\nlogging:\n  level:\n    store: ${LOGGING_LEVEL_STORE:debug}\n\nmanagement:\n  endpoint:\n    gateway:\n      enabled: true\n  endpoints:\n    web:\n      base-path: /gateway/actuator\n      exposure:\n        include: [ 'prometheus', 'gateway' ]\n</code></pre> <pre><code>package store.gateway;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class GatewayApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(GatewayApplication.class, args);\n    }\n\n}\n</code></pre> <pre><code>package store.gateway;\n\nimport java.net.InetAddress;\nimport java.net.NetworkInterface;\nimport java.net.SocketException;\nimport java.net.UnknownHostException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Enumeration;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class GatewayResource {\n\n    @GetMapping(\"/\")\n    public ResponseEntity&lt;String&gt; hallo() {\n        return new ResponseEntity&lt;String&gt;(\"api\", HttpStatus.OK);\n    }\n\n\n    @GetMapping({\"/info\", \"/health-check\"})\n    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; version() {\n\n        String hostname = \"hostname can not be resolved\";\n        try {\n            InetAddress addr;\n            addr = InetAddress.getLocalHost();\n            hostname = addr.getHostName();\n        } catch (UnknownHostException ex) { }\n\n        List&lt;String&gt; ips = new ArrayList&lt;String&gt;();\n        try {\n            Enumeration&lt;NetworkInterface&gt; e = NetworkInterface.getNetworkInterfaces();\n            while(e.hasMoreElements()) {\n                NetworkInterface n = (NetworkInterface) e.nextElement();\n                Enumeration&lt;InetAddress&gt; ee = n.getInetAddresses();\n                while (ee.hasMoreElements()) {\n                    InetAddress i = (InetAddress) ee.nextElement();\n                    ips.add(i.getCanonicalHostName() + \": \" + i.getHostAddress());\n                }\n            }\n        } catch (SocketException e) { }\n\n        return new ResponseEntity&lt;Map&lt;String, String&gt;&gt;(\n            Map.ofEntries(\n                Map.entry(\"hostname\", hostname),\n                Map.entry(\"ip\", Arrays.toString(ips.toArray())),\n                Map.entry(\"os.arch\", System.getProperty(\"os.arch\")),\n                Map.entry(\"os.name\", System.getProperty(\"os.name\")),\n                Map.entry(\"os.version\", System.getProperty(\"os.version\")),\n                Map.entry(\"file.separator\", System.getProperty(\"file.separator\")),\n                Map.entry(\"java.class.path\", System.getProperty(\"java.class.path\")),\n                Map.entry(\"java.home\", System.getProperty(\"java.home\")),\n                Map.entry(\"java.vendor\", System.getProperty(\"java.vendor\")),\n                Map.entry(\"java.vendor.url\", System.getProperty(\"java.vendor.url\")),\n                Map.entry(\"java.version\", System.getProperty(\"java.version\")),\n                Map.entry(\"line.separator\", System.getProperty(\"line.separator\")),\n                Map.entry(\"path.separator\", System.getProperty(\"path.separator\")),\n                Map.entry(\"user.dir\", System.getProperty(\"user.dir\")),\n                Map.entry(\"user.home\", System.getProperty(\"user.home\")),\n                Map.entry(\"user.name\", System.getProperty(\"user.name\")),\n                Map.entry(\"jar\", new java.io.File(\n                    GatewayApplication.class.getProtectionDomain()\n                        .getCodeSource()\n                        .getLocation()\n                        .getPath()\n                    ).toString())\n            ), HttpStatus.OK\n        );\n    }\n\n}\n</code></pre> <pre><code>package store.gateway.security;\n\nimport java.util.Arrays;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.cloud.gateway.filter.GatewayFilterChain;\nimport org.springframework.cloud.gateway.filter.GlobalFilter;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.server.reactive.ServerHttpRequest;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.reactive.function.client.WebClient;\nimport org.springframework.web.server.ResponseStatusException;\nimport org.springframework.web.server.ServerWebExchange;\n\nimport reactor.core.publisher.Mono;\n\n@Component\npublic class AuthorizationFilter implements GlobalFilter  {\n\n    private static Logger logger = LoggerFactory.getLogger(AuthorizationFilter.class);\n\n    private static final String AUTHORIZATION_HEADER = \"Authorization\";\n    private static final String AUTHORIZATION_BEARER_TOKEN_HEADER = \"Bearer\";\n    private static final String AUTH_SERVICE_TOKEN_SOLVE = \"http://auth:8080/auth/solve\";\n\n    @Autowired\n    private RouterValidator routerValidator;\n\n    @Autowired\n    private WebClient.Builder webClient;\n\n    @Override\n    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n        logger.debug(\"Entrou no filtro de authorization\");\n        ServerHttpRequest request = exchange.getRequest();\n        if (!routerValidator.isSecured.test(request)) {\n            logger.debug(\"Rota nao eh segura\");\n            return chain.filter(exchange);\n        }\n        logger.debug(\"Rota segura\");\n        if (!isAuthMissing(request)) {\n            logger.debug(\"Tem Authorization no Header\");\n            final String[] parts = this.getAuthHeader(request).split(\" \");\n            if (parts.length != 2 || !parts[0].equals(AUTHORIZATION_BEARER_TOKEN_HEADER)) {\n                logger.debug(\"Formato enviado: \" + Arrays.toString(parts));\n                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"Authorization header format must be: 'Bearer {token}'\");\n            }\n            logger.debug(\"Resolver o token\");\n            return requestAuthTokenSolve(exchange, chain, parts[1]);\n        }\n\n        throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, \"Unauthorized\");\n    }\n\n    private boolean isAuthMissing(ServerHttpRequest request) {\n        return !request.getHeaders().containsKey(AUTHORIZATION_HEADER);\n    }\n\n    private String getAuthHeader(ServerHttpRequest request) {\n        return request.getHeaders().getOrEmpty(AUTHORIZATION_HEADER).get(0);\n    }\n\n    // este metodo eh responsavel por enviar o token ao Auth Microservice\n    // a fim de interpretar o token, a chamada eh feita via Rest.\n    private Mono&lt;Void&gt; requestAuthTokenSolve(ServerWebExchange exchange, GatewayFilterChain chain, String jwt) {\n        logger.debug(\"solving jwt: \" + jwt);\n        return webClient\n            .defaultHeader(\n                HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE\n            )\n            .build()\n            .post()\n            .uri(AUTH_SERVICE_TOKEN_SOLVE)\n            .bodyValue(TokenOut.builder().token(jwt).build())\n            .retrieve()\n            .toEntity(SolveOut.class)\n            .flatMap(response -&gt; {\n                if (response != null &amp;&amp; response.hasBody() &amp;&amp; response.getBody() != null) {\n                    final SolveOut out = response.getBody();\n                    logger.debug(\"id account\" + out.idAccount());\n                    ServerWebExchange modifiedExchange = this.updateRequest(exchange, out);\n                    return chain.filter(modifiedExchange);\n                } else {\n                    throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, \"Invalid token\");\n                }\n            });\n    }\n\n    private ServerWebExchange updateRequest(ServerWebExchange exchange, SolveOut out) {\n        logger.debug(\"original headers: \" + exchange.getRequest().getHeaders().toString());\n        ServerWebExchange modified = exchange.mutate()\n            .request(\n                exchange.getRequest()\n                    .mutate()\n                    .header(\"id-account\", out.idAccount())\n                    .build()\n            ).build();\n        logger.debug(\"updated headers: \" + modified.getRequest().getHeaders().toString());\n        return modified;\n    }\n\n}\n</code></pre> <pre><code>package store.gateway.security;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.reactive.CorsWebFilter;\nimport org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;\n\n@Configuration\npublic class CorsFilter {\n\n    @Bean\n    public CorsWebFilter corsWebFilter() {\n\n        CorsConfiguration corsConfig = new CorsConfiguration();\n        corsConfig.setAllowCredentials(false);\n        corsConfig.addAllowedHeader(\"*\");\n        corsConfig.addAllowedMethod(\"*\");\n        corsConfig.addAllowedOrigin(\"*\");\n\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        source.registerCorsConfiguration(\"/**\", corsConfig);\n\n        return new CorsWebFilter(source);\n    }\n\n}\n</code></pre> <pre><code>package store.gateway.security;\n\nimport java.util.List;\nimport java.util.function.Predicate;\n\nimport org.springframework.http.server.reactive.ServerHttpRequest;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class RouterValidator {\n\n    private List&lt;String&gt; openApiEndpoints = List.of(\n\n        // authorization and authentication\n        \"POST /auth/register\",\n        \"POST /auth/login\",\n\n        // observability\n        \"GET /auth/actuator/prometheus\",\n        \"GET /account/actuator/prometheus\",\n        \"GET /product/actuator/prometheus\",\n        \"GET /order/actuator/prometheus\"\n\n    );\n\n    public Predicate&lt;ServerHttpRequest&gt; isSecured =\n        request -&gt; openApiEndpoints\n            .stream()\n            .noneMatch(uri -&gt; {\n                String[] parts = uri.replaceAll(\"[^a-zA-Z0-9// *]\", \"\").split(\" \");\n                final String method = parts[0];\n                final String path = parts[1];\n                final boolean deep = path.endsWith(\"/**\");\n                return (\"ANY\".equalsIgnoreCase(method) || request.getMethod().toString().equalsIgnoreCase(method))\n                    &amp;&amp; (request.getURI().getPath().equals(path) || (deep &amp;&amp; request.getURI().getPath().startsWith(path.replace(\"/**\", \"\"))));\n            });\n\n}\n</code></pre> <pre><code>package store.gateway.security;\n\nimport lombok.Builder;\nimport lombok.experimental.Accessors;\n\n@Builder @Accessors(fluent = true)\npublic record SolveOut(\n    String idAccount\n) {\n\n}\n</code></pre> <pre><code>package store.gateway.security;\n\nimport lombok.Builder;\nimport lombok.experimental.Accessors;\n\n@Builder @Accessors(fluent = true)\npublic record TokenOut(\n    String token\n) {\n\n}\n</code></pre> <pre><code>FROM openjdk:21-slim\nVOLUME /tmp\nCOPY target/*.jar app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n</code></pre>"},{"location":"checkpoints/checkpoint3/#jwt-json-web-token","title":"JWT - JSON Web Token","text":"<p>JWT stands for JSON Web Token. It is a compact, URL-safe means of representing claims between two parties. JWTs are commonly used to secure the transmission of information between parties in a web environment, typically for authentication and information exchange. The JWT specification is defined by RFC 7519<sup>1</sup> and it is a decentralized approach for security (which can support horizontal scalability).</p> <p>Here are the key components and concepts of JWT:</p> <ul> <li>JSON Format: JWTs are represented as JSON objects that are easy to parse and generate. The JSON format makes them human-readable and easy to work with.</li> <li> <p>Three Parts: JWTs consist of three parts separated by dots (<code>.</code>): Header, Payload, and Signature.</p> <ul> <li> <p>Header: The header typically consists of two parts: the type of the token (JWT) and the signing algorithm being used, such as HMAC SHA256 or RSA.</p> </li> <li> <p>Payload: The payload contains the claims. Claims are statements about an entity (typically, the user) and additional data. There are three types of claims: registered, public, and private claims.</p> </li> <li> <p>Signature: To create the signature part, you take the encoded header, the encoded payload, a secret, the algorithm specified in the header, and sign that.</p> </li> </ul> </li> <li> <p>Encoding: Each of the three parts is Base64Url encoded, and the resulting strings are concatenated with periods between them. The final JWT looks like: <code>xxxxx.yyyyy.zzzzz</code>.</p> </li> <li>Stateless and Self-contained: JWTs are stateless, meaning that all the information needed is within the token itself. The server doesn't need to store the user's state. They are also self-contained, meaning that all the information needed is contained within the token.</li> <li>Use Cases: JWTs are commonly used for authentication and information exchange between parties. For example, after a user logs in, a server could generate a JWT and send it to the client. The client can then include the JWT in the headers of subsequent requests to access protected resources. The server can verify the authenticity of the JWT using the stored secret key.</li> <li>Security Considerations: While JWTs are widely used and versatile, it's important to handle them securely. For instance, the key used to sign the JWT should be kept secret, and HTTPS should be used to transmit JWTs to prevent man-in-the-middle attacks.</li> </ul> <p>Here's a simple example of a JWT created on JWT Builder<sup>2</sup>:</p> <p><code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJJbnNwZXIiLCJpYXQiOjE3MDMwMDgzMzgsImV4cCI6MjAxODU0MTEzOCwiYXVkIjoid3d3Lmluc3Blci5lZHUuYnIiLCJzdWIiOiJodW1iZXJ0b3JzQGluc3Blci5lZHUuYnIiLCJHaXZlbk5hbWUiOiJIdW1iZXJ0byIsIlN1cm5hbWUiOiJTYW5kbWFubiIsIkVtYWlsIjoiaHVtYmVydG9yc0BpbnNwZXIuZWR1LmJyIiwiUm9sZSI6IlByb2Zlc3NvciJ9.SsGdvR5GbYWTRbxY7IGxHt1vSxhkpRueBJWsi0lrPhJVCICp119QjU8F3QvHW0yF5tw-HhQ9RVh0l89t4M0LNw</code></p> <p>This JWT consists of three parts, decoded by <sup>3</sup>:</p> HeaderPayloadSignature <p><code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9</code></p> <pre><code>{\n  \"typ\": \"JWT\",\n  \"alg\": \"HS512\"\n}\n</code></pre> <p><code>eyJpc3MiOiJJbnNwZXIiLCJpYXQiOjE3MDMwMDgzMzgsImV4cCI6MjAxODU0MTEzOCwiYXVkIjoid3d3Lmluc3Blci5lZHUuYnIiLCJzdWIiOiJodW1iZXJ0b3JzQGluc3Blci5lZHUuYnIiLCJHaXZlbk5hbWUiOiJIdW1iZXJ0byIsIlN1cm5hbWUiOiJTYW5kbWFubiIsIkVtYWlsIjoiaHVtYmVydG9yc0BpbnNwZXIuZWR1LmJyIiwiUm9sZSI6IlByb2Zlc3NvciJ9</code></p> <pre><code>{\n  \"iss\": \"Insper\",\n  \"iat\": 1703008338,\n  \"exp\": 2018541138,\n  \"aud\": \"www.insper.edu.br\",\n  \"sub\": \"humbertors@insper.edu.br\",\n  \"GivenName\": \"Humberto\",\n  \"Surname\": \"Sandmann\",\n  \"Email\": \"humbertors@insper.edu.br\",\n  \"Role\": \"Professor\"\n}\n</code></pre> <p><code>SsGdvR5GbYWTRbxY7IGxHt1vSxhkpRueBJWsi0lrPhJVCICp119QjU8F3QvHW0yF5tw-HhQ9RVh0l89t4M0LNw</code></p> <pre><code>HMACSHA512(\n  base64UrlEncode(header) + \".\" +\n  base64UrlEncode(payload),\n  qwertyuiopasdfghjklzxcvbnm123456,\n)\n</code></pre> <p>JWTs are widely used in web development due to their simplicity, flexibility, and support across various programming languages and frameworks. They are commonly used in token-based authentication systems.</p>"},{"location":"checkpoints/checkpoint3/#addtional-material","title":"Addtional Material","text":"<ul> <li> <p>JSON Web Token</p> </li> <li> <p> Autentica\u00e7\u00e3o e Autoriza\u00e7\u00e3o com Spring Security e JWT Tokens by Fernanda Kipper</p> <p></p> </li> <li> <p>Spring Cloud Security</p> </li> <li> <p> ByeteByteGo - Why is JWT popular?</p> <p></p> </li> </ul> <ol> <li> <p>RFC 7519 - JSON Web Token (JWT), 2015.\u00a0\u21a9</p> </li> <li> <p>JWT - Builder.\u00a0\u21a9</p> </li> <li> <p>jwt.io - JWT Verification.\u00a0\u21a9</p> </li> <li> <p>Unix Time Stamp - Epoch Converter.\u00a0\u21a9</p> </li> <li> <p>DELANTHA, R., Spring Cloud Gateway security with JWT, 2023.\u00a0\u21a9</p> </li> <li> <p>Wikipedia - Pepper (cryptography).\u00a0\u21a9</p> </li> <li> <p>PGzlan, Serve your hash with Salt and Pepper for Stronger Account Security, 2023.\u00a0\u21a9</p> </li> <li> <p>DELANTHA, R., Spring Cloud Gateway security with JWT, 2023.\u00a0\u21a9</p> </li> </ol>"},{"location":"checkpoints/checkpoint4/","title":"Checkpoint4","text":"<p>Jenkis is a continuous integration and continuous delivery (CI/CD) tool that automates the process of building, testing, and deploying software. It is widely used in DevOps practices to streamline the software development lifecycle.</p>"},{"location":"checkpoints/checkpoint4/#containerized-jenkins","title":"Containerized Jenkins","text":"<p>In this checkpoint, we will set up a Jenkins server using Docker Compose. This will allow us to run Jenkins in a containerized environment, making it easy to manage and deploy.</p> <pre><code>\ud83d\udcc1 api/\n\ud83d\udcc1 jenkins/\n\u2514\u2500\u2500 \ud83d\udcc4 compose.yaml\n</code></pre> Source compose.yaml <pre><code>&lt;!-- --8&lt;-- \"https://raw.githubusercontent.com/Insper/platform/refs/heads/main/jenkins/compose.yaml\" --&gt;\n</code></pre> <p>To run this container:</p> <pre><code>docker compose up -d --build\n</code></pre> <pre><code>jenkins/# docker compose up -d --build\n\n[+] Running 2/2\n \u2714 jenkins Created              0.1s \n \u2714 Container jenkins Started    0.2s \n</code></pre> <p>Jenkins is now running on port 9080. You can access it by navigating to http://localhost:9080/ in your web browser.</p>"},{"location":"checkpoints/checkpoint4/#jenkins-configuration","title":"Jenkins Configuration","text":"<p>Once Jenkins is running, you will need to configure it. The first time you access Jenkins, you will be prompted to unlock it using an initial admin password.</p> <p>Admin</p> <p>Please, to avoid permission issues, run the console as administrator.</p> <p>Setting the a number of executors to 10 will allow us to run two jobs in parallel. This is useful for speeding up the build process, especially when we have multiple projects or stages that can be executed concurrently.</p> <p></p>"},{"location":"checkpoints/checkpoint4/#pipeline","title":"Pipeline","text":"<p>In this checkpoint, we will create a Jenkins pipeline that will build and deploy our application, Pipeline as Code. The pipeline will be defined in a <code>Jenkinsfile</code> located in the root of our project.</p> <p></p> <pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 account/\n    \u2514\u2500\u2500 \ud83d\udcc4 Jenkinsfile\n</code></pre> Source Jenkinsfile <pre><code>pipeline {\n    agent any\n    environment {\n        SERVICE = 'account'\n        NAME = \"humbertosandmann/${env.SERVICE}\"\n    }\n    stages {\n        stage('Dependecies') {\n            steps {\n                build job: 'account', wait: true\n            }\n        }\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }      \n        stage('Build &amp; Push Image') {\n            steps {\n                withCredentials([usernamePassword(\n                    credentialsId: 'dockerhub-credential',\n                    usernameVariable: 'USERNAME',\n                    passwordVariable: 'TOKEN')])\n                {\n                    sh \"docker login -u $USERNAME -p $TOKEN\"\n                    sh \"docker buildx create --use --platform=linux/arm64,linux/amd64 --node multi-platform-builder-${env.SERVICE} --name multi-platform-builder-${env.SERVICE}\"\n                    sh \"docker buildx build --platform=linux/arm64,linux/amd64 --push --tag ${env.NAME}:latest --tag ${env.NAME}:${env.BUILD_ID} -f Dockerfile .\"\n                    sh \"docker buildx rm --force multi-platform-builder-${env.SERVICE}\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>The <code>Jenkinsfile</code> defines the stages of our pipeline, including building the application, running tests, and deploying the application - Pipeline as Code. Each stage can be customized to fit the needs of your project. The pipeline can be triggered manually or automatically based on events such as code commits or pull requests. This allows for continuous integration and continuous delivery (CI/CD) of our application.</p> <p>eg.: Pipeline for account-service:</p> <pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 account-service/\n    \u2514\u2500\u2500 \ud83d\udcc4 Jenkinsfile\n</code></pre> Jenkinsfile<pre><code>pipeline {\n    agent any\n    environment {\n        SERVICE = 'account'\n        NAME = \"humbertosandmann/${env.SERVICE}\"\n    }\n    stages {\n        stage('Dependecies') {\n            steps {\n                build job: 'account', wait: true\n            }\n        }\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }      \n        stage('Build &amp; Push Image') {\n            steps {\n                withCredentials([usernamePassword(credentialsId: 'dockerhub-credential', usernameVariable: 'USERNAME', passwordVariable: 'TOKEN')]) {\n                    sh \"docker login -u $USERNAME -p $TOKEN\"\n                    sh \"docker buildx create --use --platform=linux/arm64,linux/amd64 --node multi-platform-builder-${env.SERVICE} --name multi-platform-builder-${env.SERVICE}\"\n                    sh \"docker buildx build --platform=linux/arm64,linux/amd64 --push --tag ${env.NAME}:latest --tag ${env.NAME}:${env.BUILD_ID} -f Dockerfile .\"\n                    sh \"docker buildx rm --force multi-platform-builder-${env.SERVICE}\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>The pipeline is defined in a declarative syntax, which makes it easy to read and understand. Each stage can contain multiple steps, which are the individual tasks that need to be performed:</p> <ol> <li> <p>The <code>environment</code> block defines environment variables that can be used throughout the pipeline. In this case, we define the <code>SERVICE</code> and <code>NAME</code> variables, which are used in the <code>Build &amp; Push Image</code> stage.</p> </li> <li> <p>The <code>Build &amp; Push Image</code> stage uses the <code>withCredentials</code> block to securely access Docker Hub credentials stored in Jenkins. The <code>docker login</code> command authenticates with Docker Hub, and the <code>docker buildx build</code> command builds and pushes the Docker image to the specified tags. The <code>docker buildx</code> command is used to build multi-platform images, allowing us to create images that can run on different architectures (e.g., ARM and AMD64). The <code>--platform</code> flag specifies the target platforms, and the <code>--push</code> flag pushes the built image to Docker Hub.</p> </li> <li> <p>The <code>docker buildx create</code> command creates a new buildx builder instance, which is used to build multi-platform images. The <code>--use</code> flag sets this builder as the default for the current shell session. The <code>--node</code> flag specifies the name of the builder node, which is used to identify the builder instance.</p> </li> <li> <p>The <code>docker buildx rm</code> command removes the builder instance after the build is complete, freeing up resources.</p> </li> </ol> <p>The pipeline can be triggered manually or automatically based on events such as code commits or pull requests. This allows for continuous integration and continuous delivery (CI/CD) of our application.</p> <p>For setting up the credentials, you can use the Jenkins UI to create a new credential of type \"Username with password\". The <code>credentialsId</code> used in the pipeline should match the ID of the credential you created.</p> <p></p> <p>Also, Jenkins could deploy the application to a Docker Compose environment. This can be done by adding a new stage to the pipeline that uses the <code>docker compose</code> command to deploy the application.</p> <ol> <li> <p>Jenkins - Jenkins documentation.\u00a0\u21a9</p> </li> </ol>"},{"location":"checkpoints/1/checkpoint/","title":"1. CRUD","text":""},{"location":"checkpoints/1/checkpoint/#account-microservice","title":"Account Microservice","text":"<p>The Account microservice is responsible for managing user accounts, basically, almost every application has a user account system. This microservice provides the necessary endpoints to create, read, update, and delete accounts. The microservice is built using Spring Boot and follows the Domain-Driven Design (DDD) approach.</p> <p>The microservice is divided into two main modules: <code>account</code> and <code>account-service</code>:</p> <ul> <li>the <code>account</code> module contains the API definition and the data transfer objects (DTOs) for the Account microservice;</li> <li>the <code>account-service</code> module contains the service implementation, repository, and entity classes.</li> </ul> <pre><code>classDiagram\n    namespace account {\n        class AccountController {\n            +create(AccountIn accountIn): AccountOut\n            +delete(String id): void\n            +findAll(): List&lt;AccountOut&gt;\n            +findById(String id): AccountOut\n        }\n        class AccountIn {\n            -String name\n            -String email\n            -String password\n        }\n        class AccountOut {\n            -String id\n            -String name\n            -String email\n        }\n    }\n    namespace account-service {\n        class AccountResource {\n            +create(AccountIn accountIn): AccountOut\n            +delete(String id): void\n            +findAll(): List&lt;AccountOut&gt;\n            +findById(String id): AccountOut\n        }\n        class AccountService {\n            +create(AccountIn accountIn): AccountOut\n            +delete(String id): void\n            +findAll(): List&lt;AccountOut&gt;\n            +findById(String id): AccountOut\n        }\n        class AccountRepository {\n            +create(AccountIn accountIn): AccountOut\n            +delete(String id): void\n            +findAll(): List&lt;AccountOut&gt;\n            +findById(String id): AccountOut\n        }\n        class Account {\n            -String id\n            -String name\n            -String email\n            -String password\n            -String sha256\n        }\n        class AccountModel {\n            +create(AccountIn accountIn): AccountOut\n            +delete(String id): void\n            +findAll(): List&lt;AccountOut&gt;\n            +findById(String id): AccountOut\n        }\n    }\n    &lt;&lt;Interface&gt;&gt; AccountController\n    AccountController ..&gt; AccountIn\n    AccountController ..&gt; AccountOut\n\n    &lt;&lt;Interface&gt;&gt; AccountRepository\n    AccountController &lt;|-- AccountResource\n    AccountResource *-- AccountService\n    AccountService *-- AccountRepository\n    AccountService ..&gt; Account\n    AccountService ..&gt; AccountModel\n    AccountRepository ..&gt; AccountModel</code></pre> <p>This approach allows the separation of concerns and the organization of the codebase into different modules, making it easier to maintain and scale the application. Also, it creates a facility to reuse the microservice by other microservices in the future - builts in Java.</p> <p>The construction of the Account microservice follows the Clean Architecture approach, which promotes the total decoupling of business rules from interface layers. The diagram below illustrates the flow of data among the layers of the Account microservice:</p> <pre><code>sequenceDiagram\n    title Clean architecture's approach \n    Actor Request\n    Request -&gt;&gt;+ Controller: \n    Controller -&gt;&gt;+ Service: parser (AccountIn -&gt; Account)\n    Service -&gt;&gt;+ Repository: parser (Account -&gt; AccountModel)\n    Repository -&gt;&gt;+ Database: \n    Database -&gt;&gt;- Repository: \n    Repository -&gt;&gt;- Service: parser (Account &lt;- AccountModel)\n    Service -&gt;&gt;- Controller: parser (AccountOut &lt;- Account)\n    Controller -&gt;&gt;- Request: </code></pre> <p>Previously to build the Account microservice, it is necessary to prepare the environment by installing the database to persist the data. For that, we will use a Docker Compose file to create a PostgreSQL container, as well as, a cluster to isolate the microservices from external access, creating a secure environment - trusted layer. A Docker Compose file is a YAML file that defines how Docker containers should behave in production. The file contains the configuration for the database, the microservices, and the network configuration.</p> <pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        account e3@==&gt; db@{ shape: cyl, label: \"Database\" }\n    end\n    internet e1@==&gt;|request| account:::red\n    e1@{ animate: true }\n    e3@{ animate: true }\n    classDef red fill:#fcc</code></pre>"},{"location":"checkpoints/1/checkpoint/#docker-compose","title":"Docker Compose","text":"<pre><code>\ud83d\udcc1 api/\n\u251c\u2500\u2500 \ud83d\udcc1 account/\n\u251c\u2500\u2500 \ud83d\udcc1 account-service/\n\u251c\u2500\u2500 \ud83d\udcc4 .env\n\u2514\u2500\u2500 \ud83d\udcc4 compose.yaml\n</code></pre> compose.yaml.env <pre><code>name: store\n\nservices:\n\n  db:\n    image: postgres:latest\n    hostname: db\n    environment:\n      POSTGRES_DB: ${POSTGRES_DB:-store}\n      POSTGRES_USER: ${POSTGRES_USER:-store}\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-store}\n    volumes:\n      - $VOLUME/postgres/store:/var/lib/postgresql/data\n    # ports:\n    #   - 5432:5432\n\n  account:\n    hostname: account\n    image: humbertosandmann/account\n    environment:\n      DATABASE_HOST: db\n      DATABASE_USER: ${POSTGRES_USER:-store}\n      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-store}\n\n  # auth:\n  #   hostname: auth\n  #   image: humbertosandmann/auth\n  #   environment:\n  #     JWT_SECRET_KEY: ${JWT_SECRET_KEY:-yrBBgYlvJQeslzFlgX9MFZccToI2fjRFqualquercoisa}\n\n  gateway:\n    hostname: gateway\n    image: humbertosandmann/gateway\n    environment:\n      - LOGGING_LEVEL_STORE=${LOGGING_LEVEL_STORE:-debug}\n    ports:\n      - 8080:8080\n\n  # exchange:\n  #   build:\n  #     context: ./exchange-service\n  #     dockerfile: Dockerfile\n</code></pre> <pre><code>POSTGRES_DB=store\nPOSTGRES_USER=store\nPOSTGRES_PASSWORD=5eCr3t\nVOLUME=./volume\nLOGGING_LEVEL_STORE=debug\nJWT_SECRET_KEY=yrBBgYlvJQeslzFlgX9MFZccToI2fjRFqualquercoisa\n</code></pre> docker compose up -d --build[+] Running 2/2 \u2714 Network store_default  Created            0.1s  \u2714 Container store-db-1   Started            0.2s"},{"location":"checkpoints/1/checkpoint/#account","title":"Account","text":"<pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 account/\n    \u251c\u2500\u2500 \ud83d\udcc1 src/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main/\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc1 java/\n    \u2502           \u2514\u2500\u2500 \ud83d\udcc1 store/\n    \u2502               \u2514\u2500\u2500 \ud83d\udcc1 account/\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 AccountController.java\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 AccountIn.java\n    \u2502                   \u2514\u2500\u2500 \ud83d\udcc4 AccountOut.java\n    \u2514\u2500\u2500 \ud83d\udcc4 pom.xml\n</code></pre> Source pom.xmlAccountControllerAccountInAccountOut <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.4.2&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;account&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;name&gt;account&lt;/name&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2024.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n&lt;/project&gt;\n</code></pre> AccountController.java<pre><code>package store.account;\n\nimport java.util.List;\n\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestHeader;\n\n@FeignClient(name = \"account\", url = \"http://account:8080\")\npublic interface AccountController {\n\n    @PostMapping(\"/account\")\n    public ResponseEntity&lt;AccountOut&gt; create(\n        @RequestBody AccountIn accountIn\n    );\n\n    @GetMapping(\"/account\")\n    public ResponseEntity&lt;List&lt;AccountOut&gt;&gt; findAll();\n\n    @PostMapping(\"/account/login\")\n    public ResponseEntity&lt;AccountOut&gt; findByEmailAndPassword(\n        @RequestBody AccountIn accountIn\n    );\n\n    @GetMapping(\"/account/whoami\")\n    public ResponseEntity&lt;AccountOut&gt; whoami(\n        @RequestHeader(value = \"id-account\", required = true) String idAccount\n    );\n\n}\n</code></pre> AccountIn.java<pre><code>package store.account;\n\nimport lombok.Builder;\nimport lombok.experimental.Accessors;\n\n@Builder @Accessors(fluent = true)\npublic record AccountIn(\n    String name,\n    String email,\n    String password\n) {\n\n}\n</code></pre> AccountOut.java<pre><code>package store.account;\n\nimport lombok.Builder;\nimport lombok.experimental.Accessors;\n\n@Builder @Accessors(fluent = true)\npublic record AccountOut(\n    String id,\n    String name,\n    String email\n) {\n}\n</code></pre> <p>mvn clean install</p>"},{"location":"checkpoints/1/checkpoint/#account-service","title":"Account-Service","text":"<pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 account-service/\n    \u251c\u2500\u2500 \ud83d\udcc1 src/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main/\n    \u2502       \u251c\u2500\u2500 \ud83d\udcc1 java/\n    \u2502       \u2502   \u2514\u2500\u2500 \ud83d\udcc1 store/\n    \u2502       \u2502       \u2514\u2500\u2500 \ud83d\udcc1 account/\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 Account.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 AccountApplication.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 AccountModel.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 AccountParser.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 AccountRepository.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 AccountResource.java\n    \u2502       \u2502           \u2514\u2500\u2500 \ud83d\udcc4 AccountService.java\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc1 resources/\n    \u2502           \u251c\u2500\u2500 \ud83d\udcc4 application.yaml\n    \u2502           \u2514\u2500\u2500 \ud83d\udcc1 db/\n    \u2502               \u2514\u2500\u2500 \ud83d\udcc1 migration/\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 V2025.02.21.001__create_schema_account.sql\n    \u2502                   \u2514\u2500\u2500 \ud83d\udcc4 V2025.02.21.002__create_table_account.sql\n    \u251c\u2500\u2500 \ud83d\udcc4 pom.xml\n    \u2514\u2500\u2500 \ud83d\udcc4 Dockerfile\n</code></pre> Source pom.xmlapplication.yamlAccount.javaAccountApplication.javaAccountModel.javaAccountParser.javaAccountRepository.javaAccountResource.javaAccountService.javaV2025.02.21.001__create_schema_account.sqlV2025.02.21.002__create_table_account.sqlDockerfile <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.4.2&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;account-service&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2024.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;store&lt;/groupId&gt;\n            &lt;artifactId&gt;account&lt;/artifactId&gt;\n            &lt;version&gt;${project.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;\n            &lt;artifactId&gt;flyway-core&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;!-- https://mvnrepository.com/artifact/org.flywaydb/flyway-database-postgresql --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;\n            &lt;artifactId&gt;flyway-database-postgresql&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre> <pre><code>server:\n  port: 8080\n\nspring:\n  application:\n    name: account\n\n  datasource:\n    url: jdbc:postgresql://${DATABASE_HOST}:${DATABASE_PORT:5432}/store\n    username: ${DATABASE_USER:store}\n    password: ${DATABASE_PASSWORD:store}\n    driver-class-name: org.postgresql.Driver\n\n  jpa:\n    properties:\n      hibernate:\n        dialect: org.hibernate.dialect.PostgreSQLDialect\n        default_schema: account\n\n  flyway:\n    schemas: account\n    baseline-on-migrate: true\n</code></pre> <pre><code>package store.account;\n\nimport java.util.Date;\n\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\n@Builder\n@Data @Accessors(fluent = true)\npublic class Account {\n\n    private String id;\n    private String name;\n    private String email;\n    private String password;\n    private String sha256;\n    private Date birthdate;\n    private Date creation;\n\n}\n</code></pre> <pre><code>package store.account;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class AccountApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AccountApplication.class, args);\n    }\n\n}\n</code></pre> <pre><code>package store.account;\n\nimport java.util.Date;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Table;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\nimport lombok.experimental.Accessors;\n\n@Entity\n@Table(name = \"account\")\n@Setter @Accessors(fluent = true)\n@NoArgsConstructor\npublic class AccountModel {\n\n    @Id\n    @Column(name = \"id_account\")\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private String id;\n\n    @Column(name = \"tx_name\")\n    private String name;\n\n    @Column(name = \"tx_email\")\n    private String email;\n\n    @Column(name = \"tx_sha256\")\n    private String sha256;\n\n    @Column(name = \"dt_birthdate\")\n    private Date birthdate;\n\n    @Column(name = \"dt_creation\")\n    private Date creation;\n\n    public AccountModel(Account a) {\n        this.id = a.id();\n        this.name = a.name();\n        this.email = a.email();\n        this.sha256 = a.sha256();\n        this.birthdate = a.birthdate();\n        this.creation = a.creation();\n    }\n\n    public Account to() {\n        return Account.builder()\n            .id(this.id)\n            .name(this.name)\n            .email(this.email)\n            .sha256(this.sha256)\n            .birthdate(this.birthdate)\n            .creation(this.creation)\n            .build();\n        }\n\n}\n</code></pre> <pre><code>package store.account;\n\npublic class AccountParser {\n\n    public static Account to(AccountIn in) {\n        return in == null ? null :\n            Account.builder()\n                .name(in.name())\n                .email(in.email())\n                .password(in.password())\n                .build();\n    }\n\n    public static AccountOut to(Account a) {\n        return a == null ? null :\n            AccountOut.builder()\n                .id(a.id())\n                .name(a.name())\n                .email(a.email())\n                .build();\n    }\n\n}\n</code></pre> <pre><code>package store.account;\n\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\n\n/*\n * https://docs.spring.io/spring-data/jpa/reference/jpa/query-methods.html\n */\n\n@Repository\npublic interface AccountRepository extends CrudRepository&lt;AccountModel, String&gt; {\n\n    public AccountModel findByEmailAndSha256(String email, String sha256);\n\n}\n</code></pre> <pre><code>package store.account;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class AccountResource implements AccountController {\n\n    @Autowired\n    private AccountService accountService;\n\n    @Override\n    public ResponseEntity&lt;AccountOut&gt; create(AccountIn accountIn) {\n        Account created = accountService.create(AccountParser.to(accountIn));\n        return ResponseEntity.ok().body(AccountParser.to(created));\n    }\n\n    @Override\n    public ResponseEntity&lt;List&lt;AccountOut&gt;&gt; findAll() {\n        return ResponseEntity\n            .ok()\n            .body(accountService.findAll().stream().map(AccountParser::to).toList());\n    }\n\n    @Override\n    public ResponseEntity&lt;AccountOut&gt; findByEmailAndPassword(AccountIn accountIn) {\n        Account account = accountService.findByEmailAndPassword(\n            accountIn.email(),\n            accountIn.password()\n        );\n        return ResponseEntity\n            .ok()\n            .body(AccountParser.to(account));\n    }\n\n    @Override\n    public ResponseEntity&lt;AccountOut&gt; whoami(String idAccount) {\n        return ResponseEntity\n            .ok()\n            .body(AccountParser.to(accountService.findById(idAccount)));\n    }\n\n}\n</code></pre> <pre><code>package store.account;\n\nimport java.nio.charset.StandardCharsets;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Base64;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.stream.StreamSupport;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.server.ResponseStatusException;\n\n@Service\npublic class AccountService {\n\n    @Autowired\n    private AccountRepository accountRepository;\n\n    public Account findById(String id) {\n        return accountRepository.findById(id).get().to();\n    }\n\n    public Account create(Account account) {\n        final String pass = account.password().trim();\n        if (pass.length() &lt; 8) {\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"Password too short!\");\n        }\n        account.sha256(calcHash(pass));\n        account.creation(new Date());\n        return accountRepository.save(new AccountModel(account)).to();\n    }\n\n    public Account findByEmailAndPassword(String email, String password) {\n        final String sha256 = calcHash(password);\n        AccountModel m  = accountRepository.findByEmailAndSha256(email, sha256);\n        return m == null ? null : m.to();\n    }\n\n    public List&lt;Account&gt; findAll() {\n        return StreamSupport\n            .stream(accountRepository.findAll().spliterator(), false)\n            .map(AccountModel::to)\n            .toList();\n    }\n\n    /*\n     * A reference to implement a nice password's hash\n     * https://github.com/ByteByteGoHq/system-design-101/tree/main?tab=readme-ov-file#how-to-store-passwords-safely-in-the-database-and-how-to-validate-a-password\n     */\n    private String calcHash(String value) {\n        try {\n            MessageDigest digester = MessageDigest.getInstance(\"SHA-256\");\n            byte[] hash = digester.digest(value.getBytes(StandardCharsets.UTF_8));\n            String encoded = Base64.getEncoder().encodeToString(hash);\n            return encoded;\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n</code></pre> <pre><code>CREATE SCHEMA IF NOT EXISTS account;\n</code></pre> <pre><code>CREATE TABLE account (\n    id_account VARCHAR(36) NOT NULL,\n    tx_name VARCHAR(256) NOT NULL,\n    tx_email VARCHAR(256) NOT NULL,\n    tx_sha256 VARCHAR(64) NOT NULL,\n    dt_birthdate DATE NULL,\n    dt_creation TIMESTAMP NOT NULL,\n    CONSTRAINT pk_account PRIMARY KEY (id_account)\n);\n</code></pre> <pre><code>FROM openjdk:21-slim\nVOLUME /tmp\nCOPY target/*.jar app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n</code></pre> mvn clean package spring-boot:run"},{"location":"checkpoints/2/checkpoint/","title":"2. Gateway","text":"<p>The main functionality of Gateway Microservice is to route the incoming requests to the appropriate microservice, therefore, it is the entry point for all the incoming requests. In counterpart, each microservice have to expose their own port and endpoints to the internet, which is not a good practice. The Gateway Microservice will act as a reverse proxy and route the incoming requests to the appropriate microservice. Also, it will also handle the authentication and authorization of the incoming requests.</p> <pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        gateway e2@==&gt; account\n        gateway e4@==&gt; others\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        others --&gt; db\n    end\n    internet e1@==&gt;|request| gateway:::red\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e4@{ animate: true }\n    classDef red fill:#fcc</code></pre> <p>The key functionalities of Gateway Microservice are:</p> <ul> <li>Routing: it will route the incoming requests to the appropriate microservice.</li> <li>Authentication/Authorization: it will handle the authentication and the authorization of the incoming requests.</li> </ul>"},{"location":"checkpoints/2/checkpoint/#gateway-service","title":"Gateway-Service","text":"<pre><code>\ud83d\udcc1 api\n\u2514\u2500\u2500 \ud83d\udcc1 gateway-service/\n    \u251c\u2500\u2500 \ud83d\udcc1 src/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main/\n    \u2502       \u251c\u2500\u2500 \ud83d\udcc1 java/\n    \u2502       \u2502   \u2514\u2500\u2500 \ud83d\udcc1 store/\n    \u2502       \u2502       \u2514\u2500\u2500 \ud83d\udcc1 gateway/\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 GatewayApplication.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 GatewayResource.java\n    \u2502       \u2502           \u2514\u2500\u2500 \ud83d\udcc1 security\n    \u2502       \u2502               \u2514\u2500\u2500 \ud83d\udcc4 CorsFilter.java\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc1 resources/\n    \u2502           \u2514\u2500\u2500 \ud83d\udcc4 application.yaml\n    \u251c\u2500\u2500 \ud83d\udcc4 pom.xml\n    \u2514\u2500\u2500 \ud83d\udcc4 Dockerfile\n</code></pre> Source pom.xmlapplication.yamlGatewayApplication.javaGatewayResource.javaCorsFilter.javaDockerfile <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.4.2&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;gateway-service&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2024.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.micrometer&lt;/groupId&gt;\n            &lt;artifactId&gt;micrometer-registry-prometheus&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre> <pre><code>server:\n  port: 8080\n\nspring:\n  application:\n    name: gateway\n\n  cloud:\n    gateway:\n      routes:\n\n        # - id: google\n        #   uri: https://www.google.com\n        #   predicates:\n        #     - Path=/google/**\n\n        - id: account\n          uri: http://account:8080\n          predicates:\n            - Path=/account/**\n\n        - id: auth\n          uri: http://auth:8080\n          predicates:\n            - Path=/auth/**\n\n        - id: order\n          uri: http://order:8080\n          predicates:\n            - Path=/order/**\n\n        - id: product\n          uri: http://product:8080\n          predicates:\n            - Path=/product/**\n\n        # - id: exchange\n        #   uri: http://exchange:80\n        #   predicates:\n        #     - Path=/exchange/**\n\nlogging:\n  level:\n    store: ${LOGGING_LEVEL_STORE:debug}\n\nmanagement:\n  endpoint:\n    gateway:\n      enabled: true\n  endpoints:\n    web:\n      base-path: /gateway/actuator\n      exposure:\n        include: [ 'prometheus', 'gateway' ]\n</code></pre> <pre><code>package store.gateway;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class GatewayApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(GatewayApplication.class, args);\n    }\n\n}\n</code></pre> <pre><code>package store.gateway;\n\nimport java.net.InetAddress;\nimport java.net.NetworkInterface;\nimport java.net.SocketException;\nimport java.net.UnknownHostException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Enumeration;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class GatewayResource {\n\n    @GetMapping(\"/\")\n    public ResponseEntity&lt;String&gt; hallo() {\n        return new ResponseEntity&lt;String&gt;(\"api\", HttpStatus.OK);\n    }\n\n\n    @GetMapping({\"/info\", \"/health-check\"})\n    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; version() {\n\n        String hostname = \"hostname can not be resolved\";\n        try {\n            InetAddress addr;\n            addr = InetAddress.getLocalHost();\n            hostname = addr.getHostName();\n        } catch (UnknownHostException ex) { }\n\n        List&lt;String&gt; ips = new ArrayList&lt;String&gt;();\n        try {\n            Enumeration&lt;NetworkInterface&gt; e = NetworkInterface.getNetworkInterfaces();\n            while(e.hasMoreElements()) {\n                NetworkInterface n = (NetworkInterface) e.nextElement();\n                Enumeration&lt;InetAddress&gt; ee = n.getInetAddresses();\n                while (ee.hasMoreElements()) {\n                    InetAddress i = (InetAddress) ee.nextElement();\n                    ips.add(i.getCanonicalHostName() + \": \" + i.getHostAddress());\n                }\n            }\n        } catch (SocketException e) { }\n\n        return new ResponseEntity&lt;Map&lt;String, String&gt;&gt;(\n            Map.ofEntries(\n                Map.entry(\"hostname\", hostname),\n                Map.entry(\"ip\", Arrays.toString(ips.toArray())),\n                Map.entry(\"os.arch\", System.getProperty(\"os.arch\")),\n                Map.entry(\"os.name\", System.getProperty(\"os.name\")),\n                Map.entry(\"os.version\", System.getProperty(\"os.version\")),\n                Map.entry(\"file.separator\", System.getProperty(\"file.separator\")),\n                Map.entry(\"java.class.path\", System.getProperty(\"java.class.path\")),\n                Map.entry(\"java.home\", System.getProperty(\"java.home\")),\n                Map.entry(\"java.vendor\", System.getProperty(\"java.vendor\")),\n                Map.entry(\"java.vendor.url\", System.getProperty(\"java.vendor.url\")),\n                Map.entry(\"java.version\", System.getProperty(\"java.version\")),\n                Map.entry(\"line.separator\", System.getProperty(\"line.separator\")),\n                Map.entry(\"path.separator\", System.getProperty(\"path.separator\")),\n                Map.entry(\"user.dir\", System.getProperty(\"user.dir\")),\n                Map.entry(\"user.home\", System.getProperty(\"user.home\")),\n                Map.entry(\"user.name\", System.getProperty(\"user.name\")),\n                Map.entry(\"jar\", new java.io.File(\n                    GatewayApplication.class.getProtectionDomain()\n                        .getCodeSource()\n                        .getLocation()\n                        .getPath()\n                    ).toString())\n            ), HttpStatus.OK\n        );\n    }\n\n}\n</code></pre> <pre><code>package store.gateway.security;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.reactive.CorsWebFilter;\nimport org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;\n\n@Configuration\npublic class CorsFilter {\n\n    @Bean\n    public CorsWebFilter corsWebFilter() {\n\n        CorsConfiguration corsConfig = new CorsConfiguration();\n        corsConfig.setAllowCredentials(false);\n        corsConfig.addAllowedHeader(\"*\");\n        corsConfig.addAllowedMethod(\"*\");\n        corsConfig.addAllowedOrigin(\"*\");\n\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        source.registerCorsConfiguration(\"/**\", corsConfig);\n\n        return new CorsWebFilter(source);\n    }\n\n}\n</code></pre> <pre><code>FROM openjdk:21-slim\nVOLUME /tmp\nCOPY target/*.jar app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n</code></pre>"},{"location":"checkpoints/3/checkpoint/","title":"3. Security","text":"<p>A secutiry of the system is a very important aspect of the system. All security systems are based on authentication and authorization.</p> <ul> <li> <p>Authentication is the process of verifying the identity of a user.</p> </li> <li> <p>Authorization is the process of verifying what the user has access to.</p> </li> </ul> <pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        gateway --&gt; account\n        gateway --&gt; others\n        gateway e4@==&gt; auth:::red\n        auth e2@==&gt; account\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        others --&gt; db\n    end\n    internet e1@==&gt;|request| gateway:::orange\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e4@{ animate: true }\n    classDef red fill:#fcc\n    classDef orange fill:#FCBE3E</code></pre> <pre><code>classDiagram\n    namespace auth {\n        class AuthController {\n            +register(RegisterIn RegisterIn): TokenOut\n            +login(LoginIn loginIn): TokenOut\n        }\n        class RegisterIn {\n            -String name\n            -String email\n            -String password\n        }\n        class LoginIn {\n            -String name\n            -String email\n        }\n        class TokenOut {\n            -String token\n        }\n        class SolveOut {\n            -String idAccount\n        }\n    }\n    namespace auth-service {\n        class AuthResource {\n            +register(RegisterIn RegisterIn) TokenOut\n            +login(LoginIn loginIn) TokenOut\n        }\n        class AuthService {\n            +register(Register) Regiter\n            +login(LoginIn loginIn) String\n        }\n        class Register {\n            -String id\n            -String name\n            -String email\n            -String password\n        }\n    }\n    &lt;&lt;Interface&gt;&gt; AuthController\n    AuthController ..&gt; RegisterIn\n    AuthController ..&gt; LoginIn\n    AuthController ..&gt; TokenOut\n\n    AuthController &lt;|-- AuthResource\n    AuthResource *-- AuthService\n    AuthService ..&gt; Register</code></pre>"},{"location":"checkpoints/3/checkpoint/#auth","title":"Auth","text":"<pre><code>\ud83d\udcc1 api\n\u2514\u2500\u2500 \ud83d\udcc1 auth\n    \u251c\u2500\u2500 \ud83d\udcc1 src\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc1 java\n    \u2502           \u2514\u2500\u2500 \ud83d\udcc1 store\n    \u2502               \u2514\u2500\u2500 \ud83d\udcc1 auth\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 AuthController.java\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 LoginIn.java\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 RegisterIn.java\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 SolveOut.java\n    \u2502                   \u2514\u2500\u2500 \ud83d\udcc4 TokenOut.java\n    \u2514\u2500\u2500 \ud83d\udcc4 pom.xml\n</code></pre> Source pom.xmlAuthController.javaLoginIn.javaRegisterIn.javaSolveOut.javaTokenOut.java <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.4.2&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;auth&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;name&gt;auth&lt;/name&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2024.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n&lt;/project&gt;\n</code></pre> <pre><code>package store.auth;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\n\npublic interface AuthController {\n\n    @PostMapping(\"/auth/register\")\n    public ResponseEntity&lt;TokenOut&gt; register(\n        @RequestBody RegisterIn registerIn\n    );\n\n    @PostMapping(\"/auth/login\")\n    public ResponseEntity&lt;TokenOut&gt; login(\n        @RequestBody LoginIn loginIn\n    );\n\n    @PostMapping(\"auth/solve\")\n    public ResponseEntity&lt;SolveOut&gt; solve(\n        @RequestBody TokenOut token\n    );\n\n}\n</code></pre> <pre><code>package store.auth;\n\nimport lombok.Builder;\nimport lombok.experimental.Accessors;\n\n@Builder @Accessors(fluent = true)\npublic record LoginIn(\n    String email,\n    String password\n) {\n}\n</code></pre> <pre><code>package store.auth;\n\nimport lombok.Builder;\nimport lombok.experimental.Accessors;\n\n@Builder @Accessors(fluent = true)\npublic record RegisterIn(\n    String name,\n    String email,\n    String password\n) {\n\n}\n</code></pre> <pre><code>package store.auth;\n\nimport lombok.Builder;\nimport lombok.experimental.Accessors;\n\n@Builder @Accessors(fluent = true)\npublic record SolveOut(\n    String idAccount\n) {\n\n}\n</code></pre> <pre><code>package store.auth;\n\nimport lombok.Builder;\nimport lombok.experimental.Accessors;\n\n@Builder @Accessors(fluent = true)\npublic record TokenOut(\n    String token\n) {\n\n}\n</code></pre>"},{"location":"checkpoints/3/checkpoint/#auth-service","title":"Auth-Service","text":"<pre><code>\ud83d\udcc1 api\n\u2514\u2500\u2500 \ud83d\udcc1 auth-service\n    \u251c\u2500\u2500 \ud83d\udcc1 src\n    \u2502   \u251c\u2500\u2500 \ud83d\udcc1 main\n    \u2502   \u2502   \u2514\u2500\u2500 \ud83d\udcc1 java\n    \u2502   \u2502       \u2514\u2500\u2500 \ud83d\udcc1 store\n    \u2502   \u2502           \u2514\u2500\u2500 \ud83d\udcc1 auth\n    \u2502   \u2502               \u251c\u2500\u2500 \ud83d\udcc4 AuthApplication.java\n    \u2502   \u2502               \u251c\u2500\u2500 \ud83d\udcc4 AuthParser.java\n    \u2502   \u2502               \u251c\u2500\u2500 \ud83d\udcc4 AuthResource.java\n    \u2502   \u2502               \u251c\u2500\u2500 \ud83d\udcc4 AuthService.java\n    \u2502   \u2502               \u251c\u2500\u2500 \ud83d\udcc4 JwtService.java\n    \u2502   \u2502               \u2514\u2500\u2500 \ud83d\udcc4 Register.java\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 resources\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc4 application.yaml\n    \u251c\u2500\u2500 \ud83d\udcc4 pom.xml\n    \u2514\u2500\u2500 \ud83d\udcc4 Dockerfile\n</code></pre> Source pom.xmlapplication.yamlAuthApplication.javaAuthParser.javaAuthResource.javaAuthService.javaJwtService.javaRegister.javaDockerfile <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.4.2&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;auth-service&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;store&lt;/groupId&gt;\n            &lt;artifactId&gt;auth&lt;/artifactId&gt;\n            &lt;version&gt;${project.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;store&lt;/groupId&gt;\n            &lt;artifactId&gt;account&lt;/artifactId&gt;\n            &lt;version&gt;${project.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-api --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n            &lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;\n            &lt;version&gt;0.12.6&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n            &lt;artifactId&gt;jjwt-impl&lt;/artifactId&gt;\n            &lt;version&gt;0.12.6&lt;/version&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n            &lt;artifactId&gt;jjwt-jackson&lt;/artifactId&gt; &lt;!-- or jjwt-gson if Gson is preferred --&gt;\n            &lt;version&gt;0.12.6&lt;/version&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- Observability --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.micrometer&lt;/groupId&gt;\n            &lt;artifactId&gt;micrometer-registry-prometheus&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre> <pre><code>server:\n  port: 8080\n\nspring:\n  application:\n    name: auth\n\n\nstore:\n  jwt:\n    issuer: Insper\n    secretKey: ${JWT_SECRET_KEY:yrBBgYlvJQeslzFlgX9MFZccToI2fjRFqualquercoisa}\n\nmanagement:\n  endpoints:\n    web:\n      base-path: /auth/actuator\n      exposure:\n        include: [ 'prometheus' ]    \n</code></pre> <pre><code>package store.auth;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\n\n@EnableFeignClients(basePackages = {\n    \"store.account\"\n})\n@SpringBootApplication\npublic class AuthApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AuthApplication.class, args);\n    }\n\n}\n</code></pre> <pre><code>package store.auth;\n\npublic class AuthParser {\n\n    public static Register to(RegisterIn in) {\n        return in == null ? null :\n            Register.builder()\n                .name(in.name())\n                .email(in.email())\n                .password(in.password())\n                .build();\n    }\n\n    public static TokenOut to(String token) {\n        return token == null ? null :\n            TokenOut.builder()\n                .token(token)\n                .build();\n    }\n\n}\n</code></pre> <pre><code>package store.auth;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class AuthResource implements AuthController {\n\n    @Autowired\n    private AuthService authService;\n\n    @Override\n    public ResponseEntity&lt;TokenOut&gt; register(RegisterIn registerIn) {\n        String token = authService.register(AuthParser.to(registerIn));\n        return ResponseEntity.ok().body(AuthParser.to(token));\n    }\n\n    @Override\n    public ResponseEntity&lt;TokenOut&gt; login(LoginIn loginIn) {\n        String token = authService.login(loginIn.email(), loginIn.password());\n        return ResponseEntity.ok().body(AuthParser.to(token));\n    }\n\n    @Override\n    public ResponseEntity&lt;SolveOut&gt; solve(TokenOut token) {\n        return ResponseEntity.ok().body(\n            authService.solve(token.token())\n        );\n    }\n\n}\n</code></pre> <pre><code>package store.auth;\n\nimport java.util.Date;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Service;\n\nimport store.account.AccountController;\nimport store.account.AccountIn;\nimport store.account.AccountOut;\n\n@Service\npublic class AuthService {\n\n    @Autowired\n    private AccountController accountController;\n\n    @Autowired\n    private JwtService jwtService;\n\n    public String register(Register register) {\n        AccountIn accountIn = AccountIn.builder()\n            .email(register.email())\n            .name(register.name())\n            .password(register.password())\n            .build();\n\n        // registrar no account\n        // aqui estou substituindo o RestTemplate\n        ResponseEntity&lt;AccountOut&gt; response = accountController.create(accountIn);\n        AccountOut accountOut = response.getBody();\n\n        // gerar o token\n        // regra de geracao de token\n        return generateToken(accountOut.id());\n    }\n\n    public String login(String email, String password) {\n\n        ResponseEntity&lt;AccountOut&gt; response = accountController.findByEmailAndPassword(\n            AccountIn.builder()\n                .email(email)\n                .password(password)\n                .build()\n        );\n        AccountOut accountOut = response.getBody();\n\n        return generateToken(accountOut.id());\n    }\n\n    private String generateToken(String id) {\n        Date notBefore = new Date();\n        Date expiration = new Date(notBefore.getTime() + 1000l * 60 * 60 * 24);\n        String token = jwtService.create(id, notBefore, expiration);\n        return token;\n    }\n\n    public SolveOut solve(String token) {\n        return SolveOut.builder()\n            .idAccount(jwtService.getId(token))\n            .build();\n    }\n\n}\n</code></pre> <pre><code>package store.auth;\n\nimport java.util.Date;\n\nimport javax.crypto.SecretKey;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\n\nimport io.jsonwebtoken.Claims;\nimport io.jsonwebtoken.JwtParser;\nimport io.jsonwebtoken.Jwts;\nimport io.jsonwebtoken.io.Decoders;\nimport io.jsonwebtoken.security.Keys;\n\n@Service\npublic class JwtService {\n\n    @Value(\"${store.jwt.issuer}\")\n    private String issuer;\n\n    @Value(\"${store.jwt.secret-key}\")\n    private String secretKey;\n\n    public String create(String id, Date notBefore, Date expiration) {\n        SecretKey key = Keys.hmacShaKeyFor(Decoders.BASE64.decode(secretKey));\n        String jwt = Jwts.builder()\n            .header()\n            .and()\n            .id(id)\n            .issuer(issuer)\n            .signWith(key)\n            .notBefore(notBefore)\n            .expiration(expiration)\n            .compact();\n        return jwt;\n    }\n\n    public String getId(String token) {\n        Claims claims = resolveClaims(token);\n\n        Date now = new Date();\n        if (claims.getExpiration().before(now)) {\n            throw new RuntimeException(\"Expired token\");\n        }\n        if (claims.getNotBefore().after(now)) {\n            throw new RuntimeException(\"Token is actived yet\");\n        }\n        // check if token is revoked by a CRL\n        return claims.getId();\n    }\n\n    private Claims resolveClaims(String token) {\n        SecretKey key = Keys.hmacShaKeyFor(Decoders.BASE64.decode(secretKey));\n        JwtParser parser = Jwts.parser().verifyWith(key).build();\n        return parser.parseSignedClaims(token).getPayload();\n    }\n\n}\n</code></pre> <pre><code>package store.auth;\n\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\n@Builder\n@Data @Accessors(fluent = true)\npublic class Register {\n\n    private String id;\n    private String name;\n    private String email;\n    private String password;\n\n}\n</code></pre> <pre><code>FROM openjdk:21-slim\nVOLUME /tmp\nCOPY target/*.jar app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n</code></pre> RegisterLogin <pre><code>POST /auth/register\n</code></pre> <p>Body <pre><code>{\n    \"name\": \"Antonio do Estudo\",\n    \"email\": \"acme@insper.edu.br\",\n    \"password\": \"123@321\"\n}\n</code></pre></p> <p>Sequence Diagram</p> <pre><code>sequenceDiagram\nautonumber\nactor User\nUser-&gt;&gt;+Auth: register (RegisterIn)\nAuth-&gt;&gt;+Account: create (AccountIn)\nAccount-&gt;&gt;-Auth: returns the new account (AccountOut)\nAuth-&gt;&gt;-User: returns 201 (TokenOut)</code></pre> <pre><code>POST /auth/login\n</code></pre> <p>Body <pre><code>{\n    \"email\": \"acme@insper.edu.br\",\n    \"password\": \"123@321\"\n}\n</code></pre></p> <p>Sequence Diagram</p> <pre><code>sequenceDiagram\nautonumber\nactor User\nUser-&gt;&gt;+Auth: authenticate (LoginIn)\nAuth-&gt;&gt;+Account: findByEmailAndPassword\ncritical validated\n    Account-&gt;&gt;-Auth: returns the account\noption denied\n    Auth--&gt;&gt;User: unauthorized message\nend  \nAuth-&gt;&gt;Auth: generates a token\nAuth-&gt;&gt;-User: returns TokenOut\nUser-&gt;&gt;User: stores the token to use for the next requests</code></pre>"},{"location":"checkpoints/3/checkpoint/#security","title":"Security","text":"<p>Security is an important aspect of software development. It involves protecting the confidentiality, integrity, and availability of data and resources. Two key concepts in security are authentication and authorization.</p>"},{"location":"checkpoints/3/checkpoint/#authentication","title":"Authentication","text":"<p>Authentication is the process of verifying the identity of a user or system. It ensures that the user or system is who they claim to be. Common authentication methods include passwords, biometrics, and two-factor authentication. The system checks these credentials against the stored data. If the credentials are valid, the system confirms the user's identity.</p> <p>In many systems, after successful authentication, the system generates a token. This token is a piece of data that represents the user's authentication session. It's like a digital ticket that proves the user's identity for a certain period of time.</p> <p>This token is then sent back to the user. The user's client software (like a web browser) stores this token and sends it along with every subsequent request to the server (in case of stateless server). This way, the server knows that the request comes from an authenticated user without needing to ask for the credentials again.</p> <p>Here's a simplified step-by-step process:</p> <pre><code>sequenceDiagram\n  autonumber\n  actor User\n  User-&gt;&gt;+Auth Service: authentication(credentials)\n  Auth Service-&gt;&gt;Auth Service: verifies credenditals and generates a token\n  Auth Service-&gt;&gt;-User: returns the token\n  User-&gt;&gt;User: stores the token to use for the next requests</code></pre> <ol> <li>The user sends their username and password (or other credentials) to the server;</li> <li>The server verifies the credentials. If they're valid, the server generates a token.</li> <li>The server sends this token back to the user.</li> <li>The user's client software stores this token.</li> <li>For every subsequent request, the client sends this token along with the request.</li> <li>The server checks the token to ensure it's valid and hasn't expired.</li> <li>This token-based authentication process is commonly used in many modern web applications and APIs. It helps maintain the user's session and allows the server to authenticate requests without storing the user's state.</li> </ol>"},{"location":"checkpoints/3/checkpoint/#authorization","title":"Authorization","text":"<p>Authorization is the process of granting or denying access to specific resources or actions based on the authenticated user's privileges. It determines what a user is allowed to do within a system. Authorization can be role-based, where permissions are assigned based on predefined roles, or attribute-based, where permissions are based on specific attributes of the user.</p> <p>In many systems, the token not only represents the user's identity, but also includes information about their permissions or roles. This is often done using a type of token called a JSON Web Token (JWT), which can include a payload of data.</p> <p>Here's a simplified step-by-step process:</p> <pre><code>sequenceDiagram\n  autonumber\n  actor User\n  User-&gt;&gt;Auth Service: request with token\n  Auth Service-&gt;&gt;Auth Service: decodes the token and extracts claims\n  Auth Service-&gt;&gt;Auth Service: verifies permissions\n  critical allowed\n    Auth Service-&gt;&gt;Secured Resource: authorizes the request\n    Secured Resource-&gt;&gt;User: returns the response\n  option denied\n    Auth Service--&gt;&gt;User: unauthorized message\n  end  </code></pre> <ol> <li>After authentication, the user's client software sends a request to a server. This request includes the token.</li> <li>The server decodes the token and extracts the user's identity and permissions.</li> <li>The server checks whether the user has the necessary permissions for the requested action. This could involve checking the user's roles or other attributes against the requirements for the action.</li> <li>If the user has the necessary permissions, the server allows the action. If not, the server denies the action.</li> </ol> <p>This process allows the server to authorize actions without needing to repeatedly look up the user's permissions. It also allows for stateless servers, as the necessary information is included in every request.</p> <p>By implementing strong authentication and authorization mechanisms, software systems can ensure that only authorized users have access to sensitive data and functionalities, reducing the risk of unauthorized access and potential security breaches.</p> <p>As the platform has only one entrace point, it is</p> <p>JWT is a decentralized </p> <p>The point of entrance of API is the gateway, then as suggested by <sup>8</sup>.</p> <p>The gateway is responsible for the security of the system. It is the first point of contact for all incoming requests. The gateway is responsible for routing requests to the appropriate services and ensuring that only authorized users can access the system.</p> <pre><code>sequenceDiagram\n  autonumber\n  actor User\n  User-&gt;&gt;Gateway: route(ServerHttpRequest)\n  Gateway-&gt;&gt;+AuthorizationFilter: filter(ServerWebExchange, GatewayFilterChain)\n  AuthorizationFilter-&gt;&gt;RouteValidator: isSecured.test(ServerHttpRequest)\n  RouteValidator--&gt;&gt;AuthorizationFilter: True | False\n  critical notSecured\n    AuthorizationFilter-&gt;&gt;Gateway: follow the flux\n  end\n  AuthorizationFilter-&gt;&gt;AuthorizationFilter: isAuthMissing(ServerHttpRequest)\n  critical isAuthMissing\n    AuthorizationFilter-&gt;&gt;User: unauthorized message\n  end\n  AuthorizationFilter-&gt;&gt;AuthorizationFilter: validateAuthorizationHeader()\n  critical isInvalidAuthorizationHeader\n    AuthorizationFilter-&gt;&gt;User: unauthorized message\n  end\n  AuthorizationFilter-&gt;&gt;Auth: solve(Token)\n  critical isInvalidToken\n    Auth-&gt;&gt;User: unauthorized message\n  end\n  Auth-&gt;&gt;AuthorizationFilter: returns SolveOut\n  AuthorizationFilter-&gt;&gt;AuthorizationFilter: updateRequestHeader(ServerHttpRequest)\n  AuthorizationFilter-&gt;&gt;Gateway: follow the flux</code></pre>"},{"location":"checkpoints/3/checkpoint/#gateway-service","title":"Gateway-Service","text":"<pre><code>\ud83d\udcc1 api\n\u2514\u2500\u2500 \ud83d\udcc1 gateway-service\n    \u251c\u2500\u2500 \ud83d\udcc1 src\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main\n    \u2502       \u251c\u2500\u2500 \ud83d\udcc1 java\n    \u2502       \u2502   \u2514\u2500\u2500 \ud83d\udcc1 store\n    \u2502       \u2502       \u2514\u2500\u2500 \ud83d\udcc1 gateway\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 GatewayApplication.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 GatewayResource.java\n    \u2502       \u2502           \u2514\u2500\u2500 \ud83d\udcc1 security\n    \u2502       \u2502               \u251c\u2500\u2500 \ud83d\udcc4 AuthorizationFilter.java\n    \u2502       \u2502               \u251c\u2500\u2500 \ud83d\udcc4 CorsFilter.java\n    \u2502       \u2502               \u251c\u2500\u2500 \ud83d\udcc4 RouterValidator.java\n    \u2502       \u2502               \u251c\u2500\u2500 \ud83d\udcc4 SolveOut.java\n    \u2502       \u2502               \u2514\u2500\u2500 \ud83d\udcc4 TokenOut.java\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc1 resources\n    \u2502           \u2514\u2500\u2500 \ud83d\udcc4 application.yaml\n    \u251c\u2500\u2500 \ud83d\udcc4 pom.xml\n    \u2514\u2500\u2500 \ud83d\udcc4 Dockerfile\n</code></pre> Source pom.xmlapplication.yamlGatewayApplication.javaGatewayResource.javaAuthorizationFilter.javaCorsFilter.javaRouterValidator.javaSolveOut.javaTokenOut.javaDockerfile <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.4.2&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;gateway-service&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2024.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.micrometer&lt;/groupId&gt;\n            &lt;artifactId&gt;micrometer-registry-prometheus&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre> <pre><code>server:\n  port: 8080\n\nspring:\n  application:\n    name: gateway\n\n  cloud:\n    gateway:\n      routes:\n\n        # - id: google\n        #   uri: https://www.google.com\n        #   predicates:\n        #     - Path=/google/**\n\n        - id: account\n          uri: http://account:8080\n          predicates:\n            - Path=/account/**\n\n        - id: auth\n          uri: http://auth:8080\n          predicates:\n            - Path=/auth/**\n\n        - id: order\n          uri: http://order:8080\n          predicates:\n            - Path=/order/**\n\n        - id: product\n          uri: http://product:8080\n          predicates:\n            - Path=/product/**\n\n        # - id: exchange\n        #   uri: http://exchange:80\n        #   predicates:\n        #     - Path=/exchange/**\n\nlogging:\n  level:\n    store: ${LOGGING_LEVEL_STORE:debug}\n\nmanagement:\n  endpoint:\n    gateway:\n      enabled: true\n  endpoints:\n    web:\n      base-path: /gateway/actuator\n      exposure:\n        include: [ 'prometheus', 'gateway' ]\n</code></pre> <pre><code>package store.gateway;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class GatewayApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(GatewayApplication.class, args);\n    }\n\n}\n</code></pre> <pre><code>package store.gateway;\n\nimport java.net.InetAddress;\nimport java.net.NetworkInterface;\nimport java.net.SocketException;\nimport java.net.UnknownHostException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Enumeration;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class GatewayResource {\n\n    @GetMapping(\"/\")\n    public ResponseEntity&lt;String&gt; hallo() {\n        return new ResponseEntity&lt;String&gt;(\"api\", HttpStatus.OK);\n    }\n\n\n    @GetMapping({\"/info\", \"/health-check\"})\n    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; version() {\n\n        String hostname = \"hostname can not be resolved\";\n        try {\n            InetAddress addr;\n            addr = InetAddress.getLocalHost();\n            hostname = addr.getHostName();\n        } catch (UnknownHostException ex) { }\n\n        List&lt;String&gt; ips = new ArrayList&lt;String&gt;();\n        try {\n            Enumeration&lt;NetworkInterface&gt; e = NetworkInterface.getNetworkInterfaces();\n            while(e.hasMoreElements()) {\n                NetworkInterface n = (NetworkInterface) e.nextElement();\n                Enumeration&lt;InetAddress&gt; ee = n.getInetAddresses();\n                while (ee.hasMoreElements()) {\n                    InetAddress i = (InetAddress) ee.nextElement();\n                    ips.add(i.getCanonicalHostName() + \": \" + i.getHostAddress());\n                }\n            }\n        } catch (SocketException e) { }\n\n        return new ResponseEntity&lt;Map&lt;String, String&gt;&gt;(\n            Map.ofEntries(\n                Map.entry(\"hostname\", hostname),\n                Map.entry(\"ip\", Arrays.toString(ips.toArray())),\n                Map.entry(\"os.arch\", System.getProperty(\"os.arch\")),\n                Map.entry(\"os.name\", System.getProperty(\"os.name\")),\n                Map.entry(\"os.version\", System.getProperty(\"os.version\")),\n                Map.entry(\"file.separator\", System.getProperty(\"file.separator\")),\n                Map.entry(\"java.class.path\", System.getProperty(\"java.class.path\")),\n                Map.entry(\"java.home\", System.getProperty(\"java.home\")),\n                Map.entry(\"java.vendor\", System.getProperty(\"java.vendor\")),\n                Map.entry(\"java.vendor.url\", System.getProperty(\"java.vendor.url\")),\n                Map.entry(\"java.version\", System.getProperty(\"java.version\")),\n                Map.entry(\"line.separator\", System.getProperty(\"line.separator\")),\n                Map.entry(\"path.separator\", System.getProperty(\"path.separator\")),\n                Map.entry(\"user.dir\", System.getProperty(\"user.dir\")),\n                Map.entry(\"user.home\", System.getProperty(\"user.home\")),\n                Map.entry(\"user.name\", System.getProperty(\"user.name\")),\n                Map.entry(\"jar\", new java.io.File(\n                    GatewayApplication.class.getProtectionDomain()\n                        .getCodeSource()\n                        .getLocation()\n                        .getPath()\n                    ).toString())\n            ), HttpStatus.OK\n        );\n    }\n\n}\n</code></pre> <pre><code>package store.gateway.security;\n\nimport java.util.Arrays;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.cloud.gateway.filter.GatewayFilterChain;\nimport org.springframework.cloud.gateway.filter.GlobalFilter;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.server.reactive.ServerHttpRequest;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.reactive.function.client.WebClient;\nimport org.springframework.web.server.ResponseStatusException;\nimport org.springframework.web.server.ServerWebExchange;\n\nimport reactor.core.publisher.Mono;\n\n@Component\npublic class AuthorizationFilter implements GlobalFilter  {\n\n    private static Logger logger = LoggerFactory.getLogger(AuthorizationFilter.class);\n\n    private static final String AUTHORIZATION_HEADER = \"Authorization\";\n    private static final String AUTHORIZATION_BEARER_TOKEN_HEADER = \"Bearer\";\n    private static final String AUTH_SERVICE_TOKEN_SOLVE = \"http://auth:8080/auth/solve\";\n\n    @Autowired\n    private RouterValidator routerValidator;\n\n    @Autowired\n    private WebClient.Builder webClient;\n\n    @Override\n    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n        logger.debug(\"Entrou no filtro de authorization\");\n        ServerHttpRequest request = exchange.getRequest();\n        if (!routerValidator.isSecured.test(request)) {\n            logger.debug(\"Rota nao eh segura\");\n            return chain.filter(exchange);\n        }\n        logger.debug(\"Rota segura\");\n        if (!isAuthMissing(request)) {\n            logger.debug(\"Tem Authorization no Header\");\n            final String[] parts = this.getAuthHeader(request).split(\" \");\n            if (parts.length != 2 || !parts[0].equals(AUTHORIZATION_BEARER_TOKEN_HEADER)) {\n                logger.debug(\"Formato enviado: \" + Arrays.toString(parts));\n                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"Authorization header format must be: 'Bearer {token}'\");\n            }\n            logger.debug(\"Resolver o token\");\n            return requestAuthTokenSolve(exchange, chain, parts[1]);\n        }\n\n        throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, \"Unauthorized\");\n    }\n\n    private boolean isAuthMissing(ServerHttpRequest request) {\n        return !request.getHeaders().containsKey(AUTHORIZATION_HEADER);\n    }\n\n    private String getAuthHeader(ServerHttpRequest request) {\n        return request.getHeaders().getOrEmpty(AUTHORIZATION_HEADER).get(0);\n    }\n\n    // este metodo eh responsavel por enviar o token ao Auth Microservice\n    // a fim de interpretar o token, a chamada eh feita via Rest.\n    private Mono&lt;Void&gt; requestAuthTokenSolve(ServerWebExchange exchange, GatewayFilterChain chain, String jwt) {\n        logger.debug(\"solving jwt: \" + jwt);\n        return webClient\n            .defaultHeader(\n                HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE\n            )\n            .build()\n            .post()\n            .uri(AUTH_SERVICE_TOKEN_SOLVE)\n            .bodyValue(TokenOut.builder().token(jwt).build())\n            .retrieve()\n            .toEntity(SolveOut.class)\n            .flatMap(response -&gt; {\n                if (response != null &amp;&amp; response.hasBody() &amp;&amp; response.getBody() != null) {\n                    final SolveOut out = response.getBody();\n                    logger.debug(\"id account\" + out.idAccount());\n                    ServerWebExchange modifiedExchange = this.updateRequest(exchange, out);\n                    return chain.filter(modifiedExchange);\n                } else {\n                    throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, \"Invalid token\");\n                }\n            });\n    }\n\n    private ServerWebExchange updateRequest(ServerWebExchange exchange, SolveOut out) {\n        logger.debug(\"original headers: \" + exchange.getRequest().getHeaders().toString());\n        ServerWebExchange modified = exchange.mutate()\n            .request(\n                exchange.getRequest()\n                    .mutate()\n                    .header(\"id-account\", out.idAccount())\n                    .build()\n            ).build();\n        logger.debug(\"updated headers: \" + modified.getRequest().getHeaders().toString());\n        return modified;\n    }\n\n}\n</code></pre> <pre><code>package store.gateway.security;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.reactive.CorsWebFilter;\nimport org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;\n\n@Configuration\npublic class CorsFilter {\n\n    @Bean\n    public CorsWebFilter corsWebFilter() {\n\n        CorsConfiguration corsConfig = new CorsConfiguration();\n        corsConfig.setAllowCredentials(false);\n        corsConfig.addAllowedHeader(\"*\");\n        corsConfig.addAllowedMethod(\"*\");\n        corsConfig.addAllowedOrigin(\"*\");\n\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        source.registerCorsConfiguration(\"/**\", corsConfig);\n\n        return new CorsWebFilter(source);\n    }\n\n}\n</code></pre> <pre><code>package store.gateway.security;\n\nimport java.util.List;\nimport java.util.function.Predicate;\n\nimport org.springframework.http.server.reactive.ServerHttpRequest;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class RouterValidator {\n\n    private List&lt;String&gt; openApiEndpoints = List.of(\n\n        // authorization and authentication\n        \"POST /auth/register\",\n        \"POST /auth/login\",\n\n        // observability\n        \"GET /auth/actuator/prometheus\",\n        \"GET /account/actuator/prometheus\",\n        \"GET /product/actuator/prometheus\",\n        \"GET /order/actuator/prometheus\"\n\n    );\n\n    public Predicate&lt;ServerHttpRequest&gt; isSecured =\n        request -&gt; openApiEndpoints\n            .stream()\n            .noneMatch(uri -&gt; {\n                String[] parts = uri.replaceAll(\"[^a-zA-Z0-9// *]\", \"\").split(\" \");\n                final String method = parts[0];\n                final String path = parts[1];\n                final boolean deep = path.endsWith(\"/**\");\n                return (\"ANY\".equalsIgnoreCase(method) || request.getMethod().toString().equalsIgnoreCase(method))\n                    &amp;&amp; (request.getURI().getPath().equals(path) || (deep &amp;&amp; request.getURI().getPath().startsWith(path.replace(\"/**\", \"\"))));\n            });\n\n}\n</code></pre> <pre><code>package store.gateway.security;\n\nimport lombok.Builder;\nimport lombok.experimental.Accessors;\n\n@Builder @Accessors(fluent = true)\npublic record SolveOut(\n    String idAccount\n) {\n\n}\n</code></pre> <pre><code>package store.gateway.security;\n\nimport lombok.Builder;\nimport lombok.experimental.Accessors;\n\n@Builder @Accessors(fluent = true)\npublic record TokenOut(\n    String token\n) {\n\n}\n</code></pre> <pre><code>FROM openjdk:21-slim\nVOLUME /tmp\nCOPY target/*.jar app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n</code></pre>"},{"location":"checkpoints/3/checkpoint/#jwt-json-web-token","title":"JWT - JSON Web Token","text":"<p>JWT stands for JSON Web Token. It is a compact, URL-safe means of representing claims between two parties. JWTs are commonly used to secure the transmission of information between parties in a web environment, typically for authentication and information exchange. The JWT specification is defined by RFC 7519<sup>1</sup> and it is a decentralized approach for security (which can support horizontal scalability).</p> <p>Here are the key components and concepts of JWT:</p> <ul> <li>JSON Format: JWTs are represented as JSON objects that are easy to parse and generate. The JSON format makes them human-readable and easy to work with.</li> <li> <p>Three Parts: JWTs consist of three parts separated by dots (<code>.</code>): Header, Payload, and Signature.</p> <ul> <li> <p>Header: The header typically consists of two parts: the type of the token (JWT) and the signing algorithm being used, such as HMAC SHA256 or RSA.</p> </li> <li> <p>Payload: The payload contains the claims. Claims are statements about an entity (typically, the user) and additional data. There are three types of claims: registered, public, and private claims.</p> </li> <li> <p>Signature: To create the signature part, you take the encoded header, the encoded payload, a secret, the algorithm specified in the header, and sign that.</p> </li> </ul> </li> <li> <p>Encoding: Each of the three parts is Base64Url encoded, and the resulting strings are concatenated with periods between them. The final JWT looks like: <code>xxxxx.yyyyy.zzzzz</code>.</p> </li> <li>Stateless and Self-contained: JWTs are stateless, meaning that all the information needed is within the token itself. The server doesn't need to store the user's state. They are also self-contained, meaning that all the information needed is contained within the token.</li> <li>Use Cases: JWTs are commonly used for authentication and information exchange between parties. For example, after a user logs in, a server could generate a JWT and send it to the client. The client can then include the JWT in the headers of subsequent requests to access protected resources. The server can verify the authenticity of the JWT using the stored secret key.</li> <li>Security Considerations: While JWTs are widely used and versatile, it's important to handle them securely. For instance, the key used to sign the JWT should be kept secret, and HTTPS should be used to transmit JWTs to prevent man-in-the-middle attacks.</li> </ul> <p>Here's a simple example of a JWT created on JWT Builder<sup>2</sup>:</p> <p><code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJJbnNwZXIiLCJpYXQiOjE3MDMwMDgzMzgsImV4cCI6MjAxODU0MTEzOCwiYXVkIjoid3d3Lmluc3Blci5lZHUuYnIiLCJzdWIiOiJodW1iZXJ0b3JzQGluc3Blci5lZHUuYnIiLCJHaXZlbk5hbWUiOiJIdW1iZXJ0byIsIlN1cm5hbWUiOiJTYW5kbWFubiIsIkVtYWlsIjoiaHVtYmVydG9yc0BpbnNwZXIuZWR1LmJyIiwiUm9sZSI6IlByb2Zlc3NvciJ9.SsGdvR5GbYWTRbxY7IGxHt1vSxhkpRueBJWsi0lrPhJVCICp119QjU8F3QvHW0yF5tw-HhQ9RVh0l89t4M0LNw</code></p> <p>This JWT consists of three parts, decoded by <sup>3</sup>:</p> HeaderPayloadSignature <p><code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9</code></p> <pre><code>{\n  \"typ\": \"JWT\",\n  \"alg\": \"HS512\"\n}\n</code></pre> <p><code>eyJpc3MiOiJJbnNwZXIiLCJpYXQiOjE3MDMwMDgzMzgsImV4cCI6MjAxODU0MTEzOCwiYXVkIjoid3d3Lmluc3Blci5lZHUuYnIiLCJzdWIiOiJodW1iZXJ0b3JzQGluc3Blci5lZHUuYnIiLCJHaXZlbk5hbWUiOiJIdW1iZXJ0byIsIlN1cm5hbWUiOiJTYW5kbWFubiIsIkVtYWlsIjoiaHVtYmVydG9yc0BpbnNwZXIuZWR1LmJyIiwiUm9sZSI6IlByb2Zlc3NvciJ9</code></p> <pre><code>{\n  \"iss\": \"Insper\",\n  \"iat\": 1703008338,\n  \"exp\": 2018541138,\n  \"aud\": \"www.insper.edu.br\",\n  \"sub\": \"humbertors@insper.edu.br\",\n  \"GivenName\": \"Humberto\",\n  \"Surname\": \"Sandmann\",\n  \"Email\": \"humbertors@insper.edu.br\",\n  \"Role\": \"Professor\"\n}\n</code></pre> <p><code>SsGdvR5GbYWTRbxY7IGxHt1vSxhkpRueBJWsi0lrPhJVCICp119QjU8F3QvHW0yF5tw-HhQ9RVh0l89t4M0LNw</code></p> <pre><code>HMACSHA512(\n  base64UrlEncode(header) + \".\" +\n  base64UrlEncode(payload),\n  qwertyuiopasdfghjklzxcvbnm123456,\n)\n</code></pre> <p>JWTs are widely used in web development due to their simplicity, flexibility, and support across various programming languages and frameworks. They are commonly used in token-based authentication systems.</p>"},{"location":"checkpoints/3/checkpoint/#addtional-material","title":"Addtional Material","text":"<ul> <li> <p>JSON Web Token</p> </li> <li> <p> Autentica\u00e7\u00e3o e Autoriza\u00e7\u00e3o com Spring Security e JWT Tokens by Fernanda Kipper</p> <p></p> </li> <li> <p>Spring Cloud Security</p> </li> <li> <p> ByeteByteGo - Why is JWT popular?</p> <p></p> </li> </ul> <ol> <li> <p>RFC 7519 - JSON Web Token (JWT), 2015.\u00a0\u21a9</p> </li> <li> <p>JWT - Builder.\u00a0\u21a9</p> </li> <li> <p>jwt.io - JWT Verification.\u00a0\u21a9</p> </li> <li> <p>Unix Time Stamp - Epoch Converter.\u00a0\u21a9</p> </li> <li> <p>DELANTHA, R., Spring Cloud Gateway security with JWT, 2023.\u00a0\u21a9</p> </li> <li> <p>Wikipedia - Pepper (cryptography).\u00a0\u21a9</p> </li> <li> <p>PGzlan, Serve your hash with Salt and Pepper for Stronger Account Security, 2023.\u00a0\u21a9</p> </li> <li> <p>DELANTHA, R., Spring Cloud Gateway security with JWT, 2023.\u00a0\u21a9</p> </li> </ol>"},{"location":"checkpoints/4/checkpoint/","title":"4. DevOps","text":"<p>Jenkis is a continuous integration and continuous delivery (CI/CD) tool that automates the process of building, testing, and deploying software. It is widely used in DevOps practices to streamline the software development lifecycle.</p>"},{"location":"checkpoints/4/checkpoint/#containerized-jenkins","title":"Containerized Jenkins","text":"<p>In this checkpoint, we will set up a Jenkins server using Docker Compose. This will allow us to run Jenkins in a containerized environment, making it easy to manage and deploy.</p> <pre><code>\ud83d\udcc1 api/\n\ud83d\udcc1 jenkins/\n\u2514\u2500\u2500 \ud83d\udcc4 compose.yaml\n</code></pre> Source compose.yaml <pre><code># docker compose up -d --build --force-recreate\nname: ops\n\nservices:\n\n  jenkins:\n    container_name: jenkins\n    build:\n      dockerfile_inline: |\n        FROM jenkins/jenkins:jdk21\n        USER root\n\n        # Install tools\n        RUN apt-get update &amp;&amp; apt-get install -y lsb-release iputils-ping maven\n\n        # Install Docker\n        RUN curl -fsSLo /usr/share/keyrings/docker-archive-keyring.asc \\\n          https://download.docker.com/linux/debian/gpg\n        RUN echo \"deb [arch=$(dpkg --print-architecture) \\\n          signed-by=/usr/share/keyrings/docker-archive-keyring.asc] \\\n          https://download.docker.com/linux/debian \\\n          $(lsb_release -cs) stable\" &gt; /etc/apt/sources.list.d/docker.list\n        RUN apt-get update &amp;&amp; apt-get install -y docker-ce\n\n        # Install kubectl\n        RUN apt-get install -y apt-transport-https ca-certificates curl\n        RUN curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n        RUN chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n        RUN echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list\n        RUN chmod 644 /etc/apt/sources.list.d/kubernetes.list\n        RUN apt-get update &amp;&amp; apt-get install -y kubectl\n\n        RUN usermod -aG docker jenkins\n    ports:\n      - 9080:8080\n    volumes:\n      - ${CONFIG:-./config}/jenkins:/var/jenkins_home\n      - /var/run/docker.sock:/var/run/docker.sock\n    restart: always\n</code></pre> <p>To run this container:</p> <pre><code>docker compose up -d --build\n</code></pre> <pre><code>jenkins/# docker compose up -d --build\n\n[+] Running 2/2\n \u2714 jenkins Created              0.1s \n \u2714 Container jenkins Started    0.2s \n</code></pre> <p>Jenkins is now running on port 9080. You can access it by navigating to http://localhost:9080/ in your web browser.</p>"},{"location":"checkpoints/4/checkpoint/#jenkins-configuration","title":"Jenkins Configuration","text":"<p>Once Jenkins is running, you will need to configure it. The first time you access Jenkins, you will be prompted to unlock it using an initial admin password.</p> <p>Admin</p> <p>Please, to avoid permission issues, run the console as administrator.</p> <p>Setting the a number of executors to 10 will allow us to run two jobs in parallel. This is useful for speeding up the build process, especially when we have multiple projects or stages that can be executed concurrently.</p> <p></p>"},{"location":"checkpoints/4/checkpoint/#pipeline","title":"Pipeline","text":"<p>In this checkpoint, we will create a Jenkins pipeline that will build and deploy our application, Pipeline as Code. The pipeline will be defined in a <code>Jenkinsfile</code> located in the root of our project.</p> <p></p> <pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 account/\n    \u2514\u2500\u2500 \ud83d\udcc4 Jenkinsfile\n</code></pre> Source Jenkinsfile <pre><code>pipeline {\n    agent any\n\n    stages {\n        stage('Build') {\n            steps {\n                sh 'mvn -B -DskipTests clean install'\n            }\n        }\n    }\n\n}\n</code></pre> <p>The <code>Jenkinsfile</code> defines the stages of our pipeline, including building the application, running tests, and deploying the application - Pipeline as Code. Each stage can be customized to fit the needs of your project. The pipeline can be triggered manually or automatically based on events such as code commits or pull requests. This allows for continuous integration and continuous delivery (CI/CD) of our application.</p> <p>eg.: Pipeline for account-service:</p> <pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 account-service/\n    \u2514\u2500\u2500 \ud83d\udcc4 Jenkinsfile\n</code></pre> Jenkinsfile<pre><code>pipeline {\n    agent any\n    environment {\n        SERVICE = 'account'\n        NAME = \"humbertosandmann/${env.SERVICE}\"\n    }\n    stages {\n        stage('Dependecies') {\n            steps {\n                build job: 'account', wait: true\n            }\n        }\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }      \n        stage('Build &amp; Push Image') {\n            steps {\n                withCredentials([usernamePassword(\n                    credentialsId: 'dockerhub-credential',\n                    usernameVariable: 'USERNAME',\n                    passwordVariable: 'TOKEN')])\n                {\n                    sh \"docker login -u $USERNAME -p $TOKEN\"\n                    sh \"docker buildx create --use --platform=linux/arm64,linux/amd64 --node multi-platform-builder-${env.SERVICE} --name multi-platform-builder-${env.SERVICE}\"\n                    sh \"docker buildx build --platform=linux/arm64,linux/amd64 --push --tag ${env.NAME}:latest --tag ${env.NAME}:${env.BUILD_ID} -f Dockerfile .\"\n                    sh \"docker buildx rm --force multi-platform-builder-${env.SERVICE}\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>The pipeline is defined in a declarative syntax, which makes it easy to read and understand. Each stage can contain multiple steps, which are the individual tasks that need to be performed:</p> <ol> <li> <p>The <code>environment</code> block defines environment variables that can be used throughout the pipeline. In this case, we define the <code>SERVICE</code> and <code>NAME</code> variables, which are used in the <code>Build &amp; Push Image</code> stage.</p> </li> <li> <p>The <code>Build &amp; Push Image</code> stage uses the <code>withCredentials</code> block to securely access Docker Hub credentials stored in Jenkins. The <code>docker login</code> command authenticates with Docker Hub, and the <code>docker buildx build</code> command builds and pushes the Docker image to the specified tags. The <code>docker buildx</code> command is used to build multi-platform images, allowing us to create images that can run on different architectures (e.g., ARM and AMD64). The <code>--platform</code> flag specifies the target platforms, and the <code>--push</code> flag pushes the built image to Docker Hub.</p> </li> <li> <p>The <code>docker buildx create</code> command creates a new buildx builder instance, which is used to build multi-platform images. The <code>--use</code> flag sets this builder as the default for the current shell session. The <code>--node</code> flag specifies the name of the builder node, which is used to identify the builder instance.</p> </li> <li> <p>The <code>docker buildx rm</code> command removes the builder instance after the build is complete, freeing up resources.</p> </li> </ol> <p>The pipeline can be triggered manually or automatically based on events such as code commits or pull requests. This allows for continuous integration and continuous delivery (CI/CD) of our application.</p> <p>For setting up the credentials, you can use the Jenkins UI to create a new credential of type \"Username with password\". The <code>credentialsId</code> used in the pipeline should match the ID of the credential you created.</p> <p></p> <p>Also, Jenkins could deploy the application to a Docker Compose environment. This can be done by adding a new stage to the pipeline that uses the <code>docker compose</code> command to deploy the application.</p> <ol> <li> <p>Jenkins - Jenkins documentation.\u00a0\u21a9</p> </li> </ol>"},{"location":"checkpoints/5/checkpoint/","title":"5. Orchestration","text":""},{"location":"checkpoints/5/checkpoint/#what-is-an-orchestrator","title":"What is an Orchestrator?","text":"<p>An orchestrator is a system that automates the deployment, management, scaling, and operation of containerized applications. Containers package an application with its dependencies, making it portable across environments. Orchestrators handle critical tasks such as:</p> <ul> <li>Scheduling: Placing containers on appropriate servers.</li> <li>Scaling: Adding or removing containers based on demand.</li> <li>Networking: Managing communication between containers.</li> <li>Self-healing: Restarting failed containers or redistributing workloads.</li> <li>Service discovery: Enabling containers to find and communicate with each other.</li> </ul> <p>By abstracting infrastructure complexities, orchestrators ensure applications run reliably and efficiently, especially in large-scale, distributed systems. They are essential for enterprises managing hundreds or thousands of containers across multiple hosts, supporting cloud-native development and microservices architectures Container Orchestration - Red Hat.</p> <p>Orchestrators like Kubernetes, Docker Swarm, and Apache Mesos provide these capabilities, each with unique features and complexities. Kubernetes is the most widely adopted orchestrator, known for its robust ecosystem and community support.</p>"},{"location":"checkpoints/5/checkpoint/#difference-between-docker-compose-and-kubernetes","title":"Difference Between Docker Compose and Kubernetes","text":"<p>Docker Compose and Kubernetes (K8s) both manage containerized applications but serve different purposes, with distinct scopes, complexities, and use cases:</p>"},{"location":"checkpoints/5/checkpoint/#docker-compose","title":"Docker Compose","text":"<ul> <li>Purpose: Designed for single-host environments, ideal for development, testing, or small-scale production.</li> <li>Configuration: Uses a YAML file to define multi-container applications, specifying services, networks, and volumes.</li> <li>Features: Simplifies container networking and dependency management on one machine. Supports basic restart policies but lacks advanced features like auto-scaling or cluster management.</li> <li>Ease of Use: Simple to set up with a lower learning curve, making it accessible for developers.</li> <li>Use Case: Best for local development (e.g., running a web app with a database) or simple production setups where scalability isn\u2019t a priority.</li> </ul>"},{"location":"checkpoints/5/checkpoint/#kubernetes","title":"Kubernetes","text":"<ul> <li>Purpose: Built for orchestrating containers across a cluster of multiple nodes, suited for production-grade, distributed systems.</li> <li>Configuration: Uses declarative YAML/JSON files to define desired states, with controllers ensuring the system matches the configuration.</li> <li>Features: Offers auto-scaling, load balancing, rolling updates, self-healing, service discovery, and storage orchestration.</li> <li>Complexity: More complex, requiring knowledge of concepts like pods, services, and deployments.</li> <li>Use Case: Ideal for cloud-native applications needing high availability, scalability, and resilience across multiple servers.</li> </ul>"},{"location":"checkpoints/5/checkpoint/#key-differences","title":"Key Differences","text":"Aspect Docker Compose Kubernetes Scope Single-host Multi-host, cluster-based Scalability No auto-scaling Dynamic auto-scaling Complexity Simple, low learning curve Complex, steeper learning curve Use Case Local dev, testing, small prod Large-scale, production systems <p>Tools like Kompose can help migrate Docker Compose files to Kubernetes, easing the transition for growing applications Docker Compose vs Kubernetes - Spacelift.</p>"},{"location":"checkpoints/5/checkpoint/#alternatives-to-kubernetes","title":"Alternatives to Kubernetes","text":"<p>Kubernetes is the leading container orchestration platform, but its complexity and resource demands may not suit every scenario. Alternatives exist for different environments\u2014on-premise, cloud, and local\u2014offering simpler, cloud-specific, or lightweight solutions. Below is a table summarizing popular alternatives with examples:</p> Environment Alternative Description Examples On-Premise Nomad A lightweight orchestrator by HashiCorp, supporting containers and non-containerized workloads. Easier to set up than Kubernetes, ideal for smaller teams. Deploying Nomad on bare-metal servers in a data center for a microservices application. Apache Mesos An open-source distributed systems kernel for container orchestration, suitable for large-scale, custom workloads. Running Mesos on on-premise infrastructure to manage a big data processing pipeline. OpenShift A Kubernetes-based platform by Red Hat with added developer and enterprise tools, supporting hybrid cloud setups. Installing OpenShift on enterprise hardware for a hybrid cloud e-commerce platform. Cloud Amazon ECS AWS\u2019s managed container orchestration service, tightly integrated with AWS services like EC2 and Fargate. Using ECS on AWS to deploy a web application with auto-scaling on EC2 instances. Google Cloud Run A serverless platform for running stateless containers, abstracting infrastructure management. Deploying a REST API on Google Cloud with automatic scaling for traffic spikes. AWS Fargate Serverless compute for containers, compatible with ECS and EKS, eliminating server management. Running a containerized analytics service on AWS without managing servers. Azure Container Instances Microsoft Azure\u2019s serverless container service for simple, isolated container deployments. Deploying a batch processing job on Azure without managing infrastructure. Google Kubernetes Engine (GKE) Managed Kubernetes service by Google Cloud, simplifying cluster management. Running a machine learning workload on Google Cloud with GKE\u2019s managed control plane. Amazon EKS Managed Kubernetes service by AWS, integrating with AWS ecosystem. Deploying a scalable web app on AWS using EKS with managed control plane. Local Docker Compose A tool for defining and running multi-container applications on a single machine, ideal for development. Running a local dev environment with a web app, database, and cache using Docker Compose. Minikube A tool to run a single-node Kubernetes cluster locally for development and testing. Testing Kubernetes deployments on a developer\u2019s laptop with Minikube. Docker Swarm Docker\u2019s native orchestration tool, simpler than Kubernetes, for managing containers across multiple hosts. Setting up a small local cluster for testing a containerized app with Docker Swarm. Kind A tool for running Kubernetes clusters in Docker containers, useful for testing Kubernetes itself. Running a local Kubernetes cluster for testing and development with Kind. Rancher Desktop A desktop application for managing Kubernetes clusters, providing a user-friendly interface. Managing local Kubernetes clusters with Rancher Desktop for development. MicroK8s A lightweight, single-package Kubernetes distribution for local development. Running a local Kubernetes cluster with MicroK8s for testing and development. k3s A lightweight Kubernetes distribution designed for resource-constrained environments. Running a small-scale Kubernetes cluster on IoT devices or edge computing."},{"location":"checkpoints/5/checkpoint/#notes-on-alternatives","title":"Notes on Alternatives","text":"<ul> <li>Nomad and Docker Swarm prioritize simplicity, making them suitable for teams with limited resources or simpler workloads Kubernetes Alternatives - Wiz.</li> <li>OpenShift enhances Kubernetes with enterprise features but increases complexity, best for organizations needing robust tooling.</li> <li>Cloud-native options like Amazon ECS, Google Cloud Run, and AWS Fargate reduce management overhead but tie users to specific cloud providers, limiting portability.</li> <li>Local tools like Minikube and Docker Compose are not production-ready but excel in development and learning environments.</li> <li>Managed Kubernetes services (GKE, EKS) simplify Kubernetes operations but still require Kubernetes expertise, making them less of a true alternative for those avoiding K8s complexity.</li> </ul> <p>Choosing the right tool depends on factors like workload scale, team expertise, infrastructure constraints, and whether portability across clouds is needed. For small projects, Docker Compose or Nomad may suffice, while large, distributed systems often benefit from Kubernetes or cloud-native solutions like ECS.</p>"},{"location":"checkpoints/5/checkpoint/#kubernetes_1","title":"Kubernetes","text":"<p>Kubernetes is an open-source container orchestration platform that automates the deployment, scaling, and management of containerized applications. It provides a robust framework for running distributed systems resiliently, allowing you to manage clusters of hosts running Linux containers. A <code>cluster</code> is a set of machines (physical or virtual) that run Kubernetes and can be managed as a single entity. To manage these clusters, Kubernetes uses a set of APIs and a control plane to manage the state of the cluster.</p> <pre><code>flowchart TD\n    Deployment:::orange --&gt;|defines| ReplicaSet\n    ReplicaSet --&gt;|manages| pod((Pod))\n    pod:::red --&gt;|runs| Container\n    Deployment --&gt;|scales| pod\n    Deployment --&gt;|updates| pod\n\n    Service:::orange --&gt;|exposes| pod\n\n    subgraph  \n        ConfigMap:::orange\n        Secret:::orange\n    end\n\n    ConfigMap --&gt; Deployment\n    Secret --&gt; Deployment\n    classDef red fill:#f55\n    classDef orange fill:#ffa500</code></pre> <ul> <li> <p>Deployment: This is like the manager for your application, deciding how many copies (replicas) should run and updating them when needed.</p> </li> <li> <p>ReplicaSet: It ensures the right number of Pods (the actual running containers) are always available, creating or deleting them as necessary.</p> </li> <li> <p>Pod: The smallest unit, where your application actually runs, often containing one or more containers.</p> </li> <li> <p>Container: The actual application running inside the Pod, isolated from others.</p> </li> <li> <p>Service: This is like a load balancer, directing traffic to the right Pods based on rules you set. A Service allows you to expose your application to the outside world or to other applications within the cluster. The exposed service can be of different types:</p> Types of Services Description ClusterIP The default type, which exposes the service on a cluster-internal IP. This means that the service is only reachable from within the cluster. NodePort Exposes the service on each node's IP at a static port. This allows you to access the service from outside the cluster using <code>&lt;NodeIP&gt;:&lt;NodePort&gt;</code>. LoadBalancer Creates an external load balancer in supported cloud providers, routing traffic to your service. </li> <li> <p>ConfigMap: A way to pass configuration data to your application without hardcoding it into the container.</p> </li> <li> <p>Secret: Similar to ConfigMap, but used for sensitive information like passwords or API keys, ensuring they are stored securely.</p> </li> </ul> <p>Example of a simple Kubernete's YAML files:</p> secrets.yamlconfigmap.yamldeployment.yamlservice.yaml <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n    name: postgres-secrets\ndata:\n    POSTGRES_USER: c3RvcmU=\n    POSTGRES_PASSWORD: c3RvcmU=\n</code></pre> <pre><code>kubectl apply -f ./k8s/secrets.yaml\nkubectl get secrets\n</code></pre> <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n    name: postgres-configmap\n    labels:\n        app: postgres\ndata:\n    POSTGRES_HOST: postgres\n    POSTGRES_DB: store\n</code></pre> <pre><code>kubectl apply -f ./k8s/configmap.yaml\nkubectl get configmap\n</code></pre> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n          - name: postgres\n            image: postgres:latest\n            imagePullPolicy: Always\n            ports:\n              - containerPort: 5432\n            resources:\n              requests:\n                memory: \"256Mi\"\n                cpu: \"250m\"\n              limits:\n                memory: \"512Mi\"\n                cpu: \"500m\"\n            env:\n              - name: POSTGRES_DB\n                valueFrom:\n                  configMapKeyRef:\n                    name: postgres-configmap\n                    key: POSTGRES_DB\n\n              - name: POSTGRES_USER\n                valueFrom:\n                  secretKeyRef:\n                    name: postgres-secrets\n                    key: POSTGRES_USER\n\n              - name: POSTGRES_PASSWORD\n                valueFrom:\n                  secretKeyRef:\n                    name: postgres-secrets\n                    key: POSTGRES_PASSWORD\n</code></pre> <pre><code>kubectl apply -f ./k8s/deployment.yaml\nkubectl get deployments\nkubectl get pods\n</code></pre> <pre><code>apiVersion: v1\nkind: Service\nmetadata:\n    name: postgres\n    labels:\n        app: postgres\nspec:\n    type: ClusterIP\n    ports:\n        - port: 5432\n    selector:\n        app: postgres\n</code></pre> <pre><code>kubectl apply -f ./k8s/service.yaml\nkubectl get services\n</code></pre> <p>Horizontal Pod Autoscaler</p> <p>The Horizontal Pod Autoscaler (HPA) automatically scales the number of pods in a deployment or replica set based on observed CPU utilization or other select metrics. It adjusts the number of replicas dynamically to ensure that the application can handle varying loads without manual intervention. To set up HPA, you need to define the target CPU utilization and the minimum and maximum number of replicas. The HPA controller continuously monitors the metrics and adjusts the number of replicas accordingly.</p> <p>Check the documentation for more details on how to set up HPA: Horizontal Pod Autoscaling and HorizontalPodAutoscaler Walkthrough.</p>"},{"location":"checkpoints/5/checkpoint/#kubeclt","title":"Kubeclt","text":"<p>Kubernetes is a powerful container orchestration platform, and <code>kubectl</code> is its command-line tool for managing Kubernetes clusters. Below are some common commands and their descriptions to help you get started with <code>kubectl</code>.</p> <p>To install <code>kubectl</code>, follow the instructions in the Kubernetes documentation. To check if <code>kubectl</code> is installed correctly, run:</p> <pre><code>kubectl version --client\n</code></pre>"},{"location":"checkpoints/5/checkpoint/#kubectl-cheat-sheet","title":"Kubectl Cheat Sheet","text":"Command Description <code>kubectl get all</code> List all resources in the current namespace. <code>kubectl get pods</code> List all pods in the current namespace. <code>kubectl get pod &lt;pod-name&gt; -o wide</code> Get detailed information about a specific pod. <code>kubectl get services</code> List all services in the current namespace. <code>kubectl get deployments</code> List all deployments in the current namespace. <code>kubectl describe pod &lt;pod-name&gt;</code> Show detailed information about a specific pod. <code>kubectl logs &lt;pod-name&gt;</code> View logs for a specific pod. <code>kubectl exec -it &lt;pod-name&gt; -- bash</code> Open a shell in a running pod. <code>kubectl apply -f &lt;file.yaml&gt;</code> Apply a configuration file to create/update resources. <code>kubectl delete pod &lt;pod-name&gt;</code> Delete a specific pod. <code>kubectl scale deployment &lt;deployment-name&gt; --replicas=&lt;number&gt;</code> Scale a deployment to a specified number of replicas. <code>kubectl port-forward &lt;pod-name&gt; &lt;local-port&gt;:&lt;pod-port&gt;</code> Forward a local port to a port on a pod. <code>kubectl get nodes</code> List all nodes in the cluster. <code>kubectl get namespaces</code> List all namespaces in the cluster. <code>kubectl get configmaps</code> List all config maps in the current namespace. <code>kubectl get secrets</code> List all secrets in the current namespace. <code>kubectl get ingress</code> List all ingress resources in the current namespace. <code>kubectl delete --all</code> Delete all resources in the current namespace."},{"location":"checkpoints/5/checkpoint/#minikube","title":"Minikube","text":"<p>Minikube is a tool that makes it easy to run Kubernetes locally. It creates a single-node Kubernetes cluster on your machine, allowing you to test and develop applications in a Kubernetes environment without needing a full cloud setup.</p> <p>To install Minikube, follow the instructions in the Minikube documentation.</p>"},{"location":"checkpoints/5/checkpoint/#minikube-cheat-sheet","title":"Minikube Cheat Sheet","text":"Command Description <code>minikube start --driver=&lt;driver&gt; --profile=&lt;profile&gt;</code> Start a Minikube cluster with a specified driver and profile. <code>minikube profile list</code> List all Minikube profiles. <code>minikube stop --all</code> Stop all Minikube clusters. <code>minikube status</code> Check the status of the Minikube cluster. <code>minikube dashboard</code> Open the Kubernetes dashboard in your web browser. <code>minikube ssh</code> SSH into the Minikube VM. <code>minikube delete</code> Delete the Minikube cluster. <code>minikube delete --all --purge</code> Delete all Minikube clusters and remove their configurations. <ol> <li> <p>What is Container Orchestration? - Red Hat \u21a9</p> </li> <li> <p>Docker Compose vs Kubernetes - Differences Explained - Spacelift \u21a9</p> </li> <li> <p>Kubernetes Alternatives for Container Orchestration - Wiz \u21a9</p> </li> <li> <p>Kubernetes Cheat Sheet - Kubernetes \u21a9</p> </li> <li> <p>Minikube Cheat Sheet - Minikube \u21a9</p> </li> <li> <p>Horizontal Pod Autoscaling - Kubernetes \u21a9</p> </li> <li> <p>HorizontalPodAutoscaler Walkthrough - Kubernetes \u21a9</p> </li> <li> <p>Kubernetes Architecture - Kubernetes \u21a9</p> </li> </ol>"},{"location":"cloud/gitactions/","title":"Gitactions","text":""},{"location":"cloud/gitactions/#github-actions","title":"GitHub Actions","text":"<p>GitHub Actions is a feature of GitHub that allows you to automate, customize, and execute your software development workflows right in your repository. </p> <p>With GitHub Actions, you can build, test, and deploy your code directly from GitHub. It provides world-class support for Continuous Integration/Continuous Deployment (CI/CD). </p> <p>In addition, GitHub Actions allows you to automate other aspects of your development workflow such as assigning code reviews, managing branches, and triaging issues.</p>"},{"location":"cloud/terraform/","title":"Terraform","text":""},{"location":"cloud/terraform/#infrastructure-as-code-iac","title":"Infrastructure as Code (IaC)","text":"<p>Infrastructure as Code (IaC) is a method of managing and provisioning computing infrastructure through machine-readable definition files, rather than physical hardware configuration or interactive configuration tools. </p> <p>The IT infrastructure managed by this comprises both physical equipment, such as bare-metal servers, as well as virtual machines, and associated configuration resources. The definitions may be in a version control system. It can use either scripts or declarative definitions, rather than manual processes, but the term is more often used to promote declarative approaches.</p>"},{"location":"cloud/terraform/#pros","title":"Pros","text":"<ul> <li>Automatization of creation of an infrastructure;</li> <li>Standardization of platforms;</li> <li>Replication of infrastructure.</li> </ul> <pre><code>|- .github\n|  |- workflows\n|- s3-bucket-static\n   |- main.tf\n</code></pre> main.tf<pre><code>provider \"aws\" {\n    region = \"us-east-1\"\n}\n\nvariable \"bucket_name\" {\n    type = string\n}\n\nresource \"aws_s3_bucket\" \"static_site_bucket\" {\n    bucket = \"static-site-${var.bucket_name}\"\n\n    website {\n        index_document = \"index.html\"\n        error_document = \"404.html\n    }\n\n    tags = {\n        Name = \"Static Site Bucket\"\n        Environment = \"Production\"\n    }\n}\n\nresource \"aws_s3_public_access_block\" \"static_site_bucket\" {\n    bucket aws_s3_bucket.static_site_bucket.id\n\n    block_public_acls       = false\n    block_public_policy     = false\n    ignore_public_acls      = false\n    restrict_public_buckets = false\n}\n</code></pre>"},{"location":"cloud/terraform/#alternatives","title":"Alternatives","text":"<ul> <li>AWS CloudFormation</li> <li>Ansible</li> <li>Vagrant</li> </ul>"},{"location":"cloud/terraform/#additional-material","title":"Additional Material","text":"<ul> <li> <p> Criando Infra na AWS com Terraform (IaC) by Fernanda Kipper</p> <p></p> </li> </ul>"},{"location":"concepts/architectures/","title":"Architectures","text":""},{"location":"concepts/architectures/#clean-architecture","title":"Clean Architecture","text":"<p>Total desacoplamento das regras de neg\u00f3cios das camadas de interface:</p> <p> </p> Source: The Clean Code Blog <p>Em nossa arquitetura:</p> <pre><code>flowchart LR\n  subgraph Controller\n    direction TB\n    Interface:::adapter\n    RecordIn:::adapter\n    RecordOut:::adapter\n  end\n  subgraph Case\n    direction TB\n    Service:::case\n    DTO:::case\n  end\n  subgraph Entity\n    direction TB\n    Repository:::entity\n    Table:::entity\n  end\n\n  Interface --&gt; RecordIn\n  Interface --&gt; RecordOut\n\n  Controller &lt;--&gt; parser[\"Parser\"] &lt;--&gt; Case\n\n  Service --&gt; DTO\n\n  Case &lt;--&gt; mapper[\"Mapper\"] &lt;--&gt; Entity\n\n  Repository --&gt; Table\n\n  classDef adapter fill:#6f6\n  classDef case fill:#f99\n  classDef entity fill:#ff9\n</code></pre>"},{"location":"concepts/architectures/#referencias","title":"Refer\u00eancias:","text":"<ol> <li> <p> Criando um projeto Spring Boot com Arquitetura Limpa by Giuliana Silva Bezerra</p> <p> \u21a9</p> </li> <li> <p> Clean Architecture: A Craftsman's Guide to Software Structure and Design \u21a9</p> </li> <li> <p> Como se faz DevOps: Organizando pessoas, dos silos aos times de plataforma \u21a9</p> </li> </ol>"},{"location":"concepts/microservices/","title":"Microservices","text":""},{"location":"concepts/microservices/#microservices-concepts","title":"Microservices Concepts","text":"<p>Microservices, also known as the microservices architecture, is an architectural style that structures an application as a collection of small autonomous services, modeled around a business domain.</p> <p>Key concepts of microservices include:</p> <ul> <li>Single Responsibility: Each microservice should have a single responsibility and should implement a single business capability.</li> <li>Independence: Microservices should be able to run and evolve independently of each other. They should be independently deployable and scalable.</li> <li>Decentralization: Microservices architecture favors decentralized governance. Teams have the freedom to choose the best technology stack that suits their service.</li> <li>Isolation of Failures: If a microservice fails, it should not impact the availability of other services.</li> <li>Data Isolation: Each microservice should have its own database to ensure that the services are loosely coupled and can evolve independently.</li> <li>Communication: Microservices communicate with each other through well-defined APIs and protocols, typically HTTP/REST with JSON or gRPC with Protobuf.</li> <li>Infrastructure Automation: Due to the distributed nature of the microservices architecture, automation of infrastructure is a must. This includes automated provisioning, scaling, and deployment.</li> <li>Observability: With many different services, it's important to have excellent monitoring and logging to detect and diagnose problems.</li> </ul>"},{"location":"concepts/microservices/#domain-driven-design","title":"Domain Driven Design","text":"<p>Domain-Driven Design (DDD) is a software development approach that emphasizes collaboration between technical experts and domain experts. The goal is to create software that is a deep reflection of the underlying domain, which is the specific area of business or activity that the software is intended to support.</p> <p>Key concepts of DDD include:</p> <ul> <li>Ubiquitous Language: A common language established between developers and domain experts, used to describe all aspects of the domain.</li> <li>Bounded Context: A boundary within which a particular model is defined and applicable.</li> <li>Entities: Objects that have a distinct identity that persists over time and across different representations.</li> <li>Value Objects: Objects that are defined by their attributes, not their identity.</li> <li>Aggregates: Clusters of entities and value objects that are treated as a single unit.</li> <li>Repositories: They provide a way to obtain references to aggregates.</li> <li>Domain Events: Events that domain experts care about.</li> <li>Services: Operations that don't naturally belong to any entity or value object.</li> </ul> <p>By focusing on the domain and domain logic, DDD provides techniques to develop complex systems targeting real-world scenarios. It helps to reduce the complexity by dividing the system into manageable and interconnected parts.</p> <p> </p> Source: System Design 101 - Microservice Architecture"},{"location":"concepts/microservices/#design-a-microservice-platform","title":"Design a Microservice Platform","text":"<pre><code>flowchart LR\n  subgraph Client\n    direction LR\n    Web\n    Mobile\n    Desktop\n  end\n  subgraph Microservices\n    direction LR\n    gateway[\"Gateway\"]\n    subgraph Essentials\n      direction TB\n      discovery[\"Discovery\"]\n      auth[\"Auth\"]\n      config[\"Configuration\"]\n    end\n    subgraph Businesses\n      direction TB\n      ms1[\"Service 1\"]\n      ms2[\"Service 2\"]\n      ms3[\"Service 3\"]\n    end\n  end\n  Client --&gt; lb[\"Load Balance\"] --&gt; gateway --&gt; Businesses\n  gateway --&gt; auth\n  gateway --&gt; discovery\n  click gateway \"../gateway/\" \"Gateway\"\n  click discovery \"../discovery/\" \"Discovery\"\n  click auth \"../auth-service/\" \"Auth\"\n  click config \"../config/\" \"Configuration\"\n  click lb \"../load-balancing/\" \"Load Balance\"</code></pre> <ol> <li> <p>XU, A., System Design 101.\u00a0\u21a9</p> </li> <li> <p>Wikipedia - Domain Driven Design \u21a9</p> </li> </ol>"},{"location":"devops/concepts/","title":"Concepts","text":"<p>DevOps is a set of practices that combines software development (Dev) and IT operations (Ops). It aims to shorten the system development life cycle and provide continuous delivery with high software quality. DevOps is complementary with Agile software development; several DevOps aspects came from Agile methodology.</p> <p>Key concepts of DevOps include:</p> <ul> <li>Continuous Integration (CI): Developers regularly merge their code changes into a central repository, after which automated builds and tests are run.</li> <li>Continuous Delivery (CD): The combined practices of continuous integration and automated testing allow for the continuous delivery of code changes to a staging or production system.</li> <li>Infrastructure as Code (IaC): Infrastructure is defined and managed using code and software development techniques, such as version control and continuous integration.</li> <li>Monitoring and Logging: Keeping track of how applications and systems are performing in real-time to understand ongoing IT infrastructure status.</li> <li>Communication and Collaboration: Increased communication and collaboration in an organization is one of the key cultural aspects of DevOps. The use of DevOps tooling and automation of the software delivery process tends to increase collaboration between the teams.</li> </ul> <p></p> <p> </p> Source: Wikipedia - Devops"},{"location":"devops/concepts/#cicd","title":"CI/CD","text":""},{"location":"devops/concepts/#pipeline","title":"Pipeline","text":""},{"location":"devops/concepts/#service-level-agreement-sla","title":"Service-level agreement - SLA","text":"<p>Service-level agreement, well-known as SLA, is </p>"},{"location":"devops/concepts/#other-approaches","title":"Other Approaches","text":""},{"location":"devops/concepts/#noops","title":"NoOps","text":"<p>NoOps, short for \"No Operations\", is a concept in software development where the software is designed in such a way that it requires minimal or even no IT operations support. This is often achieved through the use of fully automated processes and systems, which eliminate the need for manual intervention in tasks such as deployment, scaling, and systems management.</p> <p>The goal of NoOps is to allow the software developers to focus on writing new features for the application, rather than spending time on operational concerns. This is often achieved through the use of Platform as a Service (PaaS) providers, which handle many of the operational tasks automatically.</p> <p>https://www.jenkins.io/doc/tutorials/build-a-java-app-with-maven/</p> <p>Jenkins</p> <p>Install plugins: - Blue Ocean - Docker - Docker Pipeline - Kubernetes Cli</p> <p>https://www.jenkins.io/doc/tutorials/build-a-java-app-with-maven/</p> <p>https://www.jenkins.io/blog/2017/02/07/declarative-maven-project/</p> <ol> <li> <p>Wiki Service-level Agreement \u21a9</p> </li> </ol>"},{"location":"devops/docker/","title":"Docker","text":"<p>How to avoid the classical..</p> <p></p> <p>?</p> <p>The answer is: CONTAINERIZATION.</p> <p>Docker is a platform and tool that enables developers to automate the deployment of applications inside lightweight, portable containers. Containers are a form of virtualization that packages an application and its dependencies together, ensuring consistency across different environments, from development to testing and production.</p> <p>Here are some key concepts and components of Docker:</p> <ul> <li>Containerization: Containers are lightweight, standalone, and executable packages that include everything needed to run a piece of software, including the code, runtime, libraries, and system tools. Containers isolate applications from their environment, making them portable and consistent across various systems.</li> <li>Docker Engine: This is the core component of Docker. It is a lightweight and portable runtime that can run containers on various operating systems, including Linux and Windows. The Docker Engine consists of a server, a REST API, and a command-line interface.</li> <li>Docker Image: An image is a lightweight, standalone, and executable package that includes everything needed to run a piece of software, including the code, a runtime, libraries, environment variables, and config files. Images are used to create containers.</li> <li>Dockerfile: A Dockerfile is a text file that contains instructions for building a Docker image. It specifies the base image, sets up the environment, installs dependencies, and configures the application.</li> <li>Registry: Docker images can be stored in registries, which are repositories for sharing and distributing container images. Docker Hub is a popular public registry, and organizations often use private registries to store and manage their proprietary images.</li> <li>Container Orchestration: Docker can be used in conjunction with container orchestration tools like Kubernetes or Docker Swarm to manage the deployment, scaling, and orchestration of containerized applications in production environments.</li> <li>Portability: One of Docker's key advantages is its portability. Since containers encapsulate everything an application needs to run, they can run consistently across different environments, reducing the \"it works on my machine\" problem often encountered in software development.</li> </ul> <p>Docker has become a widely adopted technology in the software development and deployment space due to its ease of use, portability, and the efficiency it brings to the development and deployment lifecycle. It has revolutionized the way applications are packaged, shipped, and deployed, making it easier for developers to build, test, and deploy applications in a more reliable and consistent manner.</p>"},{"location":"devops/docker/#differences-between-docker-and-virtual-machines","title":"Differences between Docker and Virtual Machines","text":"<p>Docker containers and virtual machines (VMs) are both technologies used for virtualization, but they operate at different levels and have distinct characteristics. Here are the key differences between Docker containers and virtual machines:</p> Aspect Docker Containers Virtual Machines Architecture Containers share the host operating system's kernel and isolate the application processes from each other. Each container runs in its own user space but uses the host's kernel. VMs, on the other hand, run a complete operating system, including its own kernel, on top of a hypervisor. Each VM is essentially a full-fledged virtualized computer with its own resources. Resource Efficiency Containers are more lightweight and share the host OS kernel, which makes them more resource-efficient compared to VMs. Containers can start up quickly and consume fewer system resources. VMs have more overhead because each VM requires a full operating system and has its own kernel. This makes VMs less resource-efficient than containers. Isolation Containers provide process-level isolation, meaning that each container runs in its own process space, but they share the same OS kernel. This isolation is generally sufficient for most applications. VMs provide stronger isolation since each VM runs its own operating system and has its own kernel. This makes VMs a better choice in situations where strong isolation is a critical requirement. Portability Containers are highly portable because they encapsulate the application and its dependencies, ensuring consistency across different environments. VMs are less portable due to the larger size and complexity associated with bundling a full operating system with the application. Startup Time Containers can start up very quickly, typically in seconds, making them well-suited for microservices architectures and dynamic scaling. VMs generally have longer startup times, often measured in minutes, due to the time required to boot a full operating system. Resource Utilization Containers share the host OS resources, which can lead to higher density and more efficient resource utilization. VMs have a higher resource overhead because each VM requires its own set of resources, including memory, disk space, and CPU. Use Cases Containers are well-suited for microservices architectures, continuous integration/continuous deployment (CI/CD) pipelines, and scenarios where rapid deployment and scalability are crucial. VMs are suitable for scenarios that require strong isolation, compatibility with various operating systems, and where applications rely on specific OS configurations. <p> </p> Source: Docker vs. Virtual Machines: Differences You Should Know <p>In summary, Docker containers and virtual machines have different levels of abstraction and are suitable for different use cases. Containers are lightweight, portable, and efficient, making them popular for modern application development and deployment practices. Virtual machines provide stronger isolation and are more suitable for scenarios where running multiple instances of different operating systems is necessary. The choice between Docker containers and virtual machines depends on the specific requirements of the application and the environment in which it will be deployed. To install Docker Engine, see Install Docker Engine.</p>"},{"location":"devops/docker/#creating-a-simple-docker","title":"Creating a Simple Docker","text":"Command Description <code>docker run &lt;image&gt;</code> Runs a Docker container from an image. <code>docker ps</code> Lists running Docker containers. <code>docker ps -a</code> Lists all Docker containers, both running and stopped. <code>docker stop &lt;container&gt;</code> Stops a running Docker container. <code>docker rm &lt;container&gt;</code> Removes a Docker container. <code>docker images</code> Lists Docker images. <code>docker rmi &lt;image&gt;</code> Removes a Docker image. <code>docker pull &lt;image&gt;</code> Pulls a Docker image from a Docker registry. <code>docker build -t &lt;tag&gt; .</code> Builds a Docker image from a Dockerfile in the current directory. <code>docker exec -it &lt;container&gt; &lt;command&gt;</code> Executes a command in a running Docker container. <code>docker logs &lt;container&gt;</code> Fetches the logs of a Docker container. <p>Hello Markdown!</p> pip install termynalInstalled <pre><code>FROM openjdk:17-alpine\nVOLUME /tmp\nARG JAR_FILE=target/gateway-0.0.1-SNAPSHOT.jar\nCOPY ${JAR_FILE} app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n</code></pre> <p>https://docs.docker.com/engine/install/</p> <p>https://www.docker.com/blog/how-to-use-your-own-registry-2/</p> <ol> <li> <p>Docker vs. Virtual Machines: Differences You Should Know \u21a9</p> </li> </ol>"},{"location":"devops/kubernetes/","title":"Kubernetes","text":""},{"location":"devops/kubernetes/#kubernetes","title":"Kubernetes","text":"<p>Kubernetes, also known as K8s, is an open-source platform designed to automate deploying, scaling, and operating application containers. It was originally designed by Google and is now maintained by the Cloud Native Computing Foundation.</p> <p>Key features of Kubernetes include:</p> <ul> <li>Service discovery and load balancing: Kubernetes can expose a container using the DNS name or their own IP address. If traffic to a container is high, Kubernetes is able to load balance and distribute the network traffic to help the deployment stable.</li> <li>Storage orchestration: Kubernetes allows you to automatically mount a storage system of your choice, such as local storages, public cloud providers, and more.</li> <li>Automated rollouts and rollbacks: You can describe the desired state for your deployed containers using Kubernetes, and it can change the actual state to the desired state at a controlled rate. For example, you can automate Kubernetes to create new containers for your deployment, remove existing containers and adopt all their resources to the new container.</li> <li>Automatic bin packing: You provide Kubernetes with a cluster of nodes that it can use to run containerized tasks. You tell Kubernetes how much CPU and memory (RAM) each container needs. Kubernetes can fit containers onto your nodes to make the best use of your resources.</li> <li>Self-healing: Kubernetes restarts containers that fail, replaces and reschedules containers when nodes die, kills containers that don\u2019t respond to your user-defined health check, and doesn\u2019t advertise them to clients until they are ready to serve.</li> <li>Secret and configuration management: Kubernetes lets you store and manage sensitive information, such as passwords, OAuth tokens, and SSH keys. You can deploy and update secrets and application configuration without rebuilding your container images, and without exposing secrets in your stack configuration.</li> </ul> <p>MiniKube</p> <p>https://cloud.google.com/learn/what-is-kubernetes?hl=pt-br#section-4</p> <p>https://serverlessland.com/</p>"},{"location":"devops/packaging/","title":"Packaging","text":""},{"location":"devops/packaging/#maven","title":"Maven","text":"<p>Maven uses an XML file to describe the software project being built, its dependencies on other external modules and components, the build order, directories, and required plugins. It comes with pre-defined targets for performing certain well-defined tasks such as compilation of code and its packaging.</p> <p>Key Features: - Simple project setup that follows best practices. - Dependency management including automatic updating, dependency closures (also known as transitive dependencies) - Able to easily work with multiple projects at the same time. - Large and mature community with a large ecosystem of plugins and integrations.</p> <pre><code>mvn clean package\n</code></pre> <pre><code>mvn clean install\n</code></pre> <pre><code>mvn clean package spring-boot:run\n</code></pre> <pre><code>mvn versions:display-dependency-updates\n</code></pre> <pre><code>mvn dependency:analyze\n</code></pre> <p>more about Maven dependency plugin</p>"},{"location":"devops/packaging/#gradle","title":"Gradle","text":"<p>Gradle is another build automation tool that builds upon the concepts of Apache Ant and Apache Maven and introduces a Groovy-based domain-specific language (DSL) instead of the XML form used by Apache Maven for declaring the project configuration. Gradle provides a platform to support the entire development lifecycle of a software project.</p> <p>Key Features: - Declarative builds and build-by-convention. - Language for dependency-based programming. - Structure your build. - Deep API. - Multi-project builds. - Many ways to manage dependencies. - Integration with existing structures. - Ease of migration.</p>"},{"location":"devops/release/","title":"Release","text":""},{"location":"devops/release/#infrastructure-as-code-and-automation-iac","title":"Infrastructure as Code and Automation (IaC)","text":"<p>Infrastructure as Code (IaC) is a method of managing and provisioning computing infrastructure through machine-readable definition files, rather than physical hardware configuration or interactive configuration tools.</p> <p>In other words, IaC is the process of managing and provisioning computer data centers through machine-readable definition files, rather than physical hardware configuration or interactive configuration tools.</p> <p>The IT infrastructure managed by this comprises both physical equipment such as bare-metal servers as well as virtual machines and associated configuration resources. The definitions may be in a version control system. It can use either scripts or declarative definitions, rather than manual processes, but the term is more often used to promote declarative approaches.</p> <p>IaC approaches are promoted for cloud computing, which is sometimes marketed as Infrastructure as a Service (IaaS). IaC supports IaaS, but should not be confused with it.</p> <p>Jenkins DSL (Domain Specific Language)</p>"},{"location":"devops/release/#jenkins","title":"Jenkins","text":"<p>Installing Jenkins</p> <p>SDLC - Software Development LifeCycle</p>"},{"location":"devops/release/#service-level-agreement-sla","title":"Service-level agreement - SLA","text":"<p>Service-level agreement, well-known as SLA, is</p> <p>References:</p> <pre><code>-[Wiki Service-level Agreement](https://en.wikipedia.org/wiki/Service-level_agreement)\n</code></pre>"},{"location":"devops/version-control-system/","title":"Version control system","text":""},{"location":"devops/version-control-system/#git","title":"Git","text":"<p>Git is a distributed version control system designed to handle everything from small to very large projects with speed and efficiency. It was created by Linus Torvalds in 2005 for development of the Linux kernel.</p> <p>Key features of Git include:</p> <ul> <li>Distributed Version Control: This means that every user has a complete copy of the project repository on their local machine. This allows for operations to be performed offline and provides a backup in case the central repository fails.</li> <li>Branching and Merging: Git's branching model allows developers to work on different features or bugs in isolation, without affecting the main codebase. These branches can then be merged back into the main codebase when the work is complete.</li> <li>Speed: Git is designed to be fast and efficient, even for large projects.</li> <li>Data Integrity: Git uses a data model that ensures the cryptographic integrity of every bit of your project. Every file and commit is checksummed and retrieved by its checksum when checked back out.</li> <li>Staging Area: Git provides a staging area or \"index\" that allows you to format and review your commits before completing the commit.</li> </ul> <p>SCM - Supply-chain-management software</p> <p>https://twitter.com/milan_milanovic/status/1745435542127349899</p>"},{"location":"exercises/exercise1/","title":"1. Exchange API","text":"<p>Using FastAPI<sup>1</sup> (or other framework) on Python , create a REST API that allows the user to convert between currencies. The API should have the following endpoints:</p> <p>GET /exchange/{from}/{to}</p> <p>Get the current of a coin from one currency to another. E.g. <code>GET /coin/USD/EUR</code>.</p> Response <p><pre><code>{\n    \"sell\": 0.82,\n    \"buy\": 0.80,\n    \"date\": \"2021-09-01 14:23:42\",\n    \"id-account\": \"0195ae95-5be7-7dd3-b35d-7a7d87c404fb\"\n}\n</code></pre> <pre><code>Response code: 200 (ok)\n</code></pre></p> <p>The API should use a third-party API to get the exchange rates. You can use the free tier of the API, e.g.:</p> <ul> <li>AwesomeAPI;</li> <li>ExchangeRate-API;</li> <li>Open Exchange Rates;</li> <li>CurrencyLayer;</li> <li>any other API.</li> </ul> <p>Or, you can scrape the data from a website.</p> <p>Hint</p> <p>You can use the <code>requests</code> library to make HTTP requests to the third-party API.</p> <p>Attention</p> <p>To consume the API, the user must be authenticated.</p> <p>Gateway</p> <p>This API should be consumed through the Gateway of the platform.</p> <pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        gateway --&gt; account\n        gateway --&gt; auth\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        auth --&gt; account\n        gateway e1@==&gt; exchange:::red\n        e1@{ animate: true }\n    end\n    exchange e2@==&gt; 3partyapi@{label: \"3rd-party API\"}\n    internet e3@==&gt;|request| gateway\n    e2@{ animate: true }\n    e3@{ animate: true }\n    classDef red fill:#fcc\n    click exchange \"#exchange-api\" \"Exchange API\"</code></pre> <p>Entrega</p> <p>Individualmente, cada aluno deve criar um reposit\u00f3rio no GitHub, com a documenta\u00e7\u00e3o em MkDocs dos exerc\u00edcios realizados e tamb\u00e9m com o projeto e entrega o link via BlabkBoard. Na documenta\u00e7\u00e3o publicada deve constar:</p> <ul> <li>Nome do aluno e grupo;</li> <li>Documenta\u00e7\u00e3o das atividades realizadas;</li> <li>C\u00f3digo fonte das atividades realizadas;</li> <li>Documenta\u00e7\u00e3o do projeto;</li> <li>C\u00f3digo fonte do projeto;</li> <li>Link para todos os reposit\u00f3rios utilizados;</li> <li>Destaques para os bottlenecks implementados (ao menos 2 por indiv\u00edduo);</li> <li>Apresenta\u00e7\u00e3o do projeto;</li> <li>V\u00eddeo de apresenta\u00e7\u00e3o do projeto (2-3 minutos);</li> </ul> <p>Um template de documenta\u00e7\u00e3o pode ser encontrado em Template de Documenta\u00e7\u00e3o.</p> <ol> <li> <p>FastAPI - First Steps.\u00a0\u21a9</p> </li> </ol>"},{"location":"exercises/exercise2/","title":"2. Product API","text":"<p>Create a RESTful API for a store. The API should have two main resources: <code>product</code> and <code>order</code>.</p> <pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        gateway --&gt; account\n        gateway --&gt; auth\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        auth --&gt; account\n        gateway --&gt; exchange\n        gateway e5@==&gt; product:::red\n        gateway e6@==&gt; order\n        product e2@==&gt; db\n        order e3@==&gt; db\n        order e4@==&gt; product\n    end\n    exchange --&gt; 3partyapi@{label: \"3rd-party API\"}\n    internet e1@==&gt;|request| gateway\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e5@{ animate: true }\n    e6@{ animate: true }\n    classDef red fill:#fcc\n    click product \"#product-api\" \"Product API\"</code></pre> <p>Attention</p> <p>To consume the API, the user must be authenticated.</p>"},{"location":"exercises/exercise2/#product-api","title":"Product API","text":"<p>The API should have the following endpoints:</p> <p>POST /product</p> <p>Create a new product.</p> RequestResponse <pre><code>{\n    \"name\": \"Tomato\",\n    \"price\": 10.12,\n    \"unit\": \"kg\"\n}\n</code></pre> <p><pre><code>{\n    \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n    \"name\": \"Tomato\",\n    \"price\": 10.12,\n    \"unit\": \"kg\"\n}\n</code></pre> <pre><code>Response code: 201 (created)\n</code></pre></p> <p>GET /product</p> <p>Get all products.</p> Response <p><pre><code>[\n    {\n        \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n        \"name\": \"Tomato\",\n        \"price\": 10.12,\n        \"unit\": \"kg\"\n    },\n    {\n        \"id\": \"0195abfe-e416-7052-be3b-27cdaf12a984\",\n        \"name\": \"Cheese\",\n        \"price\": 0.62,\n        \"unit\": \"slice\"\n    }\n]\n</code></pre> <pre><code>Response code: 200 (ok)\n</code></pre></p> <p>GET /product/{id}</p> <p>Get a product by its ID.</p> Response <p><pre><code>{\n    \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n    \"name\": \"Tomato\",\n    \"price\": 10.12,\n    \"unit\": \"kg\"\n}\n</code></pre> <pre><code>Response code: 200 (ok)\n</code></pre></p> <p>DELETE /product/{id}</p> <p>Delete a product by its ID.</p> <pre><code>Response code: 204 (no content)\n</code></pre>"},{"location":"exercises/exercise2/#additionals","title":"Additionals","text":"<p>Additional features are welcome, such as:</p> <ul> <li>Search products by \"like\" name;</li> <li>Authorization by role (admin, user):<ul> <li>Admin can create, update, and delete products;</li> <li>User can only create orders;</li> </ul> </li> <li>Input validations;</li> <li>Error handling.</li> </ul>"},{"location":"exercises/exercise2/#nice-to-have","title":"Nice to have","text":"<ul> <li>Observability (metrics, logs), see Prometheus and Grafana;</li> <li>Database In-Memory (suggestion: Product microservice), see Redis;</li> <li>Swagger documentation, see SpringDoc.</li> </ul> <p>Entrega</p> <p>Individualmente, cada aluno deve criar um reposit\u00f3rio no GitHub, com a documenta\u00e7\u00e3o em MkDocs dos exerc\u00edcios realizados e tamb\u00e9m com o projeto e entrega o link via BlabkBoard. Na documenta\u00e7\u00e3o publicada deve constar:</p> <ul> <li>Nome do aluno e grupo;</li> <li>Documenta\u00e7\u00e3o das atividades realizadas;</li> <li>C\u00f3digo fonte das atividades realizadas;</li> <li>Documenta\u00e7\u00e3o do projeto;</li> <li>C\u00f3digo fonte do projeto;</li> <li>Link para todos os reposit\u00f3rios utilizados;</li> <li>Destaques para os bottlenecks implementados (ao menos 2 por indiv\u00edduo);</li> <li>Apresenta\u00e7\u00e3o do projeto;</li> <li>V\u00eddeo de apresenta\u00e7\u00e3o do projeto (2-3 minutos);</li> </ul> <p>Um template de documenta\u00e7\u00e3o pode ser encontrado em Template de Documenta\u00e7\u00e3o.</p>"},{"location":"exercises/exercise3/","title":"3. Order API","text":"<pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        gateway --&gt; account\n        gateway --&gt; auth\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        auth --&gt; account\n        gateway --&gt; exchange\n        gateway e5@==&gt; product\n        gateway e6@==&gt; order:::red\n        product e2@==&gt; db\n        order e3@==&gt; db\n        order e4@==&gt; product\n    end\n    exchange --&gt; 3partyapi@{label: \"3rd-party API\"}\n    internet e1@==&gt;|request| gateway\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e5@{ animate: true }\n    e6@{ animate: true }\n    classDef red fill:#fcc\n    click order \"#order-api\" \"Order API\"</code></pre> <p>Attention</p> <p>To consume the API, the user must be authenticated.</p>"},{"location":"exercises/exercise3/#order-api","title":"Order API","text":"<p>POST /order</p> <p>Create a new order for the current user.</p> RequestResponse <pre><code>{\n    \"items\": [\n        {\n            \"idProduct\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n            \"quantity\": 2\n        },\n        {\n            \"idProduct\": \"0195abfe-e416-7052-be3b-27cdaf12a984\",\n            \"quantity\": 1\n        }\n    ]\n}\n</code></pre> <p><pre><code>{\n    \"id\": \"0195ac33-73e5-7cb3-90ca-7b5e7e549569\",\n    \"date\": \"2025-09-01T12:30:00\",\n    \"items\": [\n        {\n            \"id\": \"01961b9a-bca2-78c4-9be1-7092b261f217\",\n            \"product\": {\n                \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\"\n            },\n            \"quantity\": 2,\n            \"total\": 20.24\n        },\n        {\n            \"id\": \"01961b9b-08fd-76a5-8508-cdb6cd5c27ab\",\n            \"product\": {\n                \"id\": \"0195abfe-e416-7052-be3b-27cdaf12a984\"\n            },\n            \"quantity\": 10,\n            \"total\": 6.2\n        }\n    ],\n    \"total\": 26.44\n}\n</code></pre> <pre><code>Response code: 201 (created)\nResponse code: 400 (bad request), if the product does not exist.\n</code></pre></p> <p>GET /order</p> <p>Get all orders for the current user.</p> Response <p><pre><code>[\n    {\n        \"id\": \"0195ac33-73e5-7cb3-90ca-7b5e7e549569\",\n        \"date\": \"2025-09-01T12:30:00\",\n        \"total\": 26.44\n    },\n    {\n        \"id\": \"0195ac33-cbbd-7a6e-a15b-b85402cf143f\",\n        \"date\": \"2025-10-09T03:21:57\",\n        \"total\": 18.6\n    }\n\n]\n</code></pre> <pre><code>Response code: 200 (ok)\n</code></pre></p> <p>GET /order/{id}</p> <p>Get the order details by its ID. The order must belong to the current user., otherwise, return a <code>404</code>.</p> Response <p><pre><code>{\n    \"id\": \"0195ac33-73e5-7cb3-90ca-7b5e7e549569\",\n    \"date\": \"2025-09-01T12:30:00\",\n    \"items\": [\n        {\n            \"id\": \"01961b9a-bca2-78c4-9be1-7092b261f217\",\n            \"product\": {\n                \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n            },\n            \"quantity\": 2,\n            \"total\": 20.24\n        },\n        {\n            \"id\": \"01961b9b-08fd-76a5-8508-cdb6cd5c27ab\",\n            \"product\": {\n                \"id\": \"0195abfe-e416-7052-be3b-27cdaf12a984\",\n            },\n            \"quantity\": 10,\n            \"total\": 6.2\n        }\n    ],\n    \"total\": 26.44\n}\n</code></pre> <pre><code>Response code: 200 (ok)\nResponse code: 404 (not found), if the order does not belong to the current user.\n</code></pre></p>"},{"location":"exercises/exercise3/#additionals","title":"Additionals","text":"<p>Additional features are welcome, such as:</p> <ul> <li>Search products by \"like\" name;</li> <li>Authorization by role (admin, user):<ul> <li>Admin can create, update, and delete products;</li> <li>User can only create orders;</li> </ul> </li> <li>Input validations;</li> <li>Error handling.</li> </ul>"},{"location":"exercises/exercise3/#nice-to-have","title":"Nice to have","text":"<ul> <li>Observability (metrics, logs), see Prometheus and Grafana;</li> <li>Database In-Memory (suggestion: Product microservice), see Redis;</li> <li>Swagger documentation, see SpringDoc.</li> </ul> <p>Entrega</p> <p>Individualmente, cada aluno deve criar um reposit\u00f3rio no GitHub, com a documenta\u00e7\u00e3o em MkDocs dos exerc\u00edcios realizados e tamb\u00e9m com o projeto e entrega o link via BlabkBoard. Na documenta\u00e7\u00e3o publicada deve constar:</p> <ul> <li>Nome do aluno e grupo;</li> <li>Documenta\u00e7\u00e3o das atividades realizadas;</li> <li>C\u00f3digo fonte das atividades realizadas;</li> <li>Documenta\u00e7\u00e3o do projeto;</li> <li>C\u00f3digo fonte do projeto;</li> <li>Link para todos os reposit\u00f3rios utilizados;</li> <li>Destaques para os bottlenecks implementados (ao menos 2 por indiv\u00edduo);</li> <li>Apresenta\u00e7\u00e3o do projeto;</li> <li>V\u00eddeo de apresenta\u00e7\u00e3o do projeto (2-3 minutos);</li> </ul> <p>Um template de documenta\u00e7\u00e3o pode ser encontrado em Template de Documenta\u00e7\u00e3o.</p>"},{"location":"exercises/exercise4/","title":"4. Jenkins","text":"<p>Now, it is time to create a pipeline to deploy the application to a cloud provider. You can use any cloud provider you prefer, such as AWS, Azure, or Google Cloud Platform. The pipeline should include the following steps:</p> <ol> <li>SCM</li> <li>Dependencies</li> <li>Build</li> <li>Push to Docker Hub</li> <li>Deploy to K8s</li> </ol> <p>TO DO</p> <p>All microservices should be deployed in the same cluster, to do this, it is mandatory to user Jenkinsfile in each microservice. The pipeline should be created in the root of the project, and it should include all microservices:</p> <ul> <li><code>account-service</code>;</li> <li><code>auth-service</code>;</li> <li><code>gateway-service</code>;</li> <li><code>product-service</code>, and;</li> <li><code>order-service</code>.</li> </ul> <p>A basic directory structure for the project is as follows:</p> <pre><code>.\n\u251c\u2500\u2500 account-service\n\u2502   \u251c\u2500\u2500 Jenkinsfile\n\u2502   \u2514\u2500\u2500 ...\n</code></pre> <p>Example of a Jenkinsfile for the <code>account-service</code>:</p> Jenkinsfile <pre><code>pipeline {\n    agent any\n    environment {\n        SERVICE = 'account'\n        NAME = \"humbertosandmann/${env.SERVICE}\"\n    }\n    stages {\n        stage('Dependecies') {\n            steps {\n                build job: 'account', wait: true\n            }\n        }\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }      \n        stage('Build &amp; Push Image') {\n            steps {\n                withCredentials([usernamePassword(\n                    credentialsId: 'dockerhub-credential',\n                    usernameVariable: 'USERNAME',\n                    passwordVariable: 'TOKEN')])\n                {\n                    sh \"docker login -u $USERNAME -p $TOKEN\"\n                    sh \"docker buildx create --use --platform=linux/arm64,linux/amd64 --node multi-platform-builder-${env.SERVICE} --name multi-platform-builder-${env.SERVICE}\"\n                    sh \"docker buildx build --platform=linux/arm64,linux/amd64 --push --tag ${env.NAME}:latest --tag ${env.NAME}:${env.BUILD_ID} -f Dockerfile .\"\n                    sh \"docker buildx rm --force multi-platform-builder-${env.SERVICE}\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>Entrega</p> <p>Individualmente, cada aluno deve criar um reposit\u00f3rio no GitHub, com a documenta\u00e7\u00e3o em MkDocs dos exerc\u00edcios realizados e tamb\u00e9m com o projeto e entrega o link via BlabkBoard. Na documenta\u00e7\u00e3o publicada deve constar:</p> <ul> <li>Nome do aluno e grupo;</li> <li>Documenta\u00e7\u00e3o das atividades realizadas;</li> <li>C\u00f3digo fonte das atividades realizadas;</li> <li>Documenta\u00e7\u00e3o do projeto;</li> <li>C\u00f3digo fonte do projeto;</li> <li>Link para todos os reposit\u00f3rios utilizados;</li> <li>Destaques para os bottlenecks implementados (ao menos 2 por indiv\u00edduo);</li> <li>Apresenta\u00e7\u00e3o do projeto;</li> <li>V\u00eddeo de apresenta\u00e7\u00e3o do projeto (2-3 minutos);</li> </ul> <p>Um template de documenta\u00e7\u00e3o pode ser encontrado em Template de Documenta\u00e7\u00e3o.</p>"},{"location":"exercises/exercise5/","title":"5. MiniKube","text":"<p>Kubernetes should be installed and running on your local machine. You can use Minikube or Kind for this purpose. If you are using Docker Desktop, make sure Kubernetes is enabled in the settings.</p> <p>TO DO</p> <p>All microservices should be published in the same kubernetes cluster. Create the setup files for each microservice in the root of the project, eg.:</p> <pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 account-service/\n    \u2514\u2500\u2500 \ud83d\udcc1 k8s/\n        \u2514\u2500\u2500 \ud83d\udcc4 k8s.yaml\n</code></pre> <p>Where <code>k8s.yaml</code> is the setup file for the microservice. The setup file should include the following resources:</p> <ul> <li><code>Secrets</code>;</li> <li><code>ConfigMap</code>;</li> <li><code>Deployment</code>, and;</li> <li><code>Service</code>.</li> </ul> <p>The setup file should be created in the root of the project, and it should include all microservices:</p> <ul> <li><code>account-service</code>;</li> <li><code>auth-service</code>;</li> <li><code>gateway-service</code>;</li> <li><code>product-service</code>, and;</li> <li><code>order-service</code>.</li> </ul> <p>Execute the all services in the same cluster, and make sure they are running. You can use the following command to check if the services are running. You can user local kubernetes or a cloud provider, such as AWS, Azure, or Google Cloud Platform. Evidence the services are running in the same cluster using a video.</p> <p>Entrega</p> <p>Individualmente, cada aluno deve criar um reposit\u00f3rio no GitHub, com a documenta\u00e7\u00e3o em MkDocs dos exerc\u00edcios realizados e tamb\u00e9m com o projeto e entrega o link via BlabkBoard. Na documenta\u00e7\u00e3o publicada deve constar:</p> <ul> <li>Nome do aluno e grupo;</li> <li>Documenta\u00e7\u00e3o das atividades realizadas;</li> <li>C\u00f3digo fonte das atividades realizadas;</li> <li>Documenta\u00e7\u00e3o do projeto;</li> <li>C\u00f3digo fonte do projeto;</li> <li>Link para todos os reposit\u00f3rios utilizados;</li> <li>Destaques para os bottlenecks implementados (ao menos 2 por indiv\u00edduo);</li> <li>Apresenta\u00e7\u00e3o do projeto;</li> <li>V\u00eddeo de apresenta\u00e7\u00e3o do projeto (2-3 minutos);</li> </ul> <p>Um template de documenta\u00e7\u00e3o pode ser encontrado em Template de Documenta\u00e7\u00e3o.</p>"},{"location":"exercises/bottlenecks/bottlenecks/","title":"Bottlenecks","text":"<p>To deliver a high-performance application, you need to identify and address potential bottlenecks in your system. This document outlines some common bottlenecks and how to mitigate them.</p>"},{"location":"exercises/bottlenecks/bottlenecks/#caching","title":"Caching","text":"<p>In-memory databases are a great way to improve the performance of your application. They can be used to store frequently accessed data, reducing the need to query the database for every request. Exemples of in-memory databases include Redis and Memcached.</p>"},{"location":"exercises/bottlenecks/bottlenecks/#observability","title":"Observability","text":"<p>Observability is the ability to measure and understand the internal state of a system based on its external outputs. It is essential for identifying and diagnosing performance issues in your application. Tools like Prometheus and Grafana can help you monitor your application's performance and identify bottlenecks.</p> <ul> <li> <p>Set Up Prometheus and Grafana for Spring Boot Monitoring</p> </li> <li> <p>Monitor a Spring Boot App Using Prometheus</p> </li> <li> <p></p> </li> </ul> <p>Spring + Prometheus + Grafana</p> <p>This tip provides a basic configuration for integrating Spring Boot with Prometheus and Grafana for monitoring purposes.</p> 1. pom.xml2. application.yaml3. compose.yaml4. prometheus.yaml5. Grafana to Prometheus6. Access Grafana <p>Add the following dependencies to your <code>pom.xml</code> file:</p> <pre><code>&lt;!-- Metrics for usage --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;!-- Export to Prometheus format --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;io.micrometer&lt;/groupId&gt;\n    &lt;artifactId&gt;micrometer-registry-prometheus&lt;/artifactId&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Configure the <code>application.yaml</code> file to enable the actuator and Prometheus endpoint:</p> <pre><code>management:\nendpoint:\n    gateway:\n    enabled: true\nendpoints:\n    web:\n    base-path: /gateway/actuator\n    exposure:\n        include: [ 'prometheus', 'gateway' ]    \n</code></pre> <p>Include into the <code>compose.yaml</code> file to set up Prometheus and Grafana:</p> <pre><code>prometheus:\n    image: prom/prometheus:latest\n    hostname: prometheus\n    ports:\n    - 9090:9090\n    volumes:\n    - $VOLUME/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml\n\ngrafana:\n    image: grafana/grafana-enterprise\n    hostname: grafana\n    ports:\n    - 3000:3000\n    environment:\n    - GF_SECURITY_ADMIN_PASSWORD=admin\n    volumes:\n    - $VOLUME/grafana:/var/lib/grafana\n    - $VOLUME/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources      \n    restart: always\n    depends_on:\n    - prometheus\n</code></pre> <p>Connect Prometheus to your Spring Boot application by creating a <code>prometheus.yaml</code> file:</p> <pre><code>scrape_configs:\n\n- job_name: 'GatewayMetrics'\n    metrics_path: '/gateway/actuator/prometheus'\n    scrape_interval: 1s\n    static_configs:\n    - targets:\n        - gateway:8080\n        labels:\n        application: 'Gateway Application'\n\n- job_name: 'AuthMetrics'\n    metrics_path: '/auth/actuator/prometheus'\n    scrape_interval: 1s\n    static_configs:\n    - targets:\n        - auth:8080\n        labels:\n        application: 'Auth Application'\n\n# - job_name: 'AccountMetrics'\n#   metrics_path: '/account/actuator/prometheus'\n#   scrape_interval: 1s\n#   static_configs:\n#     - targets:\n#       - account:8080\n#       labels:\n#         application: 'Account Application'\n\n# - job_name: 'ProductMetrics'\n#   metrics_path: '/product/actuator/prometheus'\n#   scrape_interval: 1s\n#   static_configs:\n#     - targets:\n#       - product:8080\n#       labels:\n#         application: 'Product Application'\n\n# - job_name: 'OrderMetrics'\n#   metrics_path: '/order/actuator/prometheus'\n#   scrape_interval: 1s\n#   static_configs:\n#     - targets:\n#       - order:8080\n#       labels:\n#         application: 'Order Application'\n</code></pre> <p>To connect Grafana to Prometheus, create a <code>datasource.yaml</code> file in the <code>provisioning/datasources</code> directory:</p> <pre><code>apiVersion: 1\n\ndatasources:\n- name: Prometheus\n    type: prometheus\n    access: proxy\n    url: http://prometheus:9090\n    isDefault: true\n</code></pre> <p>After starting the containers and binding the ports to your local machine, you can access Grafana at <code>http://localhost:3000</code> with the default username <code>admin</code> and password <code>admin</code>. You can then create or import dashboards to visualize the metrics collected from your Spring Boot application.</p> <p>For more information on how to create dashboards in Grafana, refer to the Grafana documentation.</p>"},{"location":"exercises/bottlenecks/bottlenecks/#messaging","title":"Messaging","text":"<p>Message queues are a great way to decouple your application and improve its performance. They can be used to handle asynchronous tasks, such as sending emails or processing background jobs. Examples of message queues include RabbitMQ and Apache Kafka.</p>"},{"location":"exercises/bottlenecks/bottlenecks/#load-balancing","title":"Load Balancing","text":"<p>Load balancing is the process of distributing incoming network traffic across multiple servers. This helps to ensure that no single server is overwhelmed with requests, improving the overall performance and reliability of your application. Tools like Nginx and HAProxy can help you implement load balancing in your application.</p> <ul> <li>How To Configure Nginx as a Reverse Proxy on Ubuntu</li> <li></li> </ul>"},{"location":"exercises/bottlenecks/bottlenecks/#vulnerability-scanning","title":"Vulnerability Scanning","text":"<p>Vulnerability scanning is the process of identifying and addressing security vulnerabilities in your application. Tools like OWASP ZAP and Snyk can help you identify potential security issues in your code and dependencies.</p> <p>Entrega</p> <p>Individualmente, cada aluno deve criar um reposit\u00f3rio no GitHub, com a documenta\u00e7\u00e3o em MkDocs dos exerc\u00edcios realizados e tamb\u00e9m com o projeto e entrega o link via BlabkBoard. Na documenta\u00e7\u00e3o publicada deve constar:</p> <ul> <li>Nome do aluno e grupo;</li> <li>Documenta\u00e7\u00e3o das atividades realizadas;</li> <li>C\u00f3digo fonte das atividades realizadas;</li> <li>Documenta\u00e7\u00e3o do projeto;</li> <li>C\u00f3digo fonte do projeto;</li> <li>Link para todos os reposit\u00f3rios utilizados;</li> <li>Destaques para os bottlenecks implementados (ao menos 2 por indiv\u00edduo);</li> <li>Apresenta\u00e7\u00e3o do projeto;</li> <li>V\u00eddeo de apresenta\u00e7\u00e3o do projeto (2-3 minutos);</li> </ul> <p>Um template de documenta\u00e7\u00e3o pode ser encontrado em Template de Documenta\u00e7\u00e3o.</p>"},{"location":"exercises/project/project/","title":"Project","text":"Tarefas Descri\u00e7\u00e3o Peso AWS Configurar AWS 5% EKS Disponibilizar a aplica\u00e7\u00e3o 15% Testes Testes de carga 20% CI/CD Jenkins 10% Custos An\u00e1lise de custos 15% PaaS Plano de uso da plataforma 15% Apresenta\u00e7\u00e3o Storytelling 20%"},{"location":"exercises/project/project/#configuracao-do-aws","title":"Configura\u00e7\u00e3o do AWS","text":"<p>A AWS \u00e9 uma plataforma de computa\u00e7\u00e3o em nuvem que oferece uma ampla gama de servi\u00e7os, incluindo computa\u00e7\u00e3o, armazenamento, banco de dados, an\u00e1lise, rede, mobilidade, ferramentas de desenvolvedor, gerenciamento e seguran\u00e7a. Para configurar a AWS, voc\u00ea precisar\u00e1 criar uma conta e configurar os servi\u00e7os necess\u00e1rios para o seu projeto.</p> Roadmap <p>This roudmap is not complete and may not cover all the steps you need to take to configure your AWS environment. It is a good start to help you understand the steps you need to take to configure your AWS environment. You can find more information about each step in the AWS documentation.</p> <p>Create an AWS account and configure the AWS CLI. You can use the AWS CLI to manage your AWS services from the command line.</p> 1. Create User2. Loggin at AWS Dashboard3. Create Access Key4. Configure AWS CLI <p> </p> <p>Loggin at the AWS Dashboard with the created user.</p> <p> </p> <p>AWS CLI</p>"},{"location":"exercises/project/project/#configuracao-do-eks","title":"Configura\u00e7\u00e3o do EKS","text":"<p>O Amazon Elastic Kubernetes Service (EKS) \u00e9 um servi\u00e7o gerenciado que facilita a execu\u00e7\u00e3o do Kubernetes na AWS sem a necessidade de instalar e operar seu pr\u00f3prio plano de controle ou n\u00f3s de trabalho do Kubernetes. O EKS cuida da alta disponibilidade e escalabilidade do plano de controle do Kubernetes, permitindo que voc\u00ea se concentre em implantar e gerenciar seus aplicativos.</p> <ul> <li>EKS</li> </ul> <p>Custo de Uso</p> <p>O custo de uso do EKS pode variar dependendo da regi\u00e3o e dos servi\u00e7os utilizados. \u00c9 importante monitorar os custos e otimizar o uso dos recursos para evitar surpresas na fatura. Voc\u00ea pode usar a calculadora de pre\u00e7os da AWS para estimar os custos do seu projeto.</p> <p>CUIDADO: o tipo de inst\u00e2ncia EC2 \u00e9 um dos principais fatores que afetam o custo do EKS. Inst\u00e2ncias maiores e mais poderosas custam mais, enquanto inst\u00e2ncias menores e menos poderosas custam menos. Al\u00e9m disso, o uso de recursos adicionais, como armazenamento em bloco e balanceadores de carga, tamb\u00e9m pode aumentar os custos<sup>1</sup>.</p> <p>TO DO</p> <p>Fa\u00e7a um cluster EKS e fa\u00e7a o deploy da aplica\u00e7\u00e3o Spring Boot no cluster. Voc\u00ea pode usar o AWS CLI ou o console da AWS para criar e gerenciar seu cluster EKS.</p> <p>Para implementar a base de dados, voc\u00ea pode usar o Amazon RDS (Relational Database Service) ou o Amazon DynamoDB, dependendo das necessidades do seu projeto. </p> Roadmap <p>This roudmap is not complete and may not cover all the steps you need to take to configure your AWS environment. It is a good start to help you understand the steps you need to take to configure your AWS environment. You can find more information about each step in the AWS documentation.</p> <p>Create an AWS account and configure the AWS CLI. You can use the AWS CLI to manage your AWS services from the command line.</p> 1. Create EKS Role2. Create a VPC3. Create EKS Cluster4. Create a Role for the Node Group5. Define the Node Group6. Access the EKS Cluster <p> </p> <p>Overview of the VPC:</p> <pre><code>flowchart TB\nsubgraph Region\n    direction LR\n    subgraph Zone A\n    direction LR\n    subgraph subpri1[\"Subnet Private\"]\n        direction TB\n        poda1[\"pod 1\"]\n        poda2[\"pod 2\"]\n        poda3[\"pod 3\"]\n    end\n    subgraph subpub1[\"Subnet Public\"]\n        loadbalancea[\"Load Balance\"]\n    end\n    end\n    subgraph Zone B\n    direction LR\n    subgraph subpri2[\"Subnet Private\"]\n        direction TB\n        podb1[\"pod 1\"]\n        podb2[\"pod 2\"]\n        podb3[\"pod 3\"]\n    end\n    subgraph subpub2[\"Subnet Public\"]\n        loadbalanceb[\"Load Balance\"]\n    end\n    end\n    User --&gt; loadbalancea\n    loadbalancea --&gt; poda1\n    loadbalancea --&gt; poda2\n    loadbalancea --&gt; poda3\n    User --&gt; loadbalanceb\n    loadbalanceb --&gt; podb1\n    loadbalanceb --&gt; podb2\n    loadbalanceb --&gt; podb3\nend</code></pre> <p>Create a VPC with the following configuration, including 2 public and 2 private subnets. The public subnets will be used for the load balancers, and the private subnets will be used for the pods. The VPC should be created in the same region as the EKS cluster.</p> <p>To create the VPC, use the AWS CloudFormation with the template file: amazon-eks-vpc-private-subnets.yaml (download it and upload it as a CloudFormation template).</p> <p> </p> <p> </p> <p>Pay Attention</p> <p>The EKS cluster will take a few minutes to be created. You can check the status of the cluster in the AWS console. Once the cluster is created, you can access it using the AWS CLI or kubectl.</p> <p>Notice that there no nodes on cluster also, because only the Control Pane had been created, there is no exist a node for the worker nodes.</p> <p></p> <p>Add Permissions to the role:</p> <ul> <li>AmazonEKS_CNI_Policy</li> <li>AmazonEKSWorkerNodePolicy</li> <li>AmazonEC2ContainerRegistryReadOnly</li> </ul> <p> </p> <p> </p> <p>Define the Configuration of machine type</p> <p></p> <p>Only private subnets:</p> <p></p> <p>AWS CLI</p> <p>On terminal, after that it had been set up the aws cli.</p> <pre><code>aws configure\n</code></pre> <p>See the configuration that was set up:</p> <pre><code>aws configure list\n</code></pre> <p>aws configure list    Name                    Value             Type    Location    ----                    -----             ----    --------profile                &lt;not set&gt;             None    Noneaccess_key     **TTNI shared-credentials-file    secret_key     **zAJ1 shared-credentials-file        region                us-east-2      config-file    ~/.aws/config</p> <p>Set up the kube-config to point to the remote aws eks cluster.</p> <pre><code>aws eks update-kubeconfig --name eks-store\n</code></pre> <p>aws eks update-kubeconfig --name eks-storeAdded new context arn:aws:eks:us-east-2:058264361068:cluster/eks-store to /Users/sandmann/.kube/config&gt;&gt;kubectl get podsNo resources found in default namespace.&gt;&gt;kubectl get nodesNo resources found&gt;</p> <p>Nice commands</p> <pre><code>kubectl config get-contexts\n</code></pre> <pre><code>kubectl config set-context [NAME]\n</code></pre>"},{"location":"exercises/project/project/#testes-de-carga","title":"Testes de Carga","text":"<p>Os testes de carga s\u00e3o uma parte importante do desenvolvimento de software, pois ajudam a garantir que sua aplica\u00e7\u00e3o possa lidar com o tr\u00e1fego esperado. Existem v\u00e1rias ferramentas dispon\u00edveis para realizar testes de carga, incluindo Apache JMeter, Gatling e Locust.</p> <p>Kubernetes - HPA - Increase the load</p> <p>TO DO</p> <p>Fa\u00e7a um teste de carga na sua aplica\u00e7\u00e3o Spring Boot. Grave um video do teste de carga, mostrando: - O teste de carga em execu\u00e7\u00e3o; - HPA (Horizontal Pod Autoscaler) em execu\u00e7\u00e3o;</p>"},{"location":"exercises/project/project/#cicd","title":"CI/CD","text":"<p>A integra\u00e7\u00e3o cont\u00ednua (CI) e a entrega cont\u00ednua (CD) s\u00e3o pr\u00e1ticas de desenvolvimento de software que ajudam a garantir que seu c\u00f3digo esteja sempre em um estado implant\u00e1vel. O Jenkins \u00e9 uma ferramenta popular para implementar CI/CD em seus projetos.</p> <p>TO DO</p> <p>Complemente seu pipeline de CI/CD de forma que ap\u00f3s o push da imagem no Docker Hub, o Jenkins fa\u00e7a o deploy da imagem no EKS.</p>"},{"location":"exercises/project/project/#custos","title":"Custos","text":"<p>A an\u00e1lise de custos \u00e9 uma parte importante do desenvolvimento de software, pois ajuda a garantir que seu projeto esteja dentro do or\u00e7amento. Existem v\u00e1rias ferramentas dispon\u00edveis para ajudar na an\u00e1lise de custos, incluindo o AWS Cost Explorer<sup>2</sup> e o AWS Budgets<sup>3</sup>.</p> <p>TO DO</p> <p>Monte um plano de custos para o seu projeto, incluindo os custos de uso do EKS, RDS e outros servi\u00e7os da AWS que voc\u00ea est\u00e1 utilizando. Use a calculadora de pre\u00e7os da AWS para estimar os custos do seu projeto.</p>"},{"location":"exercises/project/project/#paas","title":"PaaS","text":"<p>A plataforma como servi\u00e7o (PaaS) \u00e9 um modelo de computa\u00e7\u00e3o em nuvem que fornece uma plataforma para desenvolver, executar e gerenciar aplicativos sem a complexidade de construir e manter a infraestrutura normalmente associada ao desenvolvimento e lan\u00e7amento de aplicativos.</p> <p></p> <p>TO DO</p> <p>Descreva onde seu grupo utilizou PaaS e como utilizou.</p>"},{"location":"exercises/project/project/#apresentacao","title":"Apresenta\u00e7\u00e3o","text":"<p>A apresenta\u00e7\u00e3o do seu projeto \u00e9 uma parte importante do processo de desenvolvimento de software. \u00c9 a oportunidade de mostrar seu trabalho e explicar como sua aplica\u00e7\u00e3o funciona. Use ferramentas como o PowerPoint ou o Google Slides para criar uma apresenta\u00e7\u00e3o visualmente atraente. Se poss\u00edvel, fa\u00e7a uma demonstra\u00e7\u00e3o ao vivo da sua aplica\u00e7\u00e3o para mostrar como ela funciona na pr\u00e1tica, assim bem como um v\u00eddeo de apresenta\u00e7\u00e3o do projeto.</p> <p>TO DO</p> <p>Crie uma apresenta\u00e7\u00e3o do seu projeto, incluindo os seguintes t\u00f3picos:</p> <ul> <li>Introdu\u00e7\u00e3o ao projeto;</li> <li>Arquitetura do projeto;</li> <li>Demonstra\u00e7\u00e3o da aplica\u00e7\u00e3o;</li> <li>Desafios enfrentados - bottlenecks;</li> <li>Conclus\u00e3o e pr\u00f3ximos passos.</li> </ul> <p>O v\u00eddeo de apresenta\u00e7\u00e3o deve ter entre 2 e 3 minutos e deve ser enviado junto com a documenta\u00e7\u00e3o do projeto.</p> <p>Video de Apresenta\u00e7\u00e3o</p> <p>Excepcionalmente, nesta edi\u00e7\u00e3o do curso, a apresenta\u00e7\u00e3o do projeto ser\u00e1 feita atrav\u00e9s de um v\u00eddeo de 3 a 5 minutos, onde cada grupo deve apresentar o projeto e os bottlenecks implementados. O v\u00eddeo deve ser enviado junto com a documenta\u00e7\u00e3o do projeto.</p> <p>Entrega</p> <p>Individualmente, cada aluno deve criar um reposit\u00f3rio no GitHub, com a documenta\u00e7\u00e3o em MkDocs dos exerc\u00edcios realizados e tamb\u00e9m com o projeto e entrega o link via BlabkBoard. Na documenta\u00e7\u00e3o publicada deve constar:</p> <ul> <li>Nome do aluno e grupo;</li> <li>Documenta\u00e7\u00e3o das atividades realizadas;</li> <li>C\u00f3digo fonte das atividades realizadas;</li> <li>Documenta\u00e7\u00e3o do projeto;</li> <li>C\u00f3digo fonte do projeto;</li> <li>Link para todos os reposit\u00f3rios utilizados;</li> <li>Destaques para os bottlenecks implementados (ao menos 2 por indiv\u00edduo);</li> <li>Apresenta\u00e7\u00e3o do projeto;</li> <li>V\u00eddeo de apresenta\u00e7\u00e3o do projeto (2-3 minutos);</li> </ul> <p>Um template de documenta\u00e7\u00e3o pode ser encontrado em Template de Documenta\u00e7\u00e3o.</p> <ol> <li> <p>AWS Pricing Calculator \u21a9</p> </li> <li> <p>AWS Cost Explorer \u21a9</p> </li> <li> <p>AWS Budgets \u21a9</p> </li> </ol>"},{"location":"handout/architecture/","title":"Architecture","text":""},{"location":"handout/architecture/#clean-architecture","title":"Clean Architecture","text":"<p>Total desacoplamento das regras de neg\u00f3cios das camadas de interface:</p> <p> </p> Source: The Clean Code Blog <p>Em nossa arquitetura:</p> <pre><code>flowchart LR\n  subgraph Controller\n    direction TB\n    Interface:::adapter\n    RecordIn:::adapter\n    RecordOut:::adapter\n  end\n  subgraph Case\n    direction TB\n    Service:::case\n    DTO:::case\n  end\n  subgraph Entity\n    direction TB\n    Repository:::entity\n    Table:::entity\n  end\n\n  Interface --&gt; RecordIn\n  Interface --&gt; RecordOut\n\n  Controller &lt;--&gt; parser[\"Parser\"] &lt;--&gt; Case\n\n  Service --&gt; DTO\n\n  Case &lt;--&gt; mapper[\"Mapper\"] &lt;--&gt; Entity\n\n  Repository --&gt; Table\n\n  classDef adapter fill:#6f6\n  classDef case fill:#f99\n  classDef entity fill:#ff9\n</code></pre>"},{"location":"handout/architecture/#referencias","title":"Refer\u00eancias:","text":"<ol> <li> <p> Criando um projeto Spring Boot com Arquitetura Limpa by Giuliana Silva Bezerra</p> <p> \u21a9</p> </li> <li> <p> Clean Architecture: A Craftsman's Guide to Software Structure and Design \u21a9</p> </li> <li> <p> Como se faz DevOps: Organizando pessoas, dos silos aos times de plataforma \u21a9</p> </li> </ol>"},{"location":"handout/business/","title":"Business","text":""},{"location":"handout/business/#compromissos-e-contratos","title":"Compromissos e Contratos","text":"<p>SLI significa Service Level Indicator, ou Indicador de N\u00edvel de Servi\u00e7o. S\u00e3o m\u00e9tricas quantitativas que medem a qualidade de um servi\u00e7o. Por exemplo, se o SLA especificar que os sistemas v\u00e3o estar dispon\u00edveis 99,95% do tempo, o SLI \u00e9 a medi\u00e7\u00e3o real da disponibilidade.</p> <p>SLO significa Service Level Objective, ou Objetivo de N\u00edvel de Servi\u00e7o. S\u00e3o metas espec\u00edficas de desempenho que uma equipe de SRE define para cumprir os requisitos do SLA.</p> <p>SLA significa Service Level Agreement, ou Acordo de N\u00edvel de Servi\u00e7o. \u00c9 um acordo entre a empresa e o cliente acerca do servi\u00e7o contratado. Por exemplo, se assinamos com o cliente que vamos manter ativo o seu ecommerce durante pelo menos 99,99% do tempo do m\u00eas, isso quer dizer que o m\u00e1ximo de tempo que a p\u00e1gina pode estar inacess\u00edvel durante o m\u00eas ser\u00e1 4 minutos e 19 segundos.</p> <p></p> <pre><code>\nflowchart LR\nsubgraph \"SLI\"\n  a(\"M\u00e9tricas\")\nend\nsubgraph \"SLO\"\n  b(\"Objetivos\")\nend\nsubgraph \"SLA\"\n  c(\"Promessas\")\nend\n\n\nSLI --&gt; SLO --&gt; SLA --&gt; SLI</code></pre>"},{"location":"handout/business/#cicd-continuous-integration-and-continuous-delivery","title":"CI/CD - Continuous Integration and Continuous Delivery","text":"<p>CI/CD \u00e9 uma abordagem pr\u00e1tica e \u00e1gil para o desenvolvimento de software que combina duas pr\u00e1ticas: Integra\u00e7\u00e3o Cont\u00ednua (CI) e Entrega Cont\u00ednua/Implanta\u00e7\u00e3o Cont\u00ednua (CD). Esses processos automatizam a constru\u00e7\u00e3o, teste e implanta\u00e7\u00e3o de aplica\u00e7\u00f5es, facilitando um ciclo de desenvolvimento mais r\u00e1pido e confi\u00e1vel.</p>"},{"location":"handout/business/#conceito-de-cicd","title":"Conceito de CI/CD","text":"<ol> <li>Integra\u00e7\u00e3o Cont\u00ednua (CI):</li> <li>Objetivo: Automatizar a integra\u00e7\u00e3o de c\u00f3digo de m\u00faltiplos desenvolvedores em um reposit\u00f3rio central v\u00e1rias vezes ao dia.</li> <li>Processo: Sempre que um desenvolvedor faz commit de c\u00f3digo em um reposit\u00f3rio, um servidor de CI automaticamente verifica e testa o novo c\u00f3digo para detectar problemas rapidamente.</li> <li> <p>Ferramentas Comuns: Jenkins, Travis CI, CircleCI, GitLab CI/CD.</p> </li> <li> <p>Entrega Cont\u00ednua (CD - Continuous Delivery):</p> </li> <li>Objetivo: Automatizar a entrega de c\u00f3digo para um ambiente de produ\u00e7\u00e3o de maneira segura e r\u00e1pida.</li> <li>Processo: Ap\u00f3s a fase de integra\u00e7\u00e3o cont\u00ednua, o c\u00f3digo \u00e9 preparado para a produ\u00e7\u00e3o atrav\u00e9s de uma s\u00e9rie de testes automatizados. O c\u00f3digo est\u00e1 sempre pronto para ser implantado com um simples clique ou comando.</li> <li> <p>Ferramentas Comuns: Jenkins, GitLab CI/CD, Bamboo.</p> </li> <li> <p>Implanta\u00e7\u00e3o Cont\u00ednua (CD - Continuous Deployment):</p> </li> <li>Objetivo: Automatizar a implanta\u00e7\u00e3o de c\u00f3digo diretamente em produ\u00e7\u00e3o sem interven\u00e7\u00e3o manual.</li> <li>Processo: Ap\u00f3s passar por todos os testes, o c\u00f3digo \u00e9 automaticamente implantado em produ\u00e7\u00e3o. Isso requer um alto n\u00edvel de confian\u00e7a nos testes automatizados.</li> <li>Ferramentas Comuns: Jenkins, GitLab CI/CD, Spinnaker.</li> </ol>"},{"location":"handout/business/#vantagens-do-cicd","title":"Vantagens do CI/CD","text":"<ol> <li>Detec\u00e7\u00e3o Precoce de Problemas: Integra\u00e7\u00e3o cont\u00ednua ajuda a detectar e corrigir problemas rapidamente.</li> <li>Entrega R\u00e1pida: Automatiza\u00e7\u00e3o da entrega permite que novas funcionalidades e corre\u00e7\u00f5es cheguem aos usu\u00e1rios mais rapidamente.</li> <li>Qualidade e Confiabilidade: Testes automatizados garantem que o c\u00f3digo est\u00e1 funcionando conforme esperado antes de ser implantado.</li> <li>Feedback R\u00e1pido: Desenvolvedores recebem feedback r\u00e1pido sobre o estado do c\u00f3digo, facilitando um desenvolvimento mais \u00e1gil e iterativo.</li> <li>Automa\u00e7\u00e3o: Reduz o trabalho manual, minimizando erros humanos e aumentando a efici\u00eancia.</li> </ol>"},{"location":"handout/business/#conclusao","title":"Conclus\u00e3o","text":"<p>CI/CD \u00e9 uma pr\u00e1tica essencial no desenvolvimento moderno de software, promovendo automa\u00e7\u00e3o, rapidez e confiabilidade nos processos de integra\u00e7\u00e3o, teste e implanta\u00e7\u00e3o de aplica\u00e7\u00f5es. Utilizando ferramentas como Jenkins, GitLab CI/CD e outras, equipes de desenvolvimento podem entregar software de alta qualidade de forma cont\u00ednua e eficiente.</p> <p> </p> Source: Wikipedia - Devops"},{"location":"handout/business/#iac-infrastructure-as-code","title":"IaC - Infrastructure as Code","text":"<p>IaC, ou \"Infrastructure as Code\" (Infraestrutura como C\u00f3digo), \u00e9 uma abordagem para gerenciar e provisionar a infraestrutura de TI atrav\u00e9s de arquivos de configura\u00e7\u00e3o leg\u00edveis por humanos, em vez de processos manuais. Esta pr\u00e1tica permite automatizar a configura\u00e7\u00e3o de infraestrutura, tornando-a mais eficiente, replic\u00e1vel e gerenci\u00e1vel.</p>"},{"location":"handout/business/#conceito-de-iac","title":"Conceito de IaC","text":"<p>Em vez de configurar manualmente servidores, redes, e outros componentes de infraestrutura, voc\u00ea escreve c\u00f3digo para definir e gerenciar essas configura\u00e7\u00f5es. Esse c\u00f3digo pode ser armazenado em sistemas de controle de vers\u00e3o, revisado, testado e aplicado de maneira consistente.</p>"},{"location":"handout/business/#ferramentas-comuns-de-iac","title":"Ferramentas Comuns de IaC","text":"<ol> <li>Terraform: Uma ferramenta de c\u00f3digo aberto que permite definir a infraestrutura em um arquivo de configura\u00e7\u00e3o usando o HashiCorp Configuration Language (HCL) ou JSON.</li> <li>AWS CloudFormation: Um servi\u00e7o da Amazon Web Services que permite modelar e configurar recursos da AWS.</li> <li>Ansible: Uma ferramenta que pode automatizar o provisionamento de infraestrutura, al\u00e9m de gerenciamento de configura\u00e7\u00e3o e implanta\u00e7\u00e3o de aplica\u00e7\u00f5es.</li> </ol>"},{"location":"handout/business/#vantagens-do-iac","title":"Vantagens do IaC","text":"<ol> <li>Consist\u00eancia: A infraestrutura \u00e9 provisionada de forma consistente cada vez que o c\u00f3digo \u00e9 executado.</li> <li>Reprodutibilidade: F\u00e1cil de replicar ambientes, como desenvolvimento, teste e produ\u00e7\u00e3o.</li> <li>Controle de Vers\u00e3o: As configura\u00e7\u00f5es de infraestrutura podem ser versionadas e auditadas, assim como o c\u00f3digo de aplica\u00e7\u00e3o.</li> <li>Automa\u00e7\u00e3o: Reduz o erro humano e aumenta a velocidade ao automatizar tarefas repetitivas.</li> <li>Documenta\u00e7\u00e3o: O pr\u00f3prio c\u00f3digo serve como documenta\u00e7\u00e3o da infraestrutura.</li> </ol>"},{"location":"handout/business/#conclusao_1","title":"Conclus\u00e3o","text":"<p>IaC transforma a gest\u00e3o de infraestrutura, permitindo uma abordagem mais \u00e1gil, escal\u00e1vel e segura. Usando ferramentas como Terraform, CloudFormation ou Ansible, equipes podem definir, gerenciar e versionar a infraestrutura de maneira eficiente e confi\u00e1vel.</p>"},{"location":"handout/business/#iaas-infrastructure-as-a-service","title":"IaaS - Infrastructure as a Service","text":"<p>IaaS, ou \"Infrastructure as a Service\" (Infraestrutura como Servi\u00e7o), \u00e9 um modelo de servi\u00e7o de computa\u00e7\u00e3o em nuvem que oferece recursos computacionais fundamentais como servidores virtuais, armazenamento, e redes, sob demanda, na internet. Esses recursos s\u00e3o escal\u00e1veis e gerenciados por um provedor de servi\u00e7os, permitindo que as empresas evitem o custo e a complexidade de comprar e gerenciar a pr\u00f3pria infraestrutura f\u00edsica.</p>"},{"location":"handout/business/#conceito-de-iaas","title":"Conceito de IaaS","text":"<p>Com IaaS, os usu\u00e1rios podem alugar recursos de computa\u00e7\u00e3o, como m\u00e1quinas virtuais, armazenamento, e redes, e pagar somente pelo que utilizam. Esse modelo oferece flexibilidade, escalabilidade e efici\u00eancia, permitindo que as empresas foquem em suas aplica\u00e7\u00f5es e servi\u00e7os em vez de gerenciar a infraestrutura subjacente.</p>"},{"location":"handout/business/#provedores-comuns-de-iaas","title":"Provedores Comuns de IaaS","text":"<ol> <li>Amazon Web Services (AWS): Oferece servi\u00e7os como EC2 (Elastic Compute Cloud), S3 (Simple Storage Service), e VPC (Virtual Private Cloud).</li> <li>Microsoft Azure: Oferece servi\u00e7os como Azure Virtual Machines, Azure Blob Storage, e Virtual Networks.</li> <li>Google Cloud Platform (GCP): Oferece servi\u00e7os como Compute Engine, Cloud Storage, e Virtual Private Cloud.</li> </ol>"},{"location":"handout/business/#vantagens-do-iaas","title":"Vantagens do IaaS","text":"<ol> <li>Escalabilidade: Capacidade de aumentar ou diminuir recursos rapidamente conforme a demanda.</li> <li>Custo-Efetivo: Pague apenas pelos recursos que utiliza, sem necessidade de grandes investimentos iniciais em hardware.</li> <li>Flexibilidade: Escolha e configure recursos conforme suas necessidades espec\u00edficas.</li> <li>Redu\u00e7\u00e3o de Tempo: Rapidamente provisiona e deprovisiona recursos, acelerando a implementa\u00e7\u00e3o de novos projetos.</li> <li>Gerenciamento: O provedor de IaaS gerencia a infraestrutura f\u00edsica, enquanto voc\u00ea gerencia apenas os recursos alocados.</li> </ol>"},{"location":"handout/business/#conclusao_2","title":"Conclus\u00e3o","text":"<p>IaaS oferece uma solu\u00e7\u00e3o poderosa e flex\u00edvel para organiza\u00e7\u00f5es que precisam de infraestrutura computacional robusta sem o \u00f4nus de gerenciar hardware f\u00edsico. Provedores como AWS, Azure, e GCP facilitam o provisionamento e gerenciamento de servidores, armazenamento e redes, permitindo que as empresas se concentrem no desenvolvimento e opera\u00e7\u00e3o de suas aplica\u00e7\u00f5es e servi\u00e7os.</p>"},{"location":"handout/business/#paas-platform-as-a-service","title":"PaaS - Platform as a Service","text":"<p>PaaS, ou \"Platform as a Service\" (Plataforma como Servi\u00e7o), \u00e9 um modelo de servi\u00e7o de computa\u00e7\u00e3o em nuvem que fornece uma plataforma permitindo que os clientes desenvolvam, executem e gerenciem aplica\u00e7\u00f5es sem a complexidade de construir e manter a infraestrutura normalmente associada ao desenvolvimento e ao lan\u00e7amento de uma aplica\u00e7\u00e3o.</p>"},{"location":"handout/business/#exemplo-de-paas","title":"Exemplo de PaaS","text":"<p>Imagine que voc\u00ea \u00e9 um desenvolvedor de software e deseja criar um aplicativo web.</p> <p>Sem PaaS</p> <ul> <li>Configura\u00e7\u00e3o do Servidor: Voc\u00ea precisaria comprar servidores f\u00edsicos ou m\u00e1quinas virtuais para hospedar sua aplica\u00e7\u00e3o.</li> <li>Instala\u00e7\u00e3o do Sistema Operacional: Configurar o sistema operacional nos servidores.</li> <li>Configura\u00e7\u00e3o de Redes e Seguran\u00e7a: Configurar redes, firewalls, e garantir a seguran\u00e7a da aplica\u00e7\u00e3o.</li> <li>Banco de Dados: Instalar e gerenciar o banco de dados.</li> <li>Manuten\u00e7\u00e3o: Monitorar e manter o sistema, aplicando patches de seguran\u00e7a e atualiza\u00e7\u00f5es.</li> </ul> <p>Com PaaS</p> <ul> <li>Escolha da Plataforma: Voc\u00ea escolhe uma plataforma PaaS, como Google App Engine, Microsoft Azure, ou Heroku.</li> <li>Desenvolvimento da Aplica\u00e7\u00e3o: Foca apenas no desenvolvimento do c\u00f3digo da aplica\u00e7\u00e3o.</li> <li>Desdobramento: Sobe (deploy) o c\u00f3digo para a plataforma PaaS.</li> <li>Gest\u00e3o e Escalabilidade: A plataforma cuida automaticamente da hospedagem, seguran\u00e7a, balanceamento de carga, escalabilidade, e manuten\u00e7\u00e3o.</li> </ul>"},{"location":"handout/business/#vantagens-do-paas","title":"Vantagens do PaaS","text":"<ul> <li>Redu\u00e7\u00e3o de Complexidade: Voc\u00ea n\u00e3o precisa se preocupar com a infraestrutura subjacente.</li> <li>Escalabilidade: F\u00e1cil de escalar sua aplica\u00e7\u00e3o conforme a demanda.</li> <li>Foco no Desenvolvimento: Permite focar mais no desenvolvimento da aplica\u00e7\u00e3o e menos na gest\u00e3o de servidores.</li> <li>Custo-Efetivo: Geralmente paga-se apenas pelos recursos usados, evitando grandes investimentos iniciais em hardware.</li> </ul>"},{"location":"handout/business/#conclusao_3","title":"Conclus\u00e3o","text":"<p>Em resumo, PaaS permite que desenvolvedores se concentrem em criar e melhorar suas aplica\u00e7\u00f5es sem se preocupar com a infraestrutura necess\u00e1ria para suport\u00e1-las.</p>"},{"location":"handout/business/#paap-platform-as-a-product","title":"PaaP - Platform as a Product","text":"<p>\"PaaP\" significa \"Plataforma como Produto\", um conceito que v\u00ea uma plataforma n\u00e3o apenas como um conjunto de ferramentas ou servi\u00e7os, mas como um produto completo e coeso que fornece uma solu\u00e7\u00e3o abrangente para seus usu\u00e1rios. \u00c9 diferente de Plataforma como Servi\u00e7o (PaaS), que geralmente foca em fornecer a infraestrutura e o ambiente para desenvolver, executar e gerenciar aplica\u00e7\u00f5es. PaaP enfatiza a experi\u00eancia do usu\u00e1rio, a integra\u00e7\u00e3o e o valor entregue ao usu\u00e1rio como um produto unificado.</p>"},{"location":"handout/business/#conceitos-chave-do-paap","title":"Conceitos-Chave do PaaP","text":"<ol> <li> <p>Solu\u00e7\u00e3o de Ponta a Ponta: PaaP fornece uma solu\u00e7\u00e3o completa que cobre todos os aspectos das necessidades do usu\u00e1rio, desde o desenvolvimento e implanta\u00e7\u00e3o at\u00e9 o gerenciamento e escalabilidade. Ele integra v\u00e1rias ferramentas e servi\u00e7os em uma experi\u00eancia cont\u00ednua.</p> </li> <li> <p>Design Centrado no Usu\u00e1rio: A plataforma \u00e9 projetada com foco na experi\u00eancia do usu\u00e1rio. Prioriza a facilidade de uso, interfaces intuitivas e fluxos de trabalho simplificados para garantir que os usu\u00e1rios possam atingir seus objetivos de forma eficiente.</p> </li> <li> <p>Integra\u00e7\u00e3o e Interoperabilidade: Plataformas PaaP frequentemente integram m\u00faltiplos servi\u00e7os e ferramentas, garantindo que eles funcionem juntos de forma harmoniosa. Essa integra\u00e7\u00e3o reduz a complexidade para os usu\u00e1rios, que n\u00e3o precisam gerenciar sistemas diferentes.</p> </li> <li> <p>Entrega de Valor: A plataforma \u00e9 empacotada e comercializada como um produto que entrega proposi\u00e7\u00f5es de valor espec\u00edficas aos seus usu\u00e1rios. \u00c9 projetada para resolver problemas espec\u00edficos ou atender necessidades espec\u00edficas de maneira abrangente.</p> </li> <li> <p>Melhoria Cont\u00ednua: Produtos PaaP s\u00e3o continuamente melhorados com base no feedback dos usu\u00e1rios e nas demandas do mercado. Atualiza\u00e7\u00f5es e aprimoramentos regulares garantem que a plataforma permane\u00e7a relevante e eficaz.</p> </li> </ol>"},{"location":"handout/business/#exemplo-salesforce","title":"Exemplo: Salesforce","text":"<p>O Salesforce \u00e9 um exemplo not\u00e1vel de Plataforma como Produto. Ele oferece uma su\u00edte abrangente de ferramentas para gerenciamento de relacionamento com clientes (CRM), mas vai al\u00e9m de apenas fornecer infraestrutura.</p> <ol> <li> <p>Solu\u00e7\u00e3o de CRM de Ponta a Ponta: O Salesforce fornece ferramentas para vendas, atendimento ao cliente, automa\u00e7\u00e3o de marketing, an\u00e1lises e mais, tudo integrado em uma \u00fanica plataforma.</p> </li> <li> <p>Design Centrado no Usu\u00e1rio: O Salesforce \u00e9 projetado para ser f\u00e1cil de usar, com pain\u00e9is personaliz\u00e1veis, interfaces intuitivas e amplos recursos de suporte.</p> </li> <li> <p>Integra\u00e7\u00e3o e Interoperabilidade: Ele integra com uma ampla gama de aplica\u00e7\u00f5es e servi\u00e7os de terceiros, permitindo que os usu\u00e1rios conectem seu CRM com outras ferramentas que utilizam em seus neg\u00f3cios.</p> </li> <li> <p>Entrega de Valor: O Salesforce \u00e9 comercializado como um produto que ajuda as empresas a gerenciar seus relacionamentos com clientes de forma mais eficaz, melhorar as vendas e aprimorar o atendimento ao cliente.</p> </li> <li> <p>Melhoria Cont\u00ednua: O Salesforce lan\u00e7a regularmente atualiza\u00e7\u00f5es e novos recursos com base no feedback dos usu\u00e1rios e nos avan\u00e7os tecnol\u00f3gicos, garantindo que a plataforma evolua com as necessidades dos usu\u00e1rios.</p> </li> </ol>"},{"location":"handout/business/#beneficios-do-paap","title":"Benef\u00edcios do PaaP","text":"<ol> <li> <p>Experi\u00eancia do Usu\u00e1rio Simplificada: os usu\u00e1rios interagem com uma \u00fanica plataforma unificada, simplificando seu fluxo de trabalho e reduzindo a necessidade de gerenciar m\u00faltiplas ferramentas.</p> </li> <li> <p>Aumento da Produtividade: ferramentas e servi\u00e7os integrados simplificam os processos, levando a uma maior efici\u00eancia e produtividade.</p> </li> <li> <p>Escalabilidade: solu\u00e7\u00f5es PaaP s\u00e3o projetadas para escalar com as necessidades do usu\u00e1rio, facilitando o crescimento sem a necessidade de trocar de plataformas ou ferramentas.</p> </li> <li> <p>Maior Valor: ao fornecer uma solu\u00e7\u00e3o abrangente, PaaP entrega maior valor aos usu\u00e1rios, atendendo suas necessidades de forma mais eficaz do que ferramentas dispersas.</p> </li> <li> <p>Adapta\u00e7\u00e3o Cont\u00ednua: atualiza\u00e7\u00f5es e melhorias regulares garantem que a plataforma permane\u00e7a relevante e \u00fatil \u00e0 medida que as necessidades dos usu\u00e1rios evoluem.</p> </li> </ol>"},{"location":"handout/business/#conclusao_4","title":"Conclus\u00e3o","text":"<p>Plataforma como Produto (PaaP) representa uma abordagem hol\u00edstica para a entrega de solu\u00e7\u00f5es tecnol\u00f3gicas, focando em fornecer produtos completos, integrados e centrados no usu\u00e1rio. Ao combinar as for\u00e7as de v\u00e1rias ferramentas e servi\u00e7os em uma plataforma coesa, PaaP oferece maior valor, simplicidade e efici\u00eancia aos seus usu\u00e1rios. Salesforce \u00e9 um exemplo not\u00e1vel, mas os princ\u00edpios de PaaP podem ser aplicados em diversas ind\u00fastrias e solu\u00e7\u00f5es tecnol\u00f3gicas para criar plataformas mais eficazes e amig\u00e1veis.</p> <ol> <li> <p> Platform Revolution: How Networked Markets Are Transforming the Economy and How to Make Them Work for You \u21a9</p> </li> </ol>"},{"location":"handout/cloud/aws/cli/","title":"Cli","text":""},{"location":"handout/cloud/aws/cli/#setting-up-the-aws-cli","title":"Setting up the AWS Cli","text":"<pre><code>aws configure\n</code></pre> aws configureAWS Access Key ID: ****************5DMGAWS Secret Access Key]: *********************************fhwQtDefault region name [None]: Default output format [None]:  <pre><code>aws sts get-session-token\n</code></pre> aws sts get-session-token{    \"Credentials\": {        \"AccessKeyId\": \"ASIA4MTWJ5HP4RFKVFX2\",        \"SecretAccessKey\": \"RWfqFn9NZRZYEy1a5sFpdUPSd5i03YRer/9+PZ6V\",        \"SessionToken\": \"FwoGZXIvYXdzEJX//////////wEaDIRJrTOKnJTZ/        ZpZGiKCAYnnc+16sxQl/eGYvj998q9u2eFb3VziCgpvNzKAuI/YcthL2XLp2VUXZswaOb5C3BikDENEKVbeH4va32ltJ/1Bm+F/        qkHNE9dTRMOxshV9iwkCe3/4+Sl9O6dZJguglcCq2Yfh+9HDzJxo6WtAd7UiCL6C/        hlcWgRS24IhvbdUDsgoy47qsQYyKNwLwW9ki4w5bmYRM9MVMinufs4LEkVRJGpEmc8        RG3gNaGvnRB0d840=\",        \"Expiration\": \"2024-05-08T07:55:55+00:00\"    }} <pre><code>aws sts get-caller-identity\n</code></pre> aws sts get-caller-identity{    \"UserId\": \"AIDA4MTWJ5HPRUU7R22VG\",    \"Account\": \"851725380063\",    \"Arn\": \"arn:aws:iam::851725380063:user/root\"}"},{"location":"handout/cloud/aws/cli/#reference","title":"Reference","text":"<ul> <li> <p>AWS Command Line Interface Documentation - https://docs.aws.amazon.com/cli/</p> <ul> <li> <p>User Guide - Install AWS Cli</p> <p></p> </li> </ul> </li> </ul>"},{"location":"handout/cloud/aws/eks/","title":"Eks","text":""},{"location":"handout/cloud/aws/eks/#elastic-kubernetes-service","title":"Elastic Kubernetes Service","text":"<p>Never spend your money before you have it, Jefferson T.</p> <p>EKS n\u00e3o tem cota gr\u00e1tis, sempre \u00e9 muito bem cobrado.</p>"},{"location":"handout/cloud/aws/eks/#rise-up-an-eks","title":"Rise up an EKS","text":""},{"location":"handout/cloud/aws/eks/#1-creating-a-role","title":"1. Creating a role","text":"<p>IAM - Identity and Access Management: gerencia usu\u00e1rios e acessos.</p> <p>Role \u00e9 um grupo de policiies que est\u00e3o vinculadas a servi\u00e7os AWS, assim, o EKS precisa de permissionamento para acessar os recursos da AWS.</p> <p></p> <p></p> <p></p>"},{"location":"handout/cloud/aws/eks/#2-creating-a-vpc","title":"2. Creating a VPC","text":"<p>Virtual Private Cloud</p> <p>Organiza\u00e7\u00e3o do Kubernetes</p> Kubernetes Components <sup>2</sup> <p>\u00c9 necess\u00e1rio criar uma estrutura de rede para suportar o Kubernetes, para isso, \u00e9 aconselh\u00e1vel utilizar um template do Cloud Formation. Abaixe o arquivo amazon-eks-vpc-private-subnets.yaml e d\u00ea um upload na cria\u00e7\u00e3o da VPC.</p> <p></p> <pre><code>https://s3.us-west-2.amazonaws.com/amazon-eks/cloudformation/2020-10-29/amazon-eks-vpc-private-subnets.yaml\n</code></pre> <p></p> <p></p> <pre><code>flowchart TB\n  subgraph Region\n    direction LR\n    subgraph Zone A\n      direction LR\n      subgraph subpri1[\"Subnet Private\"]\n        direction TB\n        poda1[\"pod 1\"]\n        poda2[\"pod 2\"]\n        poda3[\"pod 3\"]\n      end\n      subgraph subpub1[\"Subnet Public\"]\n        loadbalancea[\"Load Balance\"]\n      end\n    end\n    subgraph Zone B\n      direction LR\n      subgraph subpri2[\"Subnet Private\"]\n        direction TB\n        podb1[\"pod 1\"]\n        podb2[\"pod 2\"]\n        podb3[\"pod 3\"]\n      end\n      subgraph subpub2[\"Subnet Public\"]\n        loadbalanceb[\"Load Balance\"]\n      end\n    end\n    User --&gt; loadbalancea\n    loadbalancea --&gt; poda1\n    loadbalancea --&gt; poda2\n    loadbalancea --&gt; poda3\n    User --&gt; loadbalanceb\n    loadbalanceb --&gt; podb1\n    loadbalanceb --&gt; podb2\n    loadbalanceb --&gt; podb3\n  end</code></pre> <p>gateway --&gt; auth gateway --&gt; discovery</p>"},{"location":"handout/cloud/aws/eks/#3-building-an-eks","title":"3. Building an EKS","text":""},{"location":"handout/cloud/aws/eks/#4-accessing-the-eks","title":"4. Accessing the EKS","text":"<p>On terminal, after that it had been set up the aws cli.</p> <pre><code>aws configure\n</code></pre> <p>See the configuration that was done.</p> <pre><code>aws configure list\n</code></pre> aws configure list      Name                    Value             Type    Location      ----                    -----             ----    --------   profile                &lt;not set&gt;             None    Noneaccess_key     ****************TTNI shared-credentials-file    secret_key     ****************zAJ1 shared-credentials-file        region                us-east-2      config-file    ~/.aws/config <p>Set up the kube-config to point to the remote aws eks cluster.</p> <pre><code>aws eks update-kubeconfig --name eks-store\n</code></pre> aws eks update-kubeconfig --name eks-storeAdded new context arn:aws:eks:us-east-2:058264361068:cluster/eks-store to /Users/sandmann/.kube/config&gt;&gt;kubectl get podsNo resources found in default namespace.&gt;&gt;kubectl get nodesNo resources found&gt; <p>Come back to AWS EKS &gt; compute:</p> <p></p> <p>Notice that there no nodes on cluster also, because only the Control Pane had been created, there is no exist a node for the worker nodes.</p> <p>Attach roles to node group, it is exclusive for the worker nodes.</p> <p>IAM &gt; Roles</p> <p></p> <p>Add Permissions</p> <ul> <li>AmazonEKS_CNI_Policy (Configuration Network Interface)</li> <li>AmazonEKSWorkerNodePolicy</li> <li>AmazonEC2ContainerRegistryReadOnly</li> </ul> <p>Review</p> <p></p> <p>Group Node Group</p> <p></p> <p></p> <p>Only private subnets:</p> <p></p> <pre><code>kubectl get nodes\n</code></pre> kubectl get nodesNAME                                            STATUS   ROLES    AGE   VERSIONip-192-168-179-174.us-east-2.compute.internal   Ready    &lt;none&gt;   54s   v1.29.3-eks-ae9a62aip-192-168-204-234.us-east-2.compute.internal   Ready    &lt;none&gt;   54s   v1.29.3-eks-ae9a62a <p>Now, deploy the microservice.</p> kubectl apply -f ./k8s/deployment.yamldeployment.apps/gateway createdkubectl apply -f ./k8s/service.yamlservice/gateway created&gt;&gt;&gt;kubectl get allNAME                           READY   STATUS    RESTARTS   AGEpod/gateway-7894679df8-lbngj   1/1     Running   0          81sNAME                 TYPE           CLUSTER-IP     EXTERNAL-IP                                                               PORT(S)          AGEservice/gateway      LoadBalancer   10.100.245.4   a3a5cc62ba81e466e9746f64f83fc349-1127848642.us-east-2.elb.amazonaws.com   8080:32681/TCP   25mservice/kubernetes   ClusterIP      10.100.0.1     &lt;none&gt;                                                                    443/TCP          87mNAME                      READY   UP-TO-DATE   AVAILABLE   AGEdeployment.apps/gateway   1/1     1            1           82sNAME                                 DESIRED   CURRENT   READY   AGEreplicaset.apps/gateway-7894679df8   1         1         1       82s&gt; <p>Jenkins update</p> <p>Jenkins precisa instalar o awscli (adicionar ao <code>docker-compose.yaml</code>) <pre><code>RUN apt-get install -y awscli\n</code></pre></p> <p>Dentro da inst\u00e2ncia, configurar:</p> <pre><code>&gt; aws configure\n&gt; aws eks update-kubeconfig --name eks-store\n</code></pre> <p>Scale</p> <pre><code>&gt; kubectl scale --replicas=3 deployment/gateway\n</code></pre> <p>kubectl scale --replicas=3 deployment/gatewaydeployment.apps/gateway scaledkubectl get podsNAME                       READY   STATUS    RESTARTS   AGEgateway-7894679df8-62m7z   1/1     Running   0          12sgateway-7894679df8-r2kp2   1/1     Running   0          12sgateway-7894679df8-v6xhs   1/1     Running   0          5m58s</p>"},{"location":"handout/cloud/aws/eks/#references","title":"References:","text":"<ol> <li> <p>Setting up to use Amazon EKS \u21a9</p> </li> <li> <p>Kubernetes Components \u21a9</p> </li> <li> <p> Como criar um cluster Kubernetes na AWS com EKS by Fabricio Veronez</p> <p> \u21a9</p> </li> <li> <p>Creating a VPC for your Amazon EKS cluster \u21a9</p> </li> <li> <p>AWS Princing Calculator - EKS \u21a9</p> </li> <li> <p>Getting started with Amazon EKS \u2013 AWS Management Console and AWS CLI \u21a9</p> </li> <li> <p>kubectl scale \u21a9</p> </li> </ol>"},{"location":"handout/devops/jenkins/","title":"Jenkins","text":"Docker ComposeEnvironment Variables docker-compose.yaml<pre><code># docker compose up -d --build --force-recreate\nversion: '3.8'\nname: ops\n\nservices:\n\njenkins:\n    container_name: jenkins\n    build:\n    dockerfile_inline: |\n        FROM jenkins/jenkins:jdk21\n        USER root\n        RUN apt-get update &amp;&amp; apt-get install -y lsb-release\n        RUN curl -fsSLo /usr/share/keyrings/docker-archive-keyring.asc \\\n        https://download.docker.com/linux/debian/gpg\n        RUN echo \"deb [arch=$(dpkg --print-architecture) \\\n        signed-by=/usr/share/keyrings/docker-archive-keyring.asc] \\\n        https://download.docker.com/linux/debian \\\n        $(lsb_release -cs) stable\" &gt; /etc/apt/sources.list.d/docker.list\n\n        RUN apt-get update &amp;&amp; apt-get install -y docker-ce maven\n\n        RUN apt-get install -y apt-transport-https ca-certificates curl\n        RUN curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n        RUN chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n        RUN echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list\n        RUN chmod 644 /etc/apt/sources.list.d/kubernetes.list\n        RUN apt-get update\n        RUN apt-get install -y kubectl\n\n        RUN apt-get install -y awscli\n\n        RUN usermod -aG docker jenkins\n    ports:\n        - 9080:8080\n        - 50000:50000 \n    volumes:\n        - $CONFIG/jenkins:/var/jenkins_home\n        - /var/run/docker.sock:/var/run/docker.sock\n    restart: always\n    networks:\n        - infra\n\nnetworks:\n    infra:\n        driver: bridge\n</code></pre> .env<pre><code>CONFIG=./config\n</code></pre> <p>To run this container:</p> <pre><code>docker compose up -d --build\n</code></pre> <p>The will be avaliable at: <pre><code>http://localhost:9000\n</code></pre></p>"},{"location":"handout/devops/jenkins/#pipeline","title":"Pipeline","text":""},{"location":"handout/devops/jenkins/#checkout-scm","title":"Checkout SCM","text":"Jenkinsfile<pre><code>pipeline {\n    agent any\n\n    stages {\n        stage('Build') {\n            steps {\n                sh 'mvn -B -DskipTests clean install'\n            }\n        }\n    }\n}\n</code></pre> <p>Definindo o n\u00famero m\u00e1ximo de executores. </p> <p>Instalando o plugin para executar o Docker dentro do Jenkins container.</p> <p></p> <p></p> <p>BASED ARTICLE:</p> <p>Getting \u201cPermission Denied\u201d error when pulling a docker image in Jenkins docker container on Mac</p>"},{"location":"handout/devops/kubernetes/","title":"Kubernetes","text":""},{"location":"handout/devops/kubernetes/#minikube","title":"Minikube","text":"<p>Vers\u00e3o light do kubernetes, para rodar em m\u00e1quinas locais. Instala\u00e7\u00e3o do Kubernetes.</p> <p>Para Inicializar o Minikube ap\u00f3s a instala\u00e7\u00e3o, utilize:</p> <pre><code>minikube start --driver=docker --profile=store\n</code></pre> <pre><code>minikube profile list\n</code></pre> <pre><code>minikube delete --all\n</code></pre> <pre><code>minikube delete --all --purge\n</code></pre> <p>Dashboard <pre><code>minikube dashboard\n</code></pre></p>"},{"location":"handout/devops/kubernetes/#kubectl","title":"Kubectl","text":"<p>Comando cliente de gerenciamento do Kubernetes.</p> <pre><code>kubectl apply -f &lt;filename&gt;\n</code></pre> <pre><code>kubectl get deployments\n</code></pre> <pre><code>kubectl get svc\n</code></pre> <pre><code>kubectl get pods\n</code></pre> <pre><code>kubectl port-forward &lt;pod&gt; 8080:8080\n</code></pre> <pre><code>kubectl exec -it &lt;pod&gt; -- bash\n</code></pre> <pre><code>kubectl delete --all\n</code></pre> <pre><code>kubectl api-resources\n</code></pre> <pre><code>kubectl logs &lt;pod&gt;\n</code></pre> <pre><code>kubectl describe pod &lt;pod&gt;\n</code></pre> reset the core dns<pre><code>kubectl -n kube-system rollout restart deployment coredns\n</code></pre>"},{"location":"handout/devops/kubernetes/#services","title":"Services","text":"<ul> <li> <p>ClusterIp: apenas dentro do cluster.</p> </li> <li> <p>NodePort: permite exposi\u00e7\u00e3o de porta para fora do cluster.</p> </li> <li> <p>LoadBalance: uma porta para diversas inst\u00e2ncias no cluster.</p> </li> </ul>"},{"location":"handout/devops/kubernetes/#deploying-a-postgres","title":"Deploying a Postgres","text":"<p>Crie um novo reposit\u00f3rio para armazenar as configura\u00e7\u00f5es do banco de dados: platform.241.store.db.</p> estrutura de diret\u00f3rio sugerida<pre><code>\ud83d\udcc4 store.account\n\ud83d\udcc1 store.db\n\u2514\u2500\u2500 \ud83d\udcc1 k8s\n    \u251c\u2500\u2500 \ud83d\udcc4 configmap.yaml\n    \u251c\u2500\u2500 \ud83d\udcc4 credentials.yaml\n    \u251c\u2500\u2500 \ud83d\udcc4 pv.yaml\n    \u251c\u2500\u2500 \ud83d\udcc4 pvc.yaml\n    \u251c\u2500\u2500 \ud83d\udcc4 deployment.yaml\n    \u2514\u2500\u2500 \ud83d\udcc4 service.yaml\n</code></pre> configmap.yamlcredentials.yamlpv.yamlpvc.yamldeployment.yamlservice.yaml <p>Configura\u00e7\u00e3o de conex\u00e3o do banco</p> configmap.yaml<pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n    name: postgres-configmap\n    labels:\n        app: postgres\ndata:\n    POSTGRES_HOST: postgres\n    POSTGRES_DB: store\n</code></pre> <pre><code>kubectl apply -f ./k8s/configmap.yaml\nkubectl get configmap\n</code></pre> <p>Configura\u00e7\u00e3o de acesso ao banco</p> credentials.yaml<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n    name: postgres-credentials\ndata:\n    POSTGRES_USER: c3RvcmU=\n    POSTGRES_PASSWORD: c3RvcmU=\n</code></pre> <pre><code>kubectl apply -f ./k8s/credentials.yaml\nkubectl get secrets\n</code></pre> <p>Use encode base64 para ofuscar a senha. Vide: Base64Encode.</p> <p>Persistence Volume: espa\u00e7o alocado no cluster</p> pv.yaml<pre><code>apiVersion: v1\nkind: PersistentVolume\nmetadata:\n    name: postgres-volume\n    labels:\n        type: local\n        app: postgres\nspec:\n    storageClassName: manual\n    capacity:\n        storage: 10Gi\n    accessModes:\n        - ReadWriteMany\n    hostPath:\n        path: /data/postgresql\n</code></pre> <pre><code>kubectl apply -f ./k8s/pv.yaml\nkubectl get pv\n</code></pre> <p>Persistence Volume Claim: espa\u00e7o alocado do cluster para o pods.</p> pvc.yaml<pre><code>apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n    name: postgres-volume-claim\n    labels:\n        app: postgres\nspec:\n    storageClassName: manual\n    accessModes:\n        - ReadWriteMany\n    resources:\n        requests:\n            storage: 10Gi\n</code></pre> <pre><code>kubectl apply -f ./k8s/pvc.yaml\nkubectl get pvc\n</code></pre> deployment.yaml<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n          - name: postgres\n            image: 'postgres:latest'\n            imagePullPolicy: IfNotPresent\n            ports:\n              - containerPort: 5432\n            env:\n\n              - name: POSTGRES_DB\n                valueFrom:\n                  configMapKeyRef:\n                    name: postgres-configmap\n                    key: POSTGRES_DB\n\n              - name: POSTGRES_USER\n                valueFrom:\n                  secretKeyRef:\n                    name: postgres-credentials\n                    key: POSTGRES_USER\n\n              - name: POSTGRES_PASSWORD\n                valueFrom:\n                  secretKeyRef:\n                    name: postgres-credentials\n                    key: POSTGRES_PASSWORD\n\n            volumeMounts:\n              - mountPath: /var/lib/postgresql/data\n                name: postgresdata\n      volumes:\n          - name: postgresdata\n            persistentVolumeClaim:\n              claimName: postgres-volume-claim\n</code></pre> <pre><code>kubectl apply -f ./k8s/deployment.yaml\nkubectl get deployments\nkubectl get pods\n</code></pre> service.yaml<pre><code>apiVersion: v1\nkind: Service\nmetadata:\n    name: postgres\n    labels:\n        app: postgres\nspec:\n    type: ClusterIP\n    ports:\n        - port: 5432\n    selector:\n        app: postgres\n</code></pre> <pre><code>kubectl apply -f ./k8s/service.yaml\nkubectl get services\n</code></pre> <p>Acessando o pod do Postgres:</p> <pre><code>kubectl exec -it postgres-&lt;pod-id&gt; -- psql -h localhost -U store --password -p 5432 store\n</code></pre> <p>Redirecionando porta: <pre><code>kubectl port-forward &lt;pod&gt; 5432:5432\n</code></pre></p>"},{"location":"handout/devops/kubernetes/#deploying-the-discovery-microservice","title":"Deploying the Discovery Microservice","text":"discovery<pre><code>\ud83d\udcc1 store.discovery-resource\n\u251c\u2500\u2500 \ud83d\udcc1 src\n\u2502   \u2514\u2500\u2500 \ud83d\udcc1 main\n\u2502       \u2514\u2500\u2500 \ud83d\udcc1 resources\n\u2502           \u2514\u2500\u2500 \ud83d\udcc4 application.yaml\n\u251c\u2500\u2500 \ud83d\udcc1 k8s\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 configmap.yaml\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 deployment.yaml\n\u2502   \u2514\u2500\u2500 \ud83d\udcc4 service.yaml\n\u251c\u2500\u2500 \ud83d\udcc4 Dockerfile\n\u251c\u2500\u2500 \ud83d\udcc4 Jenkins\n\u2514\u2500\u2500 \ud83d\udcc4 pom.xml\n</code></pre> configmap.yamldeployment.yamlservice.yaml configmap.yaml<pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: discovery-configmap\n  labels:\n    app: discovery\ndata:\n  DISCOVERY_HOST: discovery    \n</code></pre> configmap.yaml<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: discovery\n  labels:\n    app: discovery\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: discovery\n  template:\n    metadata:\n      labels:\n        app: discovery\n    spec:\n      containers:\n        - name: discovery\n          image: humbertosandmann/discovery:latest\n          ports:\n            - containerPort: 8761\n</code></pre> service.yaml<pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: discovery\n  labels:\n    app: discovery\nspec:\n  type: ClusterIP\n  ports:\n    - port: 8761\n      targetPort: 8761\n      protocol: TCP\n  selector:\n    app: discovery\n</code></pre>"},{"location":"handout/devops/kubernetes/#deploying-a-microservice","title":"Deploying a Microservice","text":"account<pre><code>\ud83d\udcc1 store.account-resource\n\u251c\u2500\u2500 \ud83d\udcc1 src\n\u2502   \u2514\u2500\u2500 \ud83d\udcc1 main\n\u2502       \u2514\u2500\u2500 \ud83d\udcc1 resources\n\u2502           \u2514\u2500\u2500 \ud83d\udcc4 application.yaml\n\u251c\u2500\u2500 \ud83d\udcc1 k8s\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 deployment.yaml\n\u2502   \u2514\u2500\u2500 \ud83d\udcc4 service.yaml\n\u251c\u2500\u2500 \ud83d\udcc4 Dockerfile\n\u251c\u2500\u2500 \ud83d\udcc4 Jenkins\n\u2514\u2500\u2500 \ud83d\udcc4 pom.xml\n</code></pre> application.yamldeployment.yamlservice.yaml application.yaml<pre><code>server:\n  port: 8080\n\nspring:\n  application:\n    name: account\n  datasource:\n    url: jdbc:postgresql://${POSTGRES_HOST}:5432/${POSTGRES_DB}\n    username: ${POSTGRES_USER:postgres}\n    password: ${POSTGRES_PASSWORD:Post123321}\n    driver-class-name: org.postgresql.Driver\n  flyway:\n    baseline-on-migrate: true\n    schemas: account\n  jpa:\n    properties:\n      hibernate:\n        default_schema: account\n\nmanagement:\n  endpoints:\n    web:\n      base-path: /account/actuator\n        exposure:\n          include: [ 'prometheus' ]\n\neureka:\n  client:\n    register-with-eureka: true\n    fetch-registry: true\n    service-url:\n    defaultZone: http://${DISCOVERY_HOST}:8761/eureka/\n</code></pre> <p>Subir no Git e rodar o Jenkins.</p> deployment.yaml<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: account\nspec:\n  selector:\n    matchLabels:\n      app: account\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: account\n    spec:\n      containers:\n        - name: account\n          image: humbertosandmann/account:latest\n          ports:\n            - containerPort: 8080\n          env:\n\n            - name: DISCOVERY_HOST\n              valueFrom:\n                configMapKeyRef:\n                  name: discovery-configmap\n                  key: DISCOVERY_HOST\n\n            - name: POSTGRES_HOST\n              valueFrom:\n                configMapKeyRef:\n                  name: postgres-configmap\n                  key: POSTGRES_HOST\n\n            - name: POSTGRES_DB\n              valueFrom:\n                configMapKeyRef:\n                  name: postgres-configmap\n                  key: POSTGRES_DB\n\n            - name: POSTGRES_USER\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-credentials\n                  key: POSTGRES_USER\n\n            - name: POSTGRES_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-credentials\n                  key: POSTGRES_PASSWORD\n</code></pre> service.yaml<pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: account\n  labels:\n    name: account\nspec:\n  type: NodePort\n  ports:\n    - port: 8080\n      targetPort: 8080\n      protocol: TCP\n  selector:\n    app: account\n</code></pre> <pre><code>kubectl apply -f ./k8s/service.yaml\nkubectl get services\n</code></pre> <pre><code>kubectl apply -f k8s/deployment.yaml\nkubectl apply -f k8s/service.yaml  \n</code></pre>"},{"location":"handout/devops/kubernetes/#deploying-using-jenkins","title":"Deploying using Jenkins","text":""},{"location":"handout/devops/kubernetes/#creating-crendentials-for-jenkins-to-k8s","title":"Creating crendentials for Jenkins to K8s","text":"<p>Criar credentials no Kubernetes para que o Jenkins possa conectar.</p> jenkins.yaml<pre><code>---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: jenkins\n  namespace: default\n---\n\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: jenkins\n  namespace: default\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\",\"services\"]\n  verbs: [\"create\",\"delete\",\"get\",\"list\",\"patch\",\"update\",\"watch\"]\n- apiGroups: [\"apps\"]\n  resources: [\"deployments\"]\n  verbs: [\"create\",\"delete\",\"get\",\"list\",\"patch\",\"update\",\"watch\"]\n- apiGroups: [\"\"]\n  resources: [\"pods/exec\"]\n  verbs: [\"create\",\"delete\",\"get\",\"list\",\"patch\",\"update\",\"watch\"]\n- apiGroups: [\"\"]\n  resources: [\"pods/log\"]\n  verbs: [\"get\",\"list\",\"watch\"]\n- apiGroups: [\"\"]\n  resources: [\"secrets\"]\n  verbs: [\"get\",\"create\"]\n- apiGroups: [\"\"]\n  resources: [\"configmaps\"]\n  verbs: [\"create\",\"get\",\"update\"]\n- apiGroups: [\"\"]\n  resources: [\"persistentvolumeclaims\"]\n  verbs: [\"create\",\"delete\",\"get\",\"list\",\"patch\",\"update\",\"watch\"]\n\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: jenkins-token\n  annotations:\n    kubernetes.io/service-account.name: jenkins\ntype: kubernetes.io/service-account-token\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: jenkins\n  namespace: default\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: jenkins\nsubjects:\n- kind: ServiceAccount\n  name: jenkins\n---\n# Allows jenkins to create persistent volumes\n# This cluster role binding allows anyone in the \"manager\" group to read secrets in any namespace.\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: jenkins-crb\nsubjects:\n- kind: ServiceAccount\n  namespace: default\n  name: jenkins\nroleRef:\n  kind: ClusterRole\n  name: jenkinsclusterrole\n  apiGroup: rbac.authorization.k8s.io\n---\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  # \"namespace\" omitted since ClusterRoles are not namespaced\n  name: jenkinsclusterrole\nrules:\n- apiGroups: [\"\"]\n  resources: [\"persistentvolumes\"]\n  verbs: [\"create\",\"delete\",\"get\",\"list\",\"patch\",\"update\",\"watch\"]\n</code></pre> <p>Executar a declara\u00e7\u00e3o: <pre><code>kubectl apply -f jenkins.yaml\n</code></pre></p>"},{"location":"handout/devops/kubernetes/#recovering-the-jenkins-token","title":"Recovering the Jenkins' Token","text":"<pre><code>kubectl get secrets\n</code></pre> kubectl get secretsNAME            TYPE                                  DATA   AGEjenkins-token   kubernetes.io/service-account-token   3      21s <p>Abrindo o objeto com o token.</p> <pre><code>kubectl describe secrets/jenkins-token\n</code></pre> kubectl describe secrets/jenkins-tokenName:         jenkins-tokenNamespace:    defaultLabels:       &lt;none&gt;Annotations:  kubernetes.io/service-account.name: jenkins              kubernetes.io/service-account.uid: 0d06d343-fd34-4aff-8396-5dfec5a9e5b6Type:  kubernetes.io/service-account-tokenData====ca.crt:     1111 bytesnamespace:  7 bytestoken:      eyJhbGciOiJSUzI1NiIsImtpZCI6IklqTkZXdEVKcW1iclBrNHBnQzJSX1F6QjFIWDFMX0FvNGVkNGd2aWFKd00ifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImplbmtpbnMtdG9rZW4iLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiamVua2lucyIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjBkMDZkMzQzLWZkMzQtNGFmZi04Mzk2LTVkZmVjNWE5ZTViNiIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmplbmtpbnMifQ.XkwD5vwC7CJNDv44PxCAIpLEfVlQbLE6VDNmTOEpFkaoe_x4ehU8QS8fnTgUz0a_vjUKuXum-PD2vF8Fx_WBsWVAG8BNhXJv79MMbEe7axYT7W91fjsnT0rMqSqzajNjTTDFvPDQu0KkLzC-UUnlG3RdNHhzxGVnUIA9lIeJuVKnlCXAexPQr6HeX5ggbe-CZO_uMjFZjwBnjLC-IJsIKKaz8I4CbFxz10vAl5SpJ7PadA1iZZEvr_VYhhG42qMqRFLzkrXtWUG0NX8aSitJT0Wk9c54ME13WDZb6MfRXwUWbARu-TLN56KrPaqtL2dBtRG2EFOn5nVXARI7jPzhjg Try it!!! <p>Abra o token no site jwt.io e verifique seu conte\u00fado.</p>"},{"location":"handout/devops/kubernetes/#set-up-the-credential-to-jenkins","title":"Set up the credential to Jenkins","text":"<p>Before to go ahead</p> <p>Instale os plugins: Kubernetes Cli e Kubernetes pipeline.</p> <p>Manage Jenkins &gt; Credentials</p> <p></p>"},{"location":"handout/devops/kubernetes/#updating-the-jenkinsfile","title":"Updating the Jenkinsfile","text":"<p>Adding the <code>Deploy on k8s</code> stage:</p> Jenkinsfile<pre><code>...\n    stage('Deploy on local k8s') {\n        steps {\n            withCredentials([ string(credentialsId: 'minikube-credentials', variable: 'api_token') ]) {\n                sh 'kubectl --token $api_token --server https://host.docker.internal:55529  --insecure-skip-tls-verify=true apply -f ./k8s/deployment.yaml '\n                sh 'kubectl --token $api_token --server https://host.docker.internal:55529  --insecure-skip-tls-verify=true apply -f ./k8s/service.yaml '\n            }\n        }\n    }\n...\n</code></pre>"},{"location":"handout/devops/kubernetes/#kubectl-config","title":"kubectl config","text":"<p>kubectl config get-contexts</p>"},{"location":"handout/devops/kubernetes/#references","title":"References:","text":"<p>[1^]: Using a Service to Expose Your App</p> <p>[2^]: Install Kubernetes's Tools</p> <p>[3^]: How to Deploy Postgres to Kubernetes Cluster</p> <p>[4^]: Spring boot, PostgreSQL and Kubernetes</p> <p>[5^]: Deploy nodejs App in a Minikube Kubernetes using Jenkins CI/CD pipeline</p> <p>[6^]: Horizontal Pod Autoscaling</p>"},{"location":"handout/devops/observability/","title":"Observability","text":"<ul> <li>Logging</li> <li>Monitoring</li> <li>Tracing</li> </ul>"},{"location":"handout/devops/observability/#microservice","title":"Microservice","text":"pom.xml<pre><code>&lt;!-- metricas de uso --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n&lt;!-- exporta no formato prometheus --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;io.micrometer&lt;/groupId&gt;\n    &lt;artifactId&gt;micrometer-registry-prometheus&lt;/artifactId&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre> application.yaml<pre><code>management:\n  endpoints:\n    web:\n      base-path: /gateway/actuator\n      exposure:\n        include: [ 'prometheus' ]\n</code></pre>"},{"location":"handout/devops/observability/#docker","title":"Docker","text":"docker-compose.yaml<pre><code>  prometheus:\n    image: prom/prometheus:latest\n    container_name: store-prometheus\n    ports:\n      - 9090:9090\n    volumes:\n      - $VOLUME/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml\n    networks:\n      - private-network\n\n  grafana:\n    container_name: store-grafana\n    image: grafana/grafana-enterprise\n    ports:\n      - 3000:3000\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=admin\n    volumes:\n      - $VOLUME/grafana:/var/lib/grafana\n      - $VOLUME/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources      \n    restart: always\n    networks:\n      - private-network\n</code></pre>"},{"location":"handout/devops/observability/#prometheus","title":"Prometheus","text":"$VOLUME/prometheus/prometheus.yml<pre><code>scrape_configs:\n\n  - job_name: 'GatewayMetrics'\n    metrics_path: '/gateway/actuator/prometheus'\n    scrape_interval: 1s\n    static_configs:\n      - targets:\n        - gateway:8080\n        labels:\n          application: 'Gateway Application'\n\n  - job_name: 'AuthMetrics'\n    metrics_path: '/auth/actuator/prometheus'\n    scrape_interval: 1s\n    static_configs:\n      - targets:\n        - auth:8080\n        labels:\n          application: 'Auth Application'\n\n  - job_name: 'AccountMetrics'\n    metrics_path: '/accounts/actuator/prometheus'\n    scrape_interval: 1s\n    static_configs:\n      - targets:\n        - account:8080\n        labels:\n          application: 'Account Application'\n</code></pre> <p>http://localhost:9090/</p>"},{"location":"handout/devops/observability/#grafana","title":"Grafana","text":"$VOLUME/grafana/provisioning/datasources/datasources.yml<pre><code>apiVersion: 1\ndatasources:\n  - name: Prometheus\n    type: prometheus\n    access: proxy\n    url: http://prometheus:9090\n    isDefault: true\n</code></pre> <p>http://localhost:3000/</p> <ul> <li>Dashboard MarketPlace</li> </ul>"},{"location":"handout/microservices/account/","title":"Account","text":"<p>Esse microservi\u00e7o \u00e9 respons\u00e1vel por gerenciar as contas dos usu\u00e1rios do sistema que est\u00e1 sendo desenvolvido. Ele tamb\u00e9m pode ser utilizado como template para o desenvolvimento de outros microservi\u00e7os que se utilizem de recuros semelhantes em seu funcionamento.</p> <ol> <li>Endpoints</li> <li>Modulariza\u00e7\u00e3o<ul> <li>Interface</li> <li>Resource</li> </ul> </li> <li>Persist\u00eancia</li> <li>Documenta\u00e7\u00e3o</li> <li>Integra\u00e7\u00e3o</li> <li>Docker</li> </ol>"},{"location":"handout/microservices/account/#endpoints","title":"Endpoints","text":"Create Account <pre><code>POST /accounts\n</code></pre> <p>Request <pre><code>{\n    \"name\": \"Antonio do Estudo\",\n    \"email\": \"acme@insper.edu.br\",\n    \"password\": \"123@\"\n}\n</code></pre> Responses:</p> <p> codebody 201 <pre><code>{\n  \"id\": \"45d16201-12a4-48bf-8c84-df768fdc4878\",\n  \"name\": \"Antonio do Estudo\",\n  \"email\": \"acme@insper.edu.br\"\n}\n</code></pre> 401 </p> Login :: find by email and password Get Account <pre><code>GET /accounts/{uuid}\n</code></pre> <p>Responses:</p> <p> codebody 200 <pre><code>{\n  \"id\": \"45d16201-12a4-48bf-8c84-df768fdc4878\",\n  \"name\": \"Antonio do Estudo\",\n  \"email\": \"acme@insper.edu.br\"\n}\n</code></pre> 401 </p>"},{"location":"handout/microservices/account/#modularizacao","title":"Modulariza\u00e7\u00e3o","text":"<p>Class Diagram</p> <p>Exemplo para o microsservi\u00e7o Account.</p> <pre><code>classDiagram\n  namespace Interface {\n    class AccountController {\n      &lt;&lt;interface&gt;&gt;\n      create(AccountIn)\n      read(String id): AccountOut\n      update(String id, AccountIn)\n      delete(String id)\n      findByEmailAndPassword(AccountIn)\n    }\n    class AccountIn {\n      &lt;&lt;record&gt;&gt;\n      String name\n      String email\n      String password\n    }\n    class AccountOut {\n      &lt;&lt;record&gt;&gt;\n      String id\n      String name\n      String email\n    }\n  }\n  namespace Resource {\n    class AccountResource {\n      &lt;&lt;REST API&gt;&gt;\n      -accountService\n    }\n    class AccountService {\n      &lt;&lt;service&gt;&gt;\n      -accountRepository\n      create(Account)\n    }\n    class AccountRepository {\n      &lt;&lt;nterface&gt;&gt;\n      findByEmailAndHash(String, String)\n    }\n    class AccountModel {\n      &lt;&lt;entity&gt;&gt;\n      String id\n      String name\n      String email\n      String hash\n    }\n    class Account {\n      &lt;&lt;dto&gt;&gt;\n      String id\n      String name\n      String email\n      String password\n    }\n  }\n  AccountController &lt;|-- AccountResource\n  AccountResource o-- AccountService\n  AccountService o-- AccountRepository</code></pre>"},{"location":"handout/microservices/account/#pom-dependecy","title":"POM dependecy","text":"<p>Note que esse microsservi\u00e7o possui depend\u00eancia da interface, o Account. Logo, se torna necess\u00e1rio explicitar essa depend\u00eancia no <code>pom.xml</code> do microsservi\u00e7o Account.</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;insper.store&lt;/groupId&gt;\n  &lt;artifactId&gt;account&lt;/artifactId&gt;\n  &lt;version&gt;${project.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Outras depend\u00eancias relevantes para adicionar no <code>pom.xml</code> s\u00e3o o suporte ao registro no discovery.</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Quando adicionado o acesso ao Discovery, \u00e9 necess\u00e1rio definir no <code>application.yalm</code> o nome com o qual o servi\u00e7o ser\u00e1 invocado, assim bem como, o endere\u00e7o de acesso do discovery ao qual o servi\u00e7o ir\u00e1 conectar:</p> <pre><code>spring:\n  application:\n    name: store-account\n\neureka:\n  client:\n    register-with-eureka: true\n    fetch-registry: true\n    service-url:\n      defaultZone: ${EUREKA_URI:http://localhost:8761/eureka/}\n</code></pre> <p>J\u00e1 para disponibilizar o uso ao <code>OpenFeign</code>.</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"handout/microservices/auth/","title":"Auth","text":"<p>A fim do sistema possuir um controle de acesso, \u00e9 conveniente a cria\u00e7\u00e3o de um microsservi\u00e7o Auth, que ser\u00e1 respons\u00e1vel pelo cadastro de usu\u00e1rios do sistema.</p> <ol> <li>Endpoints</li> <li>Modulariza\u00e7\u00e3o<ul> <li>Interface</li> <li>Resource</li> </ul> </li> <li>Documenta\u00e7\u00e3o</li> <li>Integra\u00e7\u00e3o</li> <li>Token</li> <li>Docker</li> </ol>"},{"location":"handout/microservices/auth/#endpoints","title":"Endpoints","text":"Register <pre><code>POST /auth/register\n</code></pre> Autentica\u00e7\u00e3o :: Login <pre><code>POST /auth/login\n</code></pre>"},{"location":"handout/microservices/auth/#request","title":"Request","text":"<pre><code>{\n    \"name\": \"Antonio do Estudo\",\n    \"email\": \"acme@insper.edu.br\",\n    \"password\": \"123@321\"\n}\n</code></pre>"},{"location":"handout/microservices/auth/#response","title":"Response","text":"code body 201"},{"location":"handout/microservices/auth/#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\nautonumber\nactor User\nUser-&gt;&gt;+Auth: register(RegisterIn)\nAuth-&gt;&gt;+Account: create(AccountIn)\nAccount-&gt;&gt;-Auth: returns the new account (AccountOut)\nAuth-&gt;&gt;-User: returns 201</code></pre>"},{"location":"handout/microservices/auth/#request_1","title":"Request","text":"<pre><code>{\n    \"email\": \"acme@insper.edu.br\",\n    \"password\": \"123@321\"\n}\n</code></pre>"},{"location":"handout/microservices/auth/#response_1","title":"Response","text":"code body 201 <code>{ \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI0NWQxNjIwMS0xMmE0LTQ4YmYtOGM4NC1kZjc2OGZkYzQ4NzgiLCJuYW1lIjoiQW50b25pbyBkbyBFc3R1ZG8iLCJpYXQiOjE1MTYyMzkwMjIsInJvbGUiOiJyZWd1bGFyIn0.8eiTZjXGUFrseBP5J91UdDctw-Flp7HP-PAp1eO8f1M\" }</code> 403"},{"location":"handout/microservices/auth/#sequence-diagram_1","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\nautonumber\nactor User\nUser-&gt;&gt;+Auth: authenticate(CredentiaIn)\nAuth-&gt;&gt;+Account: login(LoginIn)\ncritical validated\n    Account-&gt;&gt;-Auth: returns the account\noption denied\n    Auth--&gt;&gt;User: unauthorized message\nend  \nAuth-&gt;&gt;Auth: generates a token\nAuth-&gt;&gt;-User: returns LoginOut\nUser-&gt;&gt;User: stores the token to use for the next requests</code></pre>"},{"location":"handout/microservices/auth/#modularizacao","title":"Modulariza\u00e7\u00e3o","text":"<p>Exemplo para o microsservi\u00e7o Auth.</p> <pre><code>classDiagram\n  namespace Interface {\n    class AuthController {\n      &lt;&lt;interface&gt;&gt;\n      register(RegisterIn)\n      authenticate(CredentialIn): LoginOut\n      solve(SolveIn): SolveOut\n    }\n    class RegisterIn {\n      &lt;&lt;record&gt;&gt;\n      String name\n      String email\n      String password\n    }\n    class CredentialIn {\n      &lt;&lt;record&gt;&gt;\n      String email\n      String password\n    }\n    class LoginOut {\n      &lt;&lt;Record&gt;&gt;\n      String token\n    }\n    class SolveIn {\n      &lt;&lt;Record&gt;&gt;\n      String token\n    }\n    class SolveOut {\n      &lt;&lt;Record&gt;&gt;\n      String id\n      String name\n      String role\n    }\n  }\n  namespace Resource {\n    class AuthResource {\n      &lt;&lt;REST API&gt;&gt;\n      -authService\n    }\n    class AuthService {\n      &lt;&lt;service&gt;&gt;\n      JwtService jwtService\n      register(RegisterIn)\n      authenticate(CredentialIn)\n    }\n    class JwtService {\n      &lt;&lt;service&gt;&gt;\n      String secretKey\n      String issuer\n      long duration\n      SecretKey key\n      JwtParser parser\n      init()\n      create(String id, String name, String role): String\n      getToken(String token): Token\n      getRole(String token): String\n    }\n    class Token {\n      &lt;&lt;record&gt;&gt;\n      String id\n      String name\n      String role\n    }\n  }\n  AuthController &lt;|-- AuthResource\n  AuthResource o-- AuthService\n  AuthService o-- JwtService</code></pre> <p>Exemplo de uma implementa\u00e7\u00e3o da interface AuthController.</p> AuthController.java<pre><code>package store.auth;\n\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\n\n@FeignClient(\"store-auth\")\npublic interface AuthController {\n\n    @PostMapping(\"/auth/register\")\n    ResponseEntity&lt;?&gt; create (\n        @RequestBody(required = true) RegisterIn in\n    );\n\n    @PostMapping(\"/auth/login\")\n    ResponseEntity&lt;LoginOut&gt; authenticate (\n        @RequestBody(required = true) Credential in\n    );\n}\n</code></pre> <p>Repare que h\u00e1 a publica\u00e7\u00e3o da interface como sendo um servi\u00e7o a ser registrado no Discovery.</p>"},{"location":"handout/microservices/auth/#documentacao","title":"Documenta\u00e7\u00e3o","text":"<p>Para fazer a documenta\u00e7\u00e3o dos APIs, de forma automatizada, \u00e9 aconselh\u00e1vel a utiliza\u00e7\u00e3o da biblioteca <code>SpringDoc OpenAPI</code>.</p> pom.xml<pre><code>&lt;!-- https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-ui --&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springdoc&lt;/groupId&gt;\n  &lt;artifactId&gt;springdoc-openapi-starter-webmvc-ui&lt;/artifactId&gt;\n  &lt;version&gt;[2.3.0,)&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"handout/microservices/auth/#integracao","title":"Integra\u00e7\u00e3o","text":"<p>A integra\u00e7\u00e3o entre os microsservi\u00e7os \u00e9 feita via OpenFeign. Esse framework precisa saber, quando a aplica\u00e7\u00e3o sobe, em quais pacotes ir\u00e1 procurar os servi\u00e7os. Para isso, se torna necess\u00e1rio anotar a classe <code>AuthApplication</code> com a lista de pacotes, assim bem como, anotar que esse microsservi\u00e7o ir\u00e1 trabalhar com a sistema de descoberta de microsservi\u00e7os habitado.</p> AuthApplication.java<pre><code>package store.auth;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\n\n@EnableFeignClients(basePackages = {\n    \"insper.store.account\"\n})\n@EnableDiscoveryClient\n@SpringBootApplication\npublic class AuthApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AuthApplication.class, args);\n    }\n\n}\n</code></pre> <p>Necess\u00e1rio tamb\u00e9m atualizar o <code>pom.xml</code> para que o microsservi\u00e7o possa enxergar o outro microsservi\u00e7o.</p> <p>Note que esse microsservi\u00e7o possui depend\u00eancia de outro, o Account, al\u00e9m da depend\u00eancia da interface do pr\u00f3prio microsservi\u00e7o. Logo, se torna necess\u00e1rio explicitar essa depend\u00eancia no <code>pom.xml</code> do microsservi\u00e7o Auth.</p> pom.xml<pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;insper.store&lt;/groupId&gt;\n  &lt;artifactId&gt;auth&lt;/artifactId&gt;\n  &lt;version&gt;${project.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;insper.store&lt;/groupId&gt;\n  &lt;artifactId&gt;account&lt;/artifactId&gt;\n  &lt;version&gt;${project.version}&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;!-- https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-api --&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n  &lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;\n  &lt;version&gt;0.12.3&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n  &lt;artifactId&gt;jjwt-impl&lt;/artifactId&gt;\n  &lt;version&gt;0.12.3&lt;/version&gt;\n  &lt;scope&gt;runtime&lt;/scope&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n  &lt;artifactId&gt;jjwt-jackson&lt;/artifactId&gt; &lt;!-- or jjwt-gson if Gson is preferred --&gt;\n  &lt;version&gt;0.12.3&lt;/version&gt;\n  &lt;scope&gt;runtime&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Aproveitando esse ponto, vale a pena j\u00e1 incluir tamb\u00e9m no <code>pom.xml</code>.</p>"},{"location":"handout/microservices/auth/#token","title":"Token","text":"<p>Para gerar o token de acesso, no caso JWT, um servi\u00e7o foi criado, <code>JwtService.java</code>.</p> <p>Para gerar o JWT, alguns atributos s\u00e3o adicionados no <code>application.yaml</code>.</p> application.yaml<pre><code>store:\n  jwt:\n    issuer: \"In5pEr\"\n    secretKey: \"\"\n    duration: 31536000000 # 365 days in miliseconds\n</code></pre> JwtService.java<pre><code>package store.auth;\n\nimport java.util.Date;\n\nimport javax.crypto.SecretKey;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\n\nimport io.jsonwebtoken.Claims;\nimport io.jsonwebtoken.ExpiredJwtException;\nimport io.jsonwebtoken.JwtParser;\nimport io.jsonwebtoken.Jwts;\nimport io.jsonwebtoken.io.Decoders;\nimport io.jsonwebtoken.security.Keys;\nimport jakarta.annotation.PostConstruct;\n\n@Service\npublic class JwtService {\n\n    @Value(\"${store.jwt.secret-key}\")\n    private String secretKey;\n\n    @Value(\"${store.jwt.issuer}\")\n    private String issuer;\n\n    @Value(\"${store.jwt.duration}\")\n    private long duration = 1l;\n\n    private SecretKey key;\n    private JwtParser parser;\n\n    @PostConstruct\n    public void init() {\n        this.key = Keys.hmacShaKeyFor(Decoders.BASE64.decode(secretKey));\n        this.parser = Jwts.parser().verifyWith(key).build();\n    }\n\n    public String create(String id, String name, String role) {\n        String jwt = Jwts.builder()\n            .header()\n            .and()\n            .id(id)\n            .issuer(issuer)\n            .subject(name)\n            .signWith(key)\n            .claim(\"role\", role)\n            .notBefore(new Date())\n            .expiration(new Date(new Date().getTime() + duration))\n            .compact();\n        return jwt;\n    }\n\n    public String getToken(String token) {\n        final Claims claims = resolveClaims(token);\n        return Token.builder\n            .id(claims.getId())\n            .role(claims.get(\"role\", String.class))\n            .build();\n    }\n\n    private Claims resolveClaims(String token) {\n        if (token == null) throw new io.jsonwebtoken.MalformedJwtException(\"token is null\");\n        return validateClaims(parser.parseSignedClaims(token).getPayload());\n    }\n\n    private Claims validateClaims(Claims claims) throws ExpiredJwtException {\n        if (claims.getExpiration().before(new Date())) throw new ExpiredJwtException(null, claims, issuer);\n        if (claims.getNotBefore().after(new Date())) throw new ExpiredJwtException(null, claims, issuer);\n        return claims;\n    }\n\n}\n</code></pre>"},{"location":"handout/microservices/auth/#docker","title":"Docker","text":"<p>Adicione no <code>docker-compose.yaml</code> o registro desse novo microsservi\u00e7o:</p> docker-compose.yaml<pre><code>  auth:\n    build:\n      context: ../store.auth-resource/\n      dockerfile: Dockerfile\n    container_name: store-auth\n    image: store-auth:latest\n    # ports:\n    #   - 8080:8080\n    environment:\n      - eureka.client.service-url.defaultZone=http://store-discovery:8761/eureka/\n    deploy:\n      mode: replicated\n      replicas: 1\n    restart: always\n    networks:\n      - private-network\n    depends_on:\n      - discovery\n      - account\n</code></pre> NICE TO HAVE <p>O projeto da disciplina pode ter um microsservi\u00e7o de registro que valide email ou SMS para criar a conta.</p>"},{"location":"handout/microservices/gateway/","title":"Gateway","text":"<p>O gateway tem como fun\u00e7\u00e3o ser o \u00fanico ponto de entrada de todo o sistema, ele \u00e9 respons\u00e1vel por redirecionar todas as requisi\u00e7\u00f5es aos respectivos microsservi\u00e7os. Assim bem como, de autorizar ou negar acesso ao sistema baseando-se no token de seguran\u00e7a passado pela requisi\u00e7\u00e3o.</p> <pre><code>flowchart LR\n  subgraph Client\n    direction LR\n    Web\n    Mobile\n    Desktop\n  end\n  subgraph Microservices\n    direction LR\n    gateway[\"Gateway\"]\n    subgraph Essentials\n      direction TB\n      discovery[\"Discovery\"]\n      auth[\"Auth\"]\n      config[\"Configuration\"]\n    end\n    subgraph Businesses\n      direction TB\n      ms1[\"Service 1\"]\n      ms2[\"Service 2\"]\n      ms3[\"Service 3\"]\n    end\n  end\n  Client --&gt; lb[\"Load Balance\"] --&gt; gateway --&gt; Businesses\n  gateway --&gt; auth\n  gateway --&gt; discovery</code></pre>"},{"location":"handout/microservices/gateway/#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n  autonumber\n  actor User\n  User-&gt;&gt;Gateway: route(ServerHttpRequest)\n  Gateway-&gt;&gt;+AuthenticationFilter: filter(ServerWebExchange, GatewayFilterChain)\n  AuthenticationFilter-&gt;&gt;RouteValidator: isSecured.test(ServerHttpRequest)\n  RouteValidator--&gt;&gt;AuthenticationFilter: True | False\n  critical notSecured\n    AuthenticationFilter-&gt;&gt;Gateway: follow the flux\n  end\n  AuthenticationFilter-&gt;&gt;AuthenticationFilter: isAuthMissing(ServerHttpRequest)\n  critical isAuthMissing\n    AuthenticationFilter-&gt;&gt;User: unauthorized message\n  end\n  AuthenticationFilter-&gt;&gt;AuthenticationFilter: validateAuthorizationHeader()\n  critical isInvalidAuthorizationHeader\n    AuthenticationFilter-&gt;&gt;User: unauthorized message\n  end\n  AuthenticationFilter-&gt;&gt;Auth: solve(Token)\n  critical isInvalidToken\n    Auth-&gt;&gt;User: unauthorized message\n  end\n  Auth-&gt;&gt;AuthenticationFilter: returns token claims\n  AuthenticationFilter-&gt;&gt;AuthenticationFilter: updateRequestHeader(ServerHttpRequest)\n  AuthenticationFilter-&gt;&gt;Gateway: follow the flux</code></pre> pom.xml<pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-cloud-starter-loadbalancer&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;!-- https://mvnrepository.com/artifact/com.github.ben-manes.caffeine/caffeine --&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;com.github.ben-manes.caffeine&lt;/groupId&gt;\n  &lt;artifactId&gt;caffeine&lt;/artifactId&gt;\n  &lt;version&gt;3.1.8&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;insper.store&lt;/groupId&gt;\n  &lt;artifactId&gt;auth&lt;/artifactId&gt;\n  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> application.yaml<pre><code>spring:\n  application:\n    name: store-gateway\n  cloud:\n    discovery:\n      locator:\n        enabled: true\n    gateway:\n      routes:\n\n        - id: auth\n          uri: lb://store-auth\n          predicates:\n            - Path=/auth/**\n\n        # - id: product\n        #   uri: lb://store-product\n        #   predicates:\n        #     - Path=/product/**\n\n      default-filters:\n        - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin\n      globalcors:\n        corsConfigurations:\n          '[/**]':\n            allowedOrigins: \"http://localhost\"\n            allowedHeaders: \"*\"\n            allowedMethods:\n            - GET\n            - POST\n\napi:\n  endpoints:\n    open: &gt;\n      POST /auth/register/,\n      POST /auth/login/\n</code></pre> GatewayConfiguration.java<pre><code>package insper.store.gateway;\n\nimport org.springframework.cloud.client.loadbalancer.LoadBalanced;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.reactive.function.client.WebClient;\n\n@Configuration\npublic class GatewayConfiguration {\n\n    @Bean\n    @LoadBalanced\n    public WebClient.Builder webClient() {\n        return WebClient.builder();\n    }\n\n}\n</code></pre> RouterValidator.java<pre><code>package insper.store.gateway.security;\n\nimport java.util.List;\nimport java.util.function.Predicate;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.http.server.reactive.ServerHttpRequest;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class RouterValidator {\n\n        @Value(\"${api.endpoints.open}}\") \n        private List&lt;String&gt; openApiEndpoints;\n\n        public Predicate&lt;ServerHttpRequest&gt; isSecured =\n                request -&gt; openApiEndpoints\n                        .stream()\n                        .noneMatch(uri -&gt; {\n                                String[] parts = uri.replaceAll(\"[^a-zA-Z0-9// ]\", \"\").split(\" \");\n                                return request.getMethod().toString().equalsIgnoreCase(parts[0])\n                                    &amp;&amp; request.getURI().getPath().equals(parts[1]);\n                        });\n\n}\n</code></pre> AuthenticationFilter.java<pre><code>package insper.store.gateway.security;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.cloud.gateway.filter.GatewayFilterChain;\nimport org.springframework.cloud.gateway.filter.GlobalFilter;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.server.reactive.ServerHttpRequest;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.reactive.function.client.WebClient;\nimport org.springframework.web.server.ResponseStatusException;\nimport org.springframework.web.server.ServerWebExchange;\n\nimport reactor.core.publisher.Mono;\nimport store.auth.IdIn;\nimport store.auth.IdOut;\n\n@Component\npublic class AuthenticationFilter implements GlobalFilter {\n\n    private static final String HEADER_AUTHORIZATION = \"Authorization\";\n    private static final String HEADER_BEARER = \"Bearer\";\n\n    @Autowired\n    private RouterValidator routerValidator;\n\n    @Autowired\n    private WebClient.Builder webClient;\n\n    @Override\n    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n        ServerHttpRequest request = exchange.getRequest();\n        if (!routerValidator.isSecured.test(request)) {\n            return chain.filter(exchange);\n        }\n        if (!isAuthMissing(request)) {\n            final String[] parts = this.getAuthHeader(request).split(\" \");\n            if (parts.length != 2 || !parts[0].equals(HEADER_BEARER)) {\n                throw new ResponseStatusException(HttpStatus.FORBIDDEN, \"Authorization header format must be Bearer {token}\");\n            }\n            final String token = parts[1];\n            return webClient\n                .defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)\n                .build()\n                .post()\n                .uri(\"http://store-auth/auth/token/\")\n                .bodyValue(new IdIn(token))\n                .retrieve()\n                .toEntity(IdOut.class)\n                .flatMap(response -&gt; {\n                    if (response != null &amp;&amp; response.getBody() != null) {\n                        this.updateRequest(exchange, response.getBody().id());\n                        return chain.filter(exchange);\n                    } else {\n                        throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, \"Invalid token\");\n                    }\n                });\n        }\n        throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, \"Missing authorization header\");\n    }\n\n    private String getAuthHeader(ServerHttpRequest request) {\n        return request.getHeaders().getOrEmpty(HEADER_AUTHORIZATION).get(0);\n    }\n\n    private boolean isAuthMissing(ServerHttpRequest request) {\n        return !request.getHeaders().containsKey(\"Authorization\");\n    }    \n\n    private void updateRequest(ServerWebExchange exchange, String id) {\n        exchange.getRequest().mutate()\n                .header(\"id-user\", id)\n                .build();\n    }\n\n}\n</code></pre>"},{"location":"handout/microservices/roadmap/","title":"Roadmap","text":""},{"location":"handout/microservices/roadmap/#microsservico","title":"Microsservi\u00e7o","text":"<p>A fim de implementar microsservi\u00e7os em Spring Boot, aqui, \u00e9 proposto uma abordagem de modulariza\u00e7\u00e3o de cada microsservi\u00e7o, de forma que exista uma interface de comunica\u00e7\u00e3o Java a ser consumida por outros microsservi\u00e7os, tamb\u00e9m em Java, e tamb\u00e9m um compromisso de implementa\u00e7\u00e3o. Essa estrat\u00e9gia visa aumentar a produtividade do ambiente de desenvolvimento em Java, j\u00e1 que para o consumo da API por outros frameworks sempre ser\u00e1 necess\u00e1rio reescrever as assinaturas de cada endpoint.</p>"},{"location":"handout/microservices/roadmap/#modularizacao","title":"Modulariza\u00e7\u00e3o","text":"<p>Crie dois projetos Mavens:</p> <ul> <li>um de interface, e;</li> <li>outro para o micro servi\u00e7o.</li> </ul> <p>A vantagem dessa abordagem \u00e9 que a interface pode ser utilizada em outros projetos como uma biblioteca a ser consumida.</p> <p>Exemplo de uso dessa abordagem no microsservi\u00e7o Account:</p> <pre><code>classDiagram\n  namespace Interface {\n    class AccountController {\n      &lt;&lt;interface&gt;&gt;\n      create(AccountIn)\n      read(String id): AccountOut\n      update(String id, AccountIn)\n      delete(String id)\n      findByEmailAndPassword(AccountIn)\n    }\n    class AccountIn {\n      &lt;&lt;record&gt;&gt;\n      String name\n      String email\n      String password\n    }\n    class AccountOut {\n      &lt;&lt;record&gt;&gt;\n      String id\n      String name\n      String email\n    }\n  }\n  namespace Resource {\n    class AccountResource {\n      &lt;&lt;REST API&gt;&gt;\n      -accountService\n    }\n    class AccountService {\n      &lt;&lt;service&gt;&gt;\n      -accountRepository\n      create(Account)\n    }\n    class AccountRepository {\n      &lt;&lt;nterface&gt;&gt;\n      findByEmailAndHash(String, String)\n    }\n    class AccountModel {\n      &lt;&lt;entity&gt;&gt;\n      String id\n      String name\n      String email\n      String hash\n    }\n    class Account {\n      &lt;&lt;dto&gt;&gt;\n      String id\n      String name\n      String email\n      String password\n    }\n  }\n  AccountController &lt;|-- AccountResource\n  AccountResource o-- AccountService\n  AccountService o-- AccountRepository</code></pre>"},{"location":"handout/microservices/roadmap/#interface","title":"Interface","text":"<p>Para compilar e instalar a interface do microsservi\u00e7o, crie um <code>pom.xml</code> espec\u00edfico para essa interface e seus dtos (AccountIn e AccountOut).</p> Installing the microservice interface<pre><code>mvn clean install\n</code></pre>"},{"location":"handout/microservices/roadmap/#implementacao","title":"Implementa\u00e7\u00e3o","text":"<p>A implementa\u00e7\u00e3o n\u00e3o precisa ser instalada como biblioteca do reposit\u00f3rio Maven, pois \u00e9 apenas para execu\u00e7\u00e3o do microsservi\u00e7o. Por\u00e9m, o microsservi\u00e7o deve ter explic\u00edto a chamada da biblioteca de interface no seu <code>pom.xml</code>.</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;insper.store&lt;/groupId&gt;\n  &lt;artifactId&gt;account&lt;/artifactId&gt;\n  &lt;version&gt;${project.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>O comando para empacotar o microsservi\u00e7o \u00e9:</p> Packaging the microservice<pre><code>mvn clean package\n</code></pre> <p>Adicionalmente, para executar o microsservi\u00e7o:</p> Packaging and running the microservice<pre><code>mvn clean package spring-boot:run\n</code></pre>"},{"location":"handout/microservices/roadmap/#banco-de-dados","title":"Banco de dados","text":"<p>Muitos microsservi\u00e7os podem persistir seus dados em banco de dados. Cada microsservi\u00e7o \u00e9 respons\u00e1vel pelo acesso e grava\u00e7\u00e3o de seus dados de forma aut\u00f4noma.</p> <p>Isso aumenta de forma significativa a complexidade do gerenciamento do microsservi\u00e7o, pois se torna necess\u00e1rio manter o gerenciamento da base de dados tais como: altera\u00e7\u00f5es, vers\u00f5es e roteiros de retornos.</p> <p>O Flyway \u00e9 uma biblioteca que pode ser acoplado ao framework Spring Boot a fim de ajudar na tarefa de gerenciamento e cria\u00e7\u00e3o do sistema de persit\u00eancia dos dados do microsservi\u00e7o.</p> <p>Para fazer uso dessa biblioteca, altere o <code>pom.xml</code> adicionando a depend\u00eancia da biblioteca JPA assim bem como a depend\u00eancia da biblioteca Flyway.</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;\n    &lt;artifactId&gt;flyway-core&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n    &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n    &lt;version&gt;42.7.2&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Altera\u00e7\u00f5es no arquivo de propriedades tamb\u00e9m s\u00e3o necess\u00e1rias, para definir o banco de dados e sua configura\u00e7\u00e3o JPA, assim bem como, a configura\u00e7\u00e3o do Flyway.</p> Exemplo baseado no microsservi\u00e7o Account<pre><code>spring:\n  datasource:\n    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/store}\n    username: ${DATABASE_USERNAME:store}\n    password: ${DATABASE_PASSWORD:store123321}\n    driver-class-name: org.postgresql.Driver\n  flyway:\n    baseline-on-migrate: true\n    schemas: account\n  jpa:\n    properties:\n      hibernate:\n        default_schema: account\n</code></pre> <p>A estrutura de organiza\u00e7\u00e3o e execu\u00e7\u00e3o de scripts de banco de dados do Flyway \u00e9 persistido na seguinte hier\u00e1rquia de diret\u00f3rios, onde cada arquivo \u00e9 executado em ordem alfanum\u00e9rica.</p> exemplo<pre><code>\ud83d\udcc4 store.account\n\ud83d\udcc1 store.account-resource\n\u2514\u2500\u2500 \ud83d\udcc1 src\n    \u2514\u2500\u2500 \ud83d\udcc1 main\n        \u251c\u2500\u2500 \ud83d\udcc4 java\n        \u2514\u2500\u2500 \ud83d\udcc1 resources\n            \u251c\u2500\u2500 \ud83d\udcc1 db\n            \u2502   \u2514\u2500\u2500 \ud83d\udcc1 migration\n            \u2502       \u251c\u2500\u2500 \ud83d\udcc4 V2024.02.16.001__create_schema.sql\n            \u2502       \u2514\u2500\u2500 \ud83d\udcc4 V2024.02.16.002__create_table_account.sql\n            \u2514\u2500\u2500 \ud83d\udcc4 application.yaml\n</code></pre> V2024.02.16.001__create_schema.sqlV2024.02.16.002__create_table_account.sql <pre><code>CREATE SCHEMA IF NOT EXISTS account;\n</code></pre> <pre><code>CREATE TABLE account\n(\n    id_account character varying(36) NOT NULL,\n    tx_name character varying(256) NOT NULL,\n    tx_email character varying(256) NOT NULL,\n    tx_hash character varying(256) NOT NULL,\n    CONSTRAINT account_pkey PRIMARY KEY (id_account)\n);\n</code></pre>"},{"location":"handout/microservices/roadmap/#conectando-microsservicos-openfeign","title":"Conectando Microsservi\u00e7os - OpenFeign","text":"<p>Nomeando o microsservi\u00e7o dentro do sistema de discovery.</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n  &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre> <pre><code>@FeignClient(name = \"store-account\")\npublic interface AccountController {\n  ...\n}\n</code></pre>"},{"location":"handout/microservices/roadmap/#docker","title":"Docker","text":"<p>Para cada microsservi\u00e7o Java Spring Cloud \u00e9 aconselh\u00e1vel criar um arquivo <code>Dockerfile</code> no diret\u00f3rio raiz do projeto a fim de permitir a cria\u00e7\u00e3o adequada da imagem do microservi\u00e7o.</p> Typical Dockerfile for Java microservice<pre><code>FROM openjdk:23-slim\nVOLUME /tmp\nCOPY target/*.jar app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n</code></pre>"},{"location":"handout/microservices/roadmap/#docker-compose","title":"Docker Compose","text":"<p>O Docker Compose permite criar um cluster com todos os microsservi\u00e7os neces\u00e1rios para o funcionamento de um sistema em uma rede apartada (nat).</p> <p>Para criar um docker compose basta criar um arquivo de configura\u00e7\u00e3o chamado <code>docker-compose.yaml</code> em uma pasta que possa acessar os demais microsservi\u00e7os, como uma pasta store.docker-platform.</p> exemplo<pre><code>\ud83d\udcc4 store.account\n\ud83d\udcc4 store.account-resource\n\ud83d\udcc1 store.docker-platform\n\u251c\u2500\u2500 \ud83d\udcc4 .env\n\u2514\u2500\u2500 \ud83d\udcc4 docker-compose.yaml\n</code></pre> <p>Dentro do arquivo, cada microsservi\u00e7o \u00e9 declarado e configurado, utilizando imagem que s\u00e3o criadas no momento de execu\u00e7\u00e3o do docker engine ou imagens que est\u00e3o dispon\u00edveis em algum diret\u00f3rio (eg.: DockerHub).</p> docker-compose.yaml<pre><code># docker compose up -d --build --force-recreate\nversion: '3.8'\nname: store\n\nservices:\n\n  db-store:\n    container_name: store-db-store\n    image: postgres:latest\n    ports:\n      - 5432:5432\n    environment:\n      - POSTGRES_USER=store\n      - POSTGRES_PASSWORD=store\n      - POSTGRES_DB=store\n    volumes:\n      - $VOLUME/postgres/store/data:/var/lib/postgresql/data\n    restart: always\n    networks:\n      - private-network\n\n  account:\n    build:\n      context: ../store.account-resource/\n      dockerfile: Dockerfile\n    image: store-account:latest\n    environment:\n      - spring.datasource.url=jdbc:postgresql://store-db-store:5432/store\n      - spring.datasource.username=store\n      - spring.datasource.password=store\n    deploy:\n      mode: replicated\n      replicas: 1\n    restart: always\n    networks:\n      - private-network\n    depends_on:\n      - db-store\n\nnetworks:\n  private-network:\n    driver: bridge\n</code></pre> <p>Arquivo de configura\u00e7\u00e3o de ambiente.</p> .env<pre><code>VOLUME=./volume\nCONFIG=./config\n</code></pre> <p>Na pasta do arquivo <code>docker-compose.yaml</code> execute o comando docker para criar as imagens e subir os containers:</p> Rise up a cluster<pre><code>docker compose up -d --build\n</code></pre> Shutdown the cluster<pre><code>docker compose down\n</code></pre> <p>Referencia:</p>"},{"location":"platform/circuit-breaker/","title":"Circuit breaker","text":""},{"location":"platform/circuit-breaker/#spring-cloud-circuit-breaker","title":"Spring Cloud Circuit Breaker","text":"<p>Spring Cloud Circuit Breaker is a service resilience pattern that allows you to provide default behavior when a network failure or any exception occurs while invoking a remote service. It's an abstraction over various circuit breaker implementations like Netflix Hystrix, Resilience4j, Sentinel, etc.</p> <p>Key components of Spring Cloud Circuit Breaker include:</p> <ul> <li> <p>Dependency: To use Spring Cloud Circuit Breaker, you need to include the <code>spring-cloud-starter-circuitbreaker-{implementation}</code> dependency in your project, where <code>{implementation}</code> could be <code>hystrix</code>, <code>resilience4j</code>, <code>sentinel</code>, etc.</p> </li> <li> <p>Configuration: You can configure the circuit breaker parameters like failure threshold, delay time, etc. in the application.properties (or application.yml) file.</p> </li> <li> <p>Usage: You can use the <code>@CircuitBreaker</code> annotation on a method to apply the circuit breaker pattern. If the method throws an exception, the circuit breaker will open and provide a fallback method.</p> </li> </ul>"},{"location":"platform/communcation/","title":"Communication","text":""},{"location":"platform/communcation/#synchronous-communication","title":"Synchronous Communication","text":""},{"location":"platform/communcation/#feign","title":"Feign","text":""},{"location":"platform/communcation/#asynchronous-communication","title":"Asynchronous Communication","text":""},{"location":"platform/communcation/#webclient","title":"WebClient","text":""},{"location":"platform/concepts/","title":"Concepts","text":""},{"location":"platform/concepts/#historical-context","title":"Historical Context","text":""},{"location":"platform/concepts/#single-block-system","title":"Single block system","text":"<p>Single block system, following the concept that a system is a blackbox schema, so many projects started in a simple single project that is a good choice to raise a system and try to use the initial features. This is a good approach for small and compact systems or for specialist systems where the speed of application matters.</p> <pre><code>---\ntitle: blackbox\n---\nflowchart LR\n  Input\n  subgraph Processing\n    direction TB\n    Storage\n    Business\n    UI\n  end\n  Output\n  Input --&gt; UI --&gt; Output</code></pre> <p>The main disadvantage of this approach is the strong coupling among business, user interface (UI), and storage. The coupling is so strong that there is a mix among all the components, which implies a high cost for maintenance.</p>"},{"location":"platform/concepts/#splitted-betweeen-data-and-program","title":"Splitted betweeen data and program","text":"<pre><code>---\ntitle: blackbox\n---\nflowchart LR\n  subgraph Processing\n    direction TB\n    subgraph Storage\n      x\n    end\n    subgraph Business\n      UI\n    end\n  end\n  Input --&gt; UI --&gt; Output\n  Business &lt;-- driver --&gt; Storage</code></pre> <p>System communicates to only an UI.</p> <p>Cobol</p>"},{"location":"platform/concepts/#multi-layer-approach","title":"Multi-layer approach","text":"<pre><code>---\ntitle: blackbox\n---\nflowchart LR\n  Input\n  subgraph Processing\n    direction TB\n    Storage\n    subgraph _\n      Businesses\n      UI\n    end\n  end\n  Output\n  Input --&gt; UI --&gt; Output\n  Business &lt;-- driver --&gt; Storage</code></pre>"},{"location":"platform/concepts/#mvc-pattern","title":"MVC Pattern","text":"<p>MVC stands for Model-View-Controller. It's a design pattern often used in web development. Here's a brief explanation of each component:</p> <ol> <li> <p>Model: This is the part of the system that handles the logic for the application data. Often model objects retrieve data (and store data) from a database.</p> </li> <li> <p>View: This is the part of the system that handles the display of the data. Most often the views are created from the model data.</p> </li> <li> <p>Controller: This is the part of the system that handles user interaction. Typically controllers read data from a view, control user input, and send input data to the model.</p> </li> </ol> <p>The idea behind MVC is that each of these components can be developed and tested independently, which can simplify the overall development process.</p> <pre><code>timeline\n    title Relevant Events\n    1991 : CORBA\n    1994 : GoF\n    1999 : J2EE 1.2 &lt;br&gt; initial specification\n    2002 : Spring\n    2006 : Java EE 5\n    2014 : Spring Boot\n    2019 : Jakarta EE 8</code></pre>"},{"location":"platform/concepts/#high-perfomance-architectures","title":"High-perfomance Architectures","text":"<p>High-performance architectures refer to the design and configuration of computer systems, networks, and software to achieve optimal speed, responsiveness, throughput, and efficiency. These architectures are specifically tailored to handle large-scale, resource-intensive, and performance-critical workloads. High-performance systems are often employed in scenarios such as data centers, cloud computing environments, scientific computing, financial services, and other applications where speed and efficiency are paramount.</p> <p>Here are key aspects and principles associated with high-performance architectures:</p>"},{"location":"platform/concepts/#parallelism-and-concurrency","title":"Parallelism and Concurrency","text":"<ul> <li>High-performance architectures often leverage parallelism and concurrency to execute multiple tasks simultaneously, improving overall throughput.</li> <li>Parallel processing involves dividing a task into smaller sub-tasks that can be processed concurrently, often across multiple processors or cores.</li> <li>Concurrency allows multiple tasks to be executed concurrently, even if they are not divided into explicit sub-tasks.</li> </ul>"},{"location":"platform/concepts/#distributed-systems","title":"Distributed Systems","text":"<ul> <li>Distributing workloads across multiple nodes in a network is a common strategy for achieving high performance.</li> <li>Distributed systems allow for horizontal scaling, where additional resources (nodes) can be added to handle increased demand.</li> </ul>"},{"location":"platform/concepts/#optimized-algorithms-and-data-structures","title":"Optimized Algorithms and Data Structures","text":"<ul> <li>Carefully designed algorithms and data structures are crucial for high performance.</li> <li>Efficient algorithms and data structures minimize computational complexity and memory usage.</li> </ul>"},{"location":"platform/concepts/#caching-and-memory-optimization","title":"Caching and Memory Optimization","text":"<ul> <li>Caching is used to store frequently accessed data in a location that allows faster retrieval, reducing the need to recompute or fetch data from slower storage.</li> <li>Memory optimization involves efficiently managing memory usage to minimize latency and improve responsiveness.</li> </ul>"},{"location":"platform/concepts/#scalability","title":"Scalability","text":"<ul> <li>High-performance architectures are designed to scale horizontally or vertically to accommodate growing workloads.</li> <li>Horizontal scalability involves adding more nodes or machines, while vertical scalability involves increasing the resources of individual nodes.</li> </ul>"},{"location":"platform/concepts/#load-balancing","title":"Load Balancing","text":"<ul> <li>Load balancing ensures that incoming requests are distributed evenly across multiple servers or resources.</li> <li>This helps prevent individual components from becoming bottlenecks and ensures optimal resource utilization.</li> </ul>"},{"location":"platform/concepts/#fault-tolerance-and-redundancy","title":"Fault Tolerance and Redundancy","text":"<ul> <li>High-performance architectures often incorporate redundancy and fault-tolerant mechanisms to ensure continuous operation in the face of hardware failures or network issues.</li> </ul>"},{"location":"platform/concepts/#specialized-hardware","title":"Specialized Hardware","text":"<ul> <li>In some cases, high-performance architectures may use specialized hardware, such as Graphics Processing Units (GPUs) or Field-Programmable Gate Arrays (FPGAs), to accelerate specific types of computations.</li> </ul>"},{"location":"platform/concepts/#optimized-network-architecture","title":"Optimized Network Architecture","text":"<ul> <li>Efficient communication between nodes is critical for high performance. Optimized network architectures, low-latency interconnects, and high-bandwidth connections contribute to overall system efficiency.</li> </ul>"},{"location":"platform/concepts/#monitoring-and-performance-tuning","title":"Monitoring and Performance Tuning","text":"<ul> <li>Continuous monitoring and performance tuning are essential to identify and address bottlenecks, optimize resource utilization, and ensure that the system is operating at peak efficiency.</li> </ul>"},{"location":"platform/concepts/#asynchronous-and-event-driven-design","title":"Asynchronous and Event-Driven Design","text":"<ul> <li>Asynchronous and event-driven architectures can improve system responsiveness by allowing components to operate independently and respond to events as they occur.</li> </ul> <p>High-performance architectures are tailored to the specific requirements of the applications they support. They often involve a combination of hardware and software optimizations to achieve the desired level of performance for a given workload. It's important to note that designing and maintaining high-performance architectures can be complex and may involve trade-offs between factors such as cost, complexity, and ease of maintenance.</p>"},{"location":"platform/concepts/#cap-theorem","title":"CAP theorem","text":"<p>CAP theorem, also known as Brewer's theorem, is a concept in distributed systems that addresses the trade-offs among three fundamental aspects: Consistency, Availability, and Partition Tolerance. It was introduced by computer scientist Eric Brewer in 2000. The CAP theorem suggests that in a distributed system, it is impossible to simultaneously achieve all three of these guarantees. A system can provide at most two out of the three.</p> <p>Here are the key components of the CAP theorem:</p>"},{"location":"platform/concepts/#consistency-c","title":"Consistency (C)","text":"<ul> <li>Definition: Every read receives the most recent write or an error. In other words, all nodes in the system see the same data at the same time.</li> <li>Implication: Ensuring consistency means that any read operation on the system will reflect the most recent write, even in the presence of concurrent operations.</li> </ul>"},{"location":"platform/concepts/#availability-a","title":"Availability (A)","text":"<ul> <li>Definition: Every request for a read or write operation receives a response without the guarantee that it contains the most recent version of the data.</li> <li>Implication: An available system can provide a response to read or write requests even if it may not reflect the most recent update. The system is operational and accessible.</li> </ul>"},{"location":"platform/concepts/#partition-tolerance-p","title":"Partition Tolerance (P)","text":"<ul> <li>Definition: The system continues to operate even when network partitions occur, meaning that communication between nodes is lost or delayed.</li> <li>Implication: In a partition-tolerant system, the network can be unreliable or experience failures, and the system can still function.</li> </ul> <p>According to the CAP theorem, a distributed system can prioritize at most two of these three guarantees, and the choice depends on the system's requirements and the nature of the application. Here are three possible scenarios:</p> <ul> <li>CA (Consistency and Availability): In scenarios where network partitions are rare and can be quickly resolved, a system may prioritize consistency and availability. This is common in traditional relational databases where consistency is crucial.</li> <li>CP (Consistency and Partition Tolerance): In scenarios where the network is unreliable, and partitions are frequent, a system may prioritize consistency and partition tolerance. This is common in systems that require strong consistency, such as many distributed databases.</li> <li>AP (Availability and Partition Tolerance): In scenarios where network partitions are common, and the system needs to remain operational, a system may prioritize availability and partition tolerance. This is common in systems where high availability and fault tolerance are critical, even if it means sacrificing strong consistency.</li> </ul> <p> </p> Source: Wikipedia - CAP Theorem <p>It's important to note that the CAP theorem provides a theoretical framework for understanding trade-offs in distributed systems but does not prescribe specific solutions. Different systems may make different choices based on their specific requirements and use cases. Additionally, advancements in distributed systems research have led to the exploration of systems that aim to provide a balance between the three aspects, challenging the strict interpretation of the CAP theorem in some cases.</p>"},{"location":"platform/concepts/#scalability_1","title":"Scalability","text":"<p>Scalability in the context of computer systems refers to the ability of a system to handle an increasing amount of work, or its potential to be enlarged to accommodate that growth. There are several types of scalability that are often discussed in the field of computing:</p>"},{"location":"platform/concepts/#vertical-scalability-scale-up","title":"Vertical Scalability (Scale-Up)","text":"Definition Vertical scalability involves adding more resources to a single node or machine in order to increase its capacity. Example Upgrading the CPU, adding more RAM, or increasing storage on a server. Pros Cons Simplicity in implementation. There's a limit to how much a single machine can be scaled vertically. it can be cost-effective for certain applications. It may also lead to downtime during upgrades."},{"location":"platform/concepts/#horizontal-scalability-scale-out","title":"Horizontal Scalability (Scale-Out)","text":"Definition Horizontal scalability involves adding more nodes or machines to a system, distributing the load across multiple machines. Example Adding more servers to a web application to handle increased traffic. Pros Cons Highly scalable, as resources can be easily added by adding more machines. Requires a distributed architecture. Can provide better fault tolerance. Some applications may not be easily parallelized."},{"location":"platform/concepts/#load-balancing_1","title":"Load Balancing","text":"Definition Load balancing involves distributing incoming network traffic or workload across multiple servers or resources to optimize resource utilization, maximize throughput, minimize response time, and avoid overloading any single resource. Example A load balancer distributing incoming web requests across multiple web servers. Pros Cons Improves overall system performance, ensures high availability, and can help with fault tolerance. Requires additional infrastructure, and the load balancer itself can become a potential bottleneck."},{"location":"platform/concepts/#elastic-scalability","title":"Elastic Scalability","text":"Definition Elastic scalability involves dynamically adjusting resources based on demand. Resources are automatically added or removed as needed. Example Cloud computing platforms that can automatically scale the number of virtual machines based on traffic. Pros Cons Efficient resource utilization, cost-effective as resources are only used when needed. Requires sophisticated monitoring and management systems."},{"location":"platform/concepts/#database-scalability","title":"Database Scalability","text":"Definition Database scalability refers to the ability of a database to handle an increasing amount of data and transactions. Vertical Database Scalability: Adding more resources to a single database server (e.g., increasing CPU, RAM). Horizontal Database Scalability: Distributing the database across multiple servers (e.g., sharding or partitioning). Pros Cons Can improve performance and handle increased data loads. Complex to implement, and horizontal scalability may require changes to the database schema."},{"location":"platform/concepts/#caching","title":"Caching","text":"Definition Caching involves storing frequently accessed data in a cache to reduce the need to fetch the same data from the original source repeatedly. Example Caching frequently used database queries or the results of computationally expensive operations. Pros Cons Improves response time, reduces load on backend systems. May lead to stale data if not managed properly. <p>Each type of scalability has its own strengths and weaknesses, and the choice of scalability approach depends on the specific requirements and constraints of the system or application being developed. Often, a combination of these scalability types is employed to achieve optimal performance and resource utilization.</p>"},{"location":"platform/concepts/#design-patterns","title":"Design Patterns","text":"<p>A design pattern in software development is a general, reusable solution to a common problem that occurs in a particular context within a software design. It's a template or a best practice that addresses a specific design or programming problem. Design patterns aren't complete solutions by themselves; rather, they provide a blueprint for solving certain types of problems.</p> <p>The concept of design patterns was popularized by the book \"Design Patterns: Elements of Reusable Object-Oriented Software,\" written by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides, often referred to as the \"Gang of Four\" (GoF)<sup>1</sup>. The book categorizes design patterns into three main types:</p> <ul> <li>Creational Patterns: These patterns deal with object creation mechanisms, trying to create objects in a manner suitable to the situation. Examples include the Singleton pattern, Factory Method pattern, and Abstract Factory pattern.</li> <li>Structural Patterns: These patterns focus on the composition of classes or objects. They help in creating a structure of classes and objects, making it easier to form larger structures. Examples include the Adapter pattern, Decorator pattern, and Composite pattern.</li> <li>Behavioral Patterns: Behavioral patterns are concerned with the interaction and responsibility of objects. They define communication patterns between objects and the responsibility of one object in a given situation. Examples include Observer pattern, Strategy pattern, and Command pattern.</li> </ul> <p>Design patterns provide several benefits in software development:</p> <ul> <li>Reusability: Design patterns promote reusability of solutions to common problems. Once a design pattern is established, it can be applied to similar problems in different parts of the system.</li> <li>Scalability: Using design patterns can enhance the scalability of a system by providing proven solutions that can be applied as the system grows.</li> <li>Maintainability: Patterns make code more maintainable by providing a clear and organized structure. Developers familiar with design patterns can understand the overall architecture more easily.</li> <li>Common Vocabulary: Design patterns establish a common vocabulary for developers. When a developer mentions a particular pattern, others who are familiar with it can quickly understand the solution being implemented.</li> </ul> <p>While design patterns are valuable tools, it's essential to use them judiciously. Not every problem requires a design pattern, and using patterns unnecessarily can lead to overly complex and difficult-to-maintain code. It's important to understand the problem at hand and choose the appropriate design pattern when it genuinely adds value to the solution.</p> <ol> <li> <p>GAMMA, E.; HELM, R.; JOHNSON, R., VLISSIDES, J., Design Patterns: Elements of Reusable Object-Oriented Software, 1\u00aa ed., Addison-Wesley Professional, 1994.\u00a0\u21a9</p> </li> <li> <p> Wikipedia - CAP Theorem \u21a9</p> </li> <li> <p>Gang of Four - Gof \u21a9</p> </li> </ol>"},{"location":"platform/config/","title":"Config","text":""},{"location":"platform/config/#spring-cloud-config","title":"Spring Cloud Config","text":"<p>Spring Cloud Config provides server-side and client-side support for externalized configuration in a distributed system. With the Config Server, you have a central place to manage external properties for applications across all environments.</p> <p>Key components of Spring Cloud Config include:</p> <ul> <li> <p>Config Server: A standalone server that provides a REST API for providing configuration properties to clients. The server is embeddable in a Spring Boot application, by using the <code>@EnableConfigServer</code> annotation. The properties can be stored in various types of repositories (Git, SVN, filesystem, etc.).</p> </li> <li> <p>Config Client: A library for Spring Boot applications. It fetches the configuration properties from the Config Server and bootstrap them into the application's context. It's included in the classpath by adding the <code>spring-cloud-starter-config</code> dependency.</p> </li> <li> <p>Refresh Scope: Spring Cloud Config includes a <code>RefreshScope</code> capability which allows properties to be reloaded without restarting the application. You can expose a <code>/refresh</code> endpoint in your application that, when invoked, will cause the application to re-fetch properties from the Config Server.</p> </li> </ul> <p>Spring Cloud Config Server</p>"},{"location":"platform/discovery/","title":"Discovery","text":"<p>Spring Cloud Discovery is a module in the Spring Cloud framework that provides a way for services to discover and communicate with each other in a distributed system. It helps manage the dynamic nature of microservices by allowing them to register themselves and discover other services without hardcoding their locations.</p> <p>In a distributed system, services often need to communicate with each other to fulfill their functionalities. However, the locations of these services may change frequently due to scaling, failures, or deployments. Spring Cloud Discovery solves this problem by providing a service registry where services can register themselves and provide information about their location, such as IP address and port.</p> <p>The service registry acts as a central database of all the services in the system. When a service needs to communicate with another service, it can query the service registry to obtain the necessary information. This allows services to be decoupled from each other and eliminates the need for hardcoding service locations in the code.</p> <p>Spring Cloud Discovery supports multiple service registry implementations, such as Netflix Eureka, Consul, and ZooKeeper. These implementations provide additional features like service health checks, load balancing, and failover.</p> <p>To use Spring Cloud Discovery, you need to include the necessary dependencies in your project and configure the service registry implementation you want to use. Then, you can annotate your services with @EnableDiscoveryClient to enable service registration and discovery. Spring Cloud Discovery will automatically register your services with the service registry and provide a client library to query the registry for service information.</p> <p>Here's an example of how you can use Spring Cloud Discovery with Netflix Eureka:</p> <pre><code>@SpringBootApplication\n@EnableDiscoveryClient\npublic class MyServiceApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(MyServiceApplication.class, args);\n    }\n}\n</code></pre> <p>In this example, the @EnableDiscoveryClient annotation enables service registration and discovery using the configured service registry. When the application starts, it will register itself with the service registry and be discoverable by other services.</p> <p>Overall, Spring Cloud Discovery simplifies the process of service discovery and communication in a distributed system, making it easier to build and maintain microservices architectures.</p>"},{"location":"platform/gateway/","title":"Gateway","text":""},{"location":"platform/gateway/#concepts","title":"Concepts","text":"<p>The Gateway design pattern is a structural design pattern that provides a centralized entry point for handling requests from external systems. It acts as a mediator between the client and the server, allowing the client to make requests to multiple services through a single interface.</p> <p>In the context of software development, a gateway acts as an intermediary between the client and the backend services. It abstracts away the complexity of interacting with multiple services by providing a unified API for the client to communicate with.</p> <p>The main benefits of using the Gateway design pattern include:</p> <ul> <li> <p>Simplified client code: The client only needs to interact with the gateway, which handles the routing and communication with the appropriate backend services. This reduces the complexity and coupling in the client code.</p> </li> <li> <p>Centralized cross-cutting concerns: The gateway can handle common concerns such as authentication, authorization, rate limiting, caching, and logging in a centralized manner. This eliminates the need to implement these features in each individual service.</p> </li> <li> <p>Scalability and flexibility: The gateway can distribute requests to multiple instances of backend services, allowing for horizontal scaling. It also provides the flexibility to add or remove backend services without affecting the client code.</p> </li> <li> <p>Protocol translation: The gateway can handle protocol translation, allowing clients to use different protocols (e.g., HTTP, WebSocket) while the backend services can use a different protocol.</p> </li> <li> <p>Service aggregation: The gateway can aggregate data from multiple backend services and provide a unified response to the client. This reduces the number of requests made by the client and improves performance.</p> </li> </ul> <p>To implement the Gateway design pattern, various technologies and frameworks can be used, such as Spring Cloud Gateway, Netflix Zuul, or NGINX. These tools provide features like routing, load balancing, and request filtering, making it easier to build a robust and scalable gateway.</p> <p>In summary, the Gateway design pattern provides a centralized entry point for handling requests from clients and abstracts away the complexity of interacting with multiple backend services. It simplifies client code, centralizes cross-cutting concerns, and provides scalability and flexibility in a distributed system architecture.</p>"},{"location":"platform/gateway/#spring-cloud-gateway","title":"Spring Cloud Gateway","text":"<p>https://spring.io/projects/spring-cloud-gateway/</p>"},{"location":"platform/load-balancing/","title":"Load balancing","text":""},{"location":"platform/load-balancing/#spring-cloud-loadbalancer","title":"Spring Cloud LoadBalancer","text":"<p>Spring Cloud LoadBalancer is a generic abstraction over load balancing algorithms that you can use with service discovery clients like Eureka, Consul, and Zookeeper. It provides a round-robin load balancing implementation by default, but you can also implement your own custom load balancing algorithms.</p> <p>Key components of Spring Cloud LoadBalancer include:</p> <ul> <li> <p>Dependency: To use Spring Cloud LoadBalancer, you need to include the <code>spring-cloud-starter-loadbalancer</code> dependency in your project.</p> </li> <li> <p>Configuration: By default, Spring Cloud LoadBalancer uses a simple round-robin strategy for load balancing. If you want to customize this, you can create a bean of type <code>ServiceInstanceListSupplier</code> that returns a custom list of instances for load balancing.</p> </li> <li> <p>Usage: You can use the <code>@LoadBalanced</code> annotation on a <code>RestTemplate</code> or <code>WebClient.Builder</code> bean to integrate it with Spring Cloud LoadBalancer. When you make a request through this client, it will automatically be load balanced.</p> </li> </ul>"},{"location":"platform/microservices/","title":"Microservices","text":""},{"location":"platform/microservices/#microservices-concepts","title":"Microservices Concepts","text":"<p>Microservices, also known as the microservices architecture, is an architectural style that structures an application as a collection of small autonomous services, modeled around a business domain.</p> <p>Key concepts of microservices include:</p> <ul> <li>Single Responsibility: Each microservice should have a single responsibility and should implement a single business capability.</li> <li>Independence: Microservices should be able to run and evolve independently of each other. They should be independently deployable and scalable.</li> <li>Decentralization: Microservices architecture favors decentralized governance. Teams have the freedom to choose the best technology stack that suits their service.</li> <li>Isolation of Failures: If a microservice fails, it should not impact the availability of other services.</li> <li>Data Isolation: Each microservice should have its own database to ensure that the services are loosely coupled and can evolve independently.</li> <li>Communication: Microservices communicate with each other through well-defined APIs and protocols, typically HTTP/REST with JSON or gRPC with Protobuf.</li> <li>Infrastructure Automation: Due to the distributed nature of the microservices architecture, automation of infrastructure is a must. This includes automated provisioning, scaling, and deployment.</li> <li>Observability: With many different services, it's important to have excellent monitoring and logging to detect and diagnose problems.</li> </ul>"},{"location":"platform/microservices/#domain-driven-design","title":"Domain Driven Design","text":"<p>Domain-Driven Design (DDD) is a software development approach that emphasizes collaboration between technical experts and domain experts. The goal is to create software that is a deep reflection of the underlying domain, which is the specific area of business or activity that the software is intended to support.</p> <p>Key concepts of DDD include:</p> <ul> <li>Ubiquitous Language: A common language established between developers and domain experts, used to describe all aspects of the domain.</li> <li>Bounded Context: A boundary within which a particular model is defined and applicable.</li> <li>Entities: Objects that have a distinct identity that persists over time and across different representations.</li> <li>Value Objects: Objects that are defined by their attributes, not their identity.</li> <li>Aggregates: Clusters of entities and value objects that are treated as a single unit.</li> <li>Repositories: They provide a way to obtain references to aggregates.</li> <li>Domain Events: Events that domain experts care about.</li> <li>Services: Operations that don't naturally belong to any entity or value object.</li> </ul> <p>By focusing on the domain and domain logic, DDD provides techniques to develop complex systems targeting real-world scenarios. It helps to reduce the complexity by dividing the system into manageable and interconnected parts.</p> <p> </p> Source: System Design 101 - Microservice Architecture"},{"location":"platform/microservices/#design-a-microservice-platform","title":"Design a Microservice Platform","text":"<pre><code>flowchart LR\n  subgraph Client\n    direction LR\n    Web\n    Mobile\n    Desktop\n  end\n  subgraph Microservices\n    direction LR\n    gateway[\"Gateway\"]\n    subgraph Essentials\n      direction TB\n      discovery[\"Discovery\"]\n      auth[\"Auth\"]\n      config[\"Configuration\"]\n    end\n    subgraph Businesses\n      direction TB\n      ms1[\"Service 1\"]\n      ms2[\"Service 2\"]\n      ms3[\"Service 3\"]\n    end\n  end\n  Client --&gt; lb[\"Load Balance\"] --&gt; gateway --&gt; Businesses\n  gateway --&gt; auth\n  gateway --&gt; discovery\n  click gateway \"../gateway/\" \"Gateway\"\n  click discovery \"../discovery/\" \"Discovery\"\n  click auth \"../auth-service/\" \"Auth\"\n  click config \"../config/\" \"Configuration\"\n  click lb \"../load-balancing/\" \"Load Balance\"</code></pre> <ol> <li> <p>XU, A., System Design 101.\u00a0\u21a9</p> </li> <li> <p>Wikipedia - Domain Driven Design \u21a9</p> </li> </ol>"},{"location":"platform/payment/","title":"Payment","text":"<p>FinOps</p>"},{"location":"platform/database/caching/","title":"Caching","text":"<p>Spring Boot Cache</p> <p>https://docs.spring.io/spring-framework/docs/4.1.5.RELEASE/spring-framework-reference/html/cache.html</p> <p>Redis</p> <p>https://medium.com/nstech/programa%C3%A7%C3%A3o-reativa-com-spring-boot-webflux-e-mongodb-chega-de-sofrer-f92fb64517c3</p>"},{"location":"platform/database/caching/#handout-redis","title":"Handout Redis","text":""},{"location":"platform/database/flyway/","title":"Flyway","text":""},{"location":"platform/database/flyway/#flyway","title":"Flyway","text":"<p>Flyway is an open-source database migration tool that strongly favors simplicity and convention over configuration. It is designed to simplify the process of versioning a database, similar to how Git versions source code. </p> <p>With Flyway, you can apply version control to your database which allows you to migrate it to a newer version and also revert changes if needed. Flyway uses SQL scripts or Java-based migrations to evolve your database schema in a way that is controllable and predictable.</p> <p>Key features of Flyway include:</p> <ul> <li>Version control for your database: Allows you to track changes and apply version control to your database, similar to how you would with your source code.</li> <li>Support for SQL and Java-based migrations: You can use SQL for simple changes, and Java for complex migrations.</li> <li>Repeatable migrations: You can use this feature to manage objects in your database that can't be easily handled with versioned migrations, like stored procedures and views.</li> <li>Multiple database support: Flyway supports a wide variety of databases including MySQL, PostgreSQL, SQL Server, and more.</li> </ul> <p>https://www.baeldung.com/liquibase-vs-flyway</p> <ol> <li> <p>https://www.baeldung.com/database-migrations-with-flyway\u00a0\u21a9</p> </li> </ol>"},{"location":"platform/messaging/concepts/","title":"Concepts","text":"<p>https://medium.com/@thiagolenz/tutorial-spring-boot-e-rabbitmq-como-fazer-e-porqu%C3%AA-4a6cc34a3bd1</p> <p>https://www.simplilearn.com/kafka-vs-rabbitmq-article</p> <p>https://mmarcosab.medium.com/criando-consumer-e-produkafka-com-spring-boot-b427cc2f841d</p>"},{"location":"platform/observability/logging/","title":"Logging","text":""},{"location":"platform/observability/monitoring/","title":"Monitoring","text":""},{"location":"platform/security/concepts/","title":"Concepts","text":"<p>Security is an important aspect of software development. It involves protecting the confidentiality, integrity, and availability of data and resources. Two key concepts in security are authentication and authorization.</p>"},{"location":"platform/security/concepts/#authentication","title":"Authentication","text":"<p>Authentication is the process of verifying the identity of a user or system. It ensures that the user or system is who they claim to be. Common authentication methods include passwords, biometrics, and two-factor authentication. The system checks these credentials against the stored data. If the credentials are valid, the system confirms the user's identity.</p> <p>In many systems, after successful authentication, the system generates a token. This token is a piece of data that represents the user's authentication session. It's like a digital ticket that proves the user's identity for a certain period of time.</p> <p>This token is then sent back to the user. The user's client software (like a web browser) stores this token and sends it along with every subsequent request to the server (in case of stateless server). This way, the server knows that the request comes from an authenticated user without needing to ask for the credentials again.</p> <p>Here's a simplified step-by-step process:</p> <pre><code>sequenceDiagram\n  autonumber\n  actor User\n  User-&gt;&gt;+Auth Server: authentication(credentials)\n  Auth Server-&gt;&gt;Auth Server: verifies credenditals and generates a token\n  Auth Server-&gt;&gt;-User: returns the token\n  User-&gt;&gt;User: stores the token to use for the next requests</code></pre> <ol> <li>The user sends their username and password (or other credentials) to the server;</li> <li>The server verifies the credentials. If they're valid, the server generates a token.</li> <li>The server sends this token back to the user.</li> <li>The user's client software stores this token.</li> <li>For every subsequent request, the client sends this token along with the request.</li> <li>The server checks the token to ensure it's valid and hasn't expired.</li> <li>This token-based authentication process is commonly used in many modern web applications and APIs. It helps maintain the user's session and allows the server to authenticate requests without storing the user's state.</li> </ol>"},{"location":"platform/security/concepts/#authorization","title":"Authorization","text":"<p>Authorization is the process of granting or denying access to specific resources or actions based on the authenticated user's privileges. It determines what a user is allowed to do within a system. Authorization can be role-based, where permissions are assigned based on predefined roles, or attribute-based, where permissions are based on specific attributes of the user.</p> <p>In many systems, the token not only represents the user's identity, but also includes information about their permissions or roles. This is often done using a type of token called a JSON Web Token (JWT), which can include a payload of data.</p> <p>Here's a simplified step-by-step process:</p> <pre><code>sequenceDiagram\n  autonumber\n  actor User\n  User-&gt;&gt;Auth Server: request with token\n  Auth Server-&gt;&gt;Auth Server: decodes the token and extracts claims\n  Auth Server-&gt;&gt;Auth Server: verifies permissions\n  critical allowed\n    Auth Server-&gt;&gt;Secured Resource: authorizes the request\n    Secured Resource-&gt;&gt;User: returns the response\n  option denied\n    Auth Server--&gt;&gt;User: unauthorized message\n  end  </code></pre> <ol> <li>After authentication, the user's client software sends a request to a server. This request includes the token.</li> <li>The server decodes the token and extracts the user's identity and permissions.</li> <li>The server checks whether the user has the necessary permissions for the requested action. This could involve checking the user's roles or other attributes against the requirements for the action.</li> <li>If the user has the necessary permissions, the server allows the action. If not, the server denies the action.</li> </ol> <p>This process allows the server to authorize actions without needing to repeatedly look up the user's permissions. It also allows for stateless servers, as the necessary information is included in every request.</p> <p>By implementing strong authentication and authorization mechanisms, software systems can ensure that only authorized users have access to sensitive data and functionalities, reducing the risk of unauthorized access and potential security breaches.</p> <p>As the platform has only one entrace point, it is</p> <p>JWT is a decentralized </p> <p>The point of entrance of API is the gateway, then as suggested by <sup>1</sup>.</p>"},{"location":"platform/security/concepts/#auth-service","title":"Auth Service","text":"<ul> <li>Responsabilities:<ul> <li>Registration:</li> <li>Authentication:</li> <li>Authorization:</li> </ul> </li> </ul> <p>Two Maven Projects</p> <ul> <li> <p>Interfaces</p> </li> <li> <p>Implemmentation: resource</p> </li> </ul> <pre><code>classDiagram\n  namespace Interface {\n    class AuthController {\n      &lt;&lt;interface&gt;&gt;\n      register(RegisterIn)\n      authenticate(CredentialIn)\n      identify(String)\n    }\n    class RegisterIn {\n      &lt;&lt;record&gt;&gt;\n      String firstName\n      String lastName\n      String email\n      String password\n    }\n    class CredentialIn {\n      &lt;&lt;record&gt;&gt;\n      String email\n      String password\n    }\n  }\n  namespace Resource {\n    class AuthResource {\n      &lt;&lt;REST API&gt;&gt;\n      -authService\n    }\n    class AuthService {\n      &lt;&lt;service&gt;&gt;\n      -registerRepository\n      -userRepository\n      register(Register)\n      authenticate(Credential)\n      identify(Session)\n    }\n    class RegisterRepository {\n      &lt;&lt;interface&gt;&gt;\n    }\n    class RegisterEntity {\n      &lt;&lt;entity&gt;&gt;\n    }\n    class UserRepository {\n      &lt;&lt;interface&gt;&gt;\n    }\n    class UserEntity {\n      &lt;&lt;entity&gt;&gt;\n    }\n  }\n  AuthController &lt;|-- AuthResource\n  AuthResource o-- AuthService\n  AuthService o-- RegisterRepository\n  AuthService o-- UserRepository\n  RegisterRepository \"1\" --&gt; \"0..*\" RegisterEntity\n  UserRepository \"1\" --&gt; \"0..*\" UserEntity</code></pre>"},{"location":"platform/security/concepts/#addtional-material","title":"Addtional Material","text":"<ul> <li> <p>JSON Web Token</p> </li> <li> <p> Autentica\u00e7\u00e3o e Autoriza\u00e7\u00e3o com Spring Security e JWT Tokens by Fernanda Kipper</p> <p></p> </li> </ul> <ol> <li> <p>DELANTHA, R., Spring Cloud Gateway security with JWT, 2023.\u00a0\u21a9</p> </li> </ol>"},{"location":"platform/security/jwt/","title":"Jwt","text":""},{"location":"platform/security/jwt/#jwt-json-web-token","title":"JWT - JSON Web Token","text":"<p>JWT stands for JSON Web Token. It is a compact, URL-safe means of representing claims between two parties. JWTs are commonly used to secure the transmission of information between parties in a web environment, typically for authentication and information exchange. The JWT specification is defined by RFC 7519<sup>1</sup> and it is a decentralized approach for security (which can support horizontal scalability).</p> <p>Here are the key components and concepts of JWT:</p> <ul> <li>JSON Format: JWTs are represented as JSON objects that are easy to parse and generate. The JSON format makes them human-readable and easy to work with.</li> <li> <p>Three Parts: JWTs consist of three parts separated by dots (<code>.</code>): Header, Payload, and Signature.</p> <ul> <li> <p>Header: The header typically consists of two parts: the type of the token (JWT) and the signing algorithm being used, such as HMAC SHA256 or RSA.</p> </li> <li> <p>Payload: The payload contains the claims. Claims are statements about an entity (typically, the user) and additional data. There are three types of claims: registered, public, and private claims.</p> </li> <li> <p>Signature: To create the signature part, you take the encoded header, the encoded payload, a secret, the algorithm specified in the header, and sign that.</p> </li> </ul> </li> <li> <p>Encoding: Each of the three parts is Base64Url encoded, and the resulting strings are concatenated with periods between them. The final JWT looks like: <code>xxxxx.yyyyy.zzzzz</code>.</p> </li> <li>Stateless and Self-contained: JWTs are stateless, meaning that all the information needed is within the token itself. The server doesn't need to store the user's state. They are also self-contained, meaning that all the information needed is contained within the token.</li> <li>Use Cases: JWTs are commonly used for authentication and information exchange between parties. For example, after a user logs in, a server could generate a JWT and send it to the client. The client can then include the JWT in the headers of subsequent requests to access protected resources. The server can verify the authenticity of the JWT using the stored secret key.</li> <li>Security Considerations: While JWTs are widely used and versatile, it's important to handle them securely. For instance, the key used to sign the JWT should be kept secret, and HTTPS should be used to transmit JWTs to prevent man-in-the-middle attacks.</li> </ul> <p>Here's a simple example of a JWT created on JWT Builder<sup>2</sup>:</p> <p><code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJJbnNwZXIiLCJpYXQiOjE3MDMwMDgzMzgsImV4cCI6MjAxODU0MTEzOCwiYXVkIjoid3d3Lmluc3Blci5lZHUuYnIiLCJzdWIiOiJodW1iZXJ0b3JzQGluc3Blci5lZHUuYnIiLCJHaXZlbk5hbWUiOiJIdW1iZXJ0byIsIlN1cm5hbWUiOiJTYW5kbWFubiIsIkVtYWlsIjoiaHVtYmVydG9yc0BpbnNwZXIuZWR1LmJyIiwiUm9sZSI6IlByb2Zlc3NvciJ9.SsGdvR5GbYWTRbxY7IGxHt1vSxhkpRueBJWsi0lrPhJVCICp119QjU8F3QvHW0yF5tw-HhQ9RVh0l89t4M0LNw</code></p> <p>This JWT consists of three parts, decoded by <sup>3</sup>:</p> HeaderPayloadSignature <p><code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9</code></p> <pre><code>{\n  \"typ\": \"JWT\",\n  \"alg\": \"HS512\"\n}\n</code></pre> <p><code>eyJpc3MiOiJJbnNwZXIiLCJpYXQiOjE3MDMwMDgzMzgsImV4cCI6MjAxODU0MTEzOCwiYXVkIjoid3d3Lmluc3Blci5lZHUuYnIiLCJzdWIiOiJodW1iZXJ0b3JzQGluc3Blci5lZHUuYnIiLCJHaXZlbk5hbWUiOiJIdW1iZXJ0byIsIlN1cm5hbWUiOiJTYW5kbWFubiIsIkVtYWlsIjoiaHVtYmVydG9yc0BpbnNwZXIuZWR1LmJyIiwiUm9sZSI6IlByb2Zlc3NvciJ9</code></p> <pre><code>{\n  \"iss\": \"Insper\",\n  \"iat\": 1703008338,\n  \"exp\": 2018541138,\n  \"aud\": \"www.insper.edu.br\",\n  \"sub\": \"humbertors@insper.edu.br\",\n  \"GivenName\": \"Humberto\",\n  \"Surname\": \"Sandmann\",\n  \"Email\": \"humbertors@insper.edu.br\",\n  \"Role\": \"Professor\"\n}\n</code></pre> <p><code>SsGdvR5GbYWTRbxY7IGxHt1vSxhkpRueBJWsi0lrPhJVCICp119QjU8F3QvHW0yF5tw-HhQ9RVh0l89t4M0LNw</code></p> <pre><code>HMACSHA512(\n  base64UrlEncode(header) + \".\" +\n  base64UrlEncode(payload),\n  qwertyuiopasdfghjklzxcvbnm123456,\n)\n</code></pre> <p>JWTs are widely used in web development due to their simplicity, flexibility, and support across various programming languages and frameworks. They are commonly used in token-based authentication systems.</p>"},{"location":"platform/security/jwt/#addtional-material","title":"Addtional Material","text":"<ul> <li> <p>Spring Cloud Security</p> </li> <li> <p> ByeteByteGo - Why is JWT popular?</p> <p></p> </li> </ul> <ol> <li> <p>RFC 7519 - JSON Web Token (JWT), 2015.\u00a0\u21a9</p> </li> <li> <p>JWT - Builder.\u00a0\u21a9</p> </li> <li> <p>jwt.io - JWT Verification.\u00a0\u21a9</p> </li> <li> <p>Unix Time Stamp - Epoch Converter.\u00a0\u21a9</p> </li> <li> <p>DELANTHA, R., Spring Cloud Gateway security with JWT, 2023.\u00a0\u21a9</p> </li> <li> <p>Wikipedia - Pepper (cryptography).\u00a0\u21a9</p> </li> <li> <p>PGzlan, Serve your hash with Salt and Pepper for Stronger Account Security, 2023.\u00a0\u21a9</p> </li> </ol>"},{"location":"platform/security/oauth2/","title":"Oauth2","text":"<p>OAuth2 is an authorization framework that allows applications to obtain limited access to user accounts on an HTTP service, such as Facebook, Google, or GitHub, without exposing the user's credentials. It provides a secure and standardized way for users to grant access to their resources to third-party applications.</p> <p>The principal process to obtain a valid credential using OAuth2 involves the following steps:</p> <ol> <li> <p>Registration: The application developer needs to register their application with the OAuth2 provider (e.g., Google, Facebook) to obtain client credentials, including a client ID and client secret. These credentials are used to identify and authenticate the application.</p> </li> <li> <p>User Authorization: When a user wants to grant access to their resources, the application redirects them to the OAuth2 provider's authorization endpoint. This typically involves the user being presented with a login screen and being asked to grant permission to the application.</p> </li> <li> <p>Authorization Grant: Once the user grants permission, the OAuth2 provider issues an authorization grant to the application. This grant can take various forms, such as an authorization code or an access token.</p> </li> <li> <p>Token Exchange: The application then exchanges the authorization grant for an access token by sending a request to the OAuth2 provider's token endpoint. The access token is a credential that the application can use to access the user's resources on behalf of the user.</p> </li> <li> <p>Accessing Resources: With the access token, the application can make requests to the OAuth2 provider's API endpoints to access the user's resources. The access token is typically included in the request headers or as a query parameter.</p> </li> <li> <p>Refreshing Tokens: Access tokens have a limited lifespan. To continue accessing the user's resources, the application can use a refresh token (if provided) to obtain a new access token without requiring the user to reauthorize the application.</p> </li> </ol> <p>It's important to note that the exact process and terminology may vary slightly depending on the OAuth2 provider and the specific implementation. However, the general flow remains consistent across most OAuth2 implementations.</p>"},{"location":"versions/2024.1/","title":"2024.1","text":"Info <p> Prof. Humberto Sandmann</p> <p> humbertors@insper.edu.br</p> <p>Students</p> <p></p> <p>Meetings</p> Evento Dia In\u00edcio T\u00e9rmino Aula Qua. 09h45 11h45 Aula Sex. 07h30 09h30 Atendimento Seg. 12h00 13h30 <p>Grades</p> FinalIndividualTeam \\[ \\text{Final Grade} = \\left\\{\\begin{array}{lll}     \\text{Individual} \\geq 5 \\bigwedge \\text{Team} \\geq 5 &amp;     \\implies &amp;     \\displaystyle \\frac{ \\text{Individual} + \\text{Team} } {2}     \\\\     \\\\     \\text{Otherwise} &amp;     \\implies &amp;     \\min\\left(\\text{Individual}, \\text{Team}\\right)     \\end{array}\\right. \\] Avalia\u00e7\u00e3o Descri\u00e7\u00e3o Data Nota (%) Roteiros M\u00e9dia aritm\u00e9tica dos 2 roteiros de maiores notas. 60.0 Roteiro 1 Testes - Roteiro 2 Bottlenecks 22.mai Roteiro 3 Cloud 22.mai Participa\u00e7\u00e3o Nota geral atribu\u00edda ao grupo distribu\u00edda aos membros pelo pr\u00f3prio grupo, apenas notas inteiras \\([0; 10]\\) 40.0 Avalia\u00e7\u00e3o Descri\u00e7\u00e3o Data Nota (%) Checkpoints CP1 Montar um Spring Cloud 05.abr 7.5 CP2 Testes e Pipeline 19.abr 7.5 CP3 K8s 10.mai 7.5 CP4 Platform as a Product 22.mai 7.5 Apresenta\u00e7\u00e3o 10.0 Projeto 60.0 <p>Individual</p> Roteiro 1Roteiro 2Roteiro 3Participa\u00e7\u00e3o <p>Testes</p> <ul> <li> Roteiros de testes de funcionalidades ou de testes de carga</li> <li> Documenta\u00e7\u00e3o dos resultados obtidos</li> </ul> <p>Bottlenecks</p> <ul> <li> <p> Implementa\u00e7\u00e3o de um microservi\u00e7o de bottleneck para o projeto:</p> <ul> <li>Mensageria<ul> <li>RabbitMQ</li> <li>Kafka</li> <li>Spring e Kafka, Giuliana Bezerra</li> </ul> </li> <li>Resili\u00eancia<ul> <li>Spring Cloud Circuit Breaker</li> </ul> </li> <li>Configura\u00e7\u00e3o<ul> <li>Spring Cloud Config</li> </ul> </li> <li>In-Memory Database<ul> <li>Redis, Giuliana Bezerra</li> </ul> </li> <li>Payments (sandboxes)<ul> <li>PayPal</li> <li>Hearland</li> <li>Mercado Pago</li> </ul> </li> <li>Jenkins<ul> <li>SonarQube</li> <li>Dependency Analyzes</li> </ul> </li> </ul> </li> </ul> <p>Cloud</p> <ul> <li> Roteiro de publica\u00e7\u00e3o de um microsservi\u00e7o em Cloud</li> </ul> <ul> <li> Contribui\u00e7\u00f5es no GitHub dos participantes</li> <li> Documenta\u00e7\u00e3o das reuni\u00f5es (dayly, retro, etc)</li> <li> Nota geral atribu\u00edda pelo professor mas dividida pelo grupo</li> </ul> <p>Team</p> Checkpoint 1Checkpoint 2Checkpoint 3Checkpoint 4Apresenta\u00e7\u00e3oProjeto <p>Desenvolvimento Spring Cloud</p> <ul> <li> Servi\u00e7o de discovery</li> <li> Servi\u00e7o de gateway</li> <li> Servi\u00e7o de autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o</li> <li> 3 microsservi\u00e7os com persist\u00eancia de dados</li> <li> Comunica\u00e7\u00e3o entre, ao menos 2, microsservi\u00e7os, al\u00e9m de: Gateway \\(\\rightarrow\\) Auth \\(\\rightarrow\\) Account</li> <li> Monitoramento com dashboard de microsservi\u00e7os</li> <li> Documenta\u00e7\u00e3o das APIs padr\u00e3o Swagger</li> <li> Cluster em Docker Compose para deploy dos microsservi\u00e7os</li> </ul> <p>Testes e Pipeline</p> <ul> <li> Plano de testes</li> <li> Script Jenkins - Pipeline as Code</li> </ul> <p>K8s</p> <ul> <li> Release no Minikube</li> <li> Scripts declarativos dos servi\u00e7os</li> </ul> <p>Platform as a Service</p> <ul> <li> Plano de uso da plataforma como um produto (PaaS)</li> <li> Vislumbrar uso da plataforma por terceiros</li> </ul> <ul> <li> Storytelling (come\u00e7o, meio, fim)</li> <li> Flu\u00eddez</li> <li> Qualidade do material apresentado</li> <li> Tempo</li> <li> Participa\u00e7\u00e3o</li> </ul> <ul> <li> Checkpoint 1</li> <li> Checkpoint 2</li> <li> Checkpoint 3</li> <li> Checkpoint 4</li> <li> Planejamento</li> <li> Documenta\u00e7\u00e3o (markdown)</li> <li> Frontend (funcionalidades b\u00e1sicas: login, registro, dashboard, etc)</li> </ul> <p>Planning</p> <p></p>"},{"location":"versions/2024.1/#repositories","title":"Repositories","text":"<p>Dev</p> Microservice Context Interface Service Discovery Infra platform.241.store.discovery Gateway Infra platform.241.store.gateway Postgres Database platform.241.store.db Account Business platform.241.store.account platform.241.store.account-resource Auth Business platform.241.store.auth platform.241.store.auth-resource <p>Ops</p> Description Repositories Commands Docker Compose API platform.241.store.docker-api <code>docker compose up --build</code> <code>docker compose down</code> Jenkins Pipelines platform.241.store.ops <code>docker compose up --build</code> <code>docker compose down</code> http://localhost:9000"},{"location":"versions/2025.1/","title":"2025.1","text":"Info <p> Prof. Humberto Sandmann</p> <p> humbertors@insper.edu.br</p> <p>Meetings</p> Evento Dia In\u00edcio T\u00e9rmino Aula Qua. 13h30 15h30 Aula Sex. 13h30 15h30 Atendimento Qua. 09h30 11h00 <p>Final Grade</p> \\[ \\text{Final Grade} = \\left\\{\\begin{array}{lll}     \\text{Individual} \\geq 5 \\bigwedge \\text{Team} \\geq 5 &amp;     \\implies &amp;     \\displaystyle \\frac{ \\text{Individual} + \\text{Team} } {2}     \\\\     \\\\     \\text{Otherwise} &amp;     \\implies &amp;     \\min\\left(\\text{Individual}, \\text{Team}\\right)     \\end{array}\\right. \\] <p>Individual</p> Tarefa Descri\u00e7\u00e3o Peso Checkpoint 1 CRUD Microservice 10% Checkpoint 2 Gateway 15% Checkpoint 3 Security 15% Checkpoint 4 DevOps 15% Checkpoint 5 Orchestration 15% Bootnecks InMemory DatabaseMessage QueuesObservabilityCode qualityOAuth2Payments (sandboxes) 20% Documentation README with MkDocs 10% <p>Entrega</p> <ul> <li>A entrega de um checkpoint implica, OBRIGATORIAMENTE, na entrega do checkpoint anterior;</li> <li>Trabalho em grupo deve ser documentado no GitHub.</li> </ul> <p>Team</p> Tarefas Descri\u00e7\u00e3o Peso AWS Configurar AWS 5% EKS Disponibilizar a aplica\u00e7\u00e3o 15% Testes Testes de carga 20% CI/CD Jenkins 10% Custos An\u00e1lise de custos 15% PaaS Plano de uso da plataforma 15% Apresenta\u00e7\u00e3o Storytelling 20% <p>Planning</p> <p></p>"},{"location":"versions/2025.1/#students","title":"Students","text":""},{"location":"versions/2025.1/#repositories","title":"Repositories","text":""}]}