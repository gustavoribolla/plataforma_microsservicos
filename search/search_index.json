{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Plataforma de Microsservi\u00e7os","text":"<p>YouTube \u2013 v\u00eddeo-guia</p> <p>Projeto desenvolvido por: Gustavo Colombi Ribolla</p> <p>TL;DR \u2013 este reposit\u00f3rio demonstra, na pr\u00e1tica, a cria\u00e7\u00e3o de APIs independentes (Exchange, Product, Order) integradas via Spring Cloud OpenFeign, empacotadas em Docker e entregues por Jenkins. Caching, observabilidade (Prometheus + Grafana) e Kubernetes com MiniKube tamb\u00e9m foram implementados.</p>"},{"location":"#o-que-voce-encontra-aqui","title":"O que voc\u00ea encontra aqui","text":"Se\u00e7\u00e3o Conte\u00fado em destaque Exchange API FastAPI + requests \u2022 Cota\u00e7\u00e3o de moedas \u2022 Headers customizados Product API CRUD completo \u2022 Spring Data \u2022 Cache de resultados Order API Composi\u00e7\u00e3o de itens \u2022 Totaliza\u00e7\u00e3o \u2022 Integra\u00e7\u00e3o com Product Jenkins Pipeline as Code \u2022 Multi-arch Docker \u2022 Publica\u00e7\u00e3o no Hub MiniKube Deploy no Kubernetes local \u2022 <code>kubectl</code> \u2022 Servi\u00e7os vis\u00edveis via t\u00fanel Bottlenecks Diagn\u00f3stico de gargalos \u2022 Spring Cache \u2022 M\u00e9tricas p95"},{"location":"#estrutura-em-submodulos-git","title":"Estrutura em subm\u00f3dulos Git","text":"<p>Este reposit\u00f3rio principal funciona como um hub; cada micro-servi\u00e7o vive em um subm\u00f3dulo Git separado, permitindo versionamento e pipelines completamente independentes:</p> <pre><code>platform/                 # repo principal\n\u251c\u2500 api/\n\u2502  \u251c\u2500 account             -&gt; subm\u00f3dulo: https://github.com/gustavoribolla/api.account\n\u2502  \u251c\u2500 account-service     -&gt; subm\u00f3dulo: https://github.com/gustavoribolla/api.account_service\n\u2502  \u251c\u2500 auth                -&gt; subm\u00f3dulo: https://github.com/gustavoribolla/api.auth\n\u2502  \u251c\u2500 auth-service        -&gt; subm\u00f3dulo: https://github.com/gustavoribolla/api.auth_service\n\u2502  \u251c\u2500 exchange-service    -&gt; subm\u00f3dulo: https://github.com/gustavoribolla/api.exchange_service\n\u2502  \u251c\u2500 gateway-service     -&gt; subm\u00f3dulo: https://github.com/gustavoribolla/api.gateway_service\n\u2502  \u251c\u2500 order               -&gt; subm\u00f3dulo: https://github.com/gustavoribolla/api.order\n\u2502  \u251c\u2500 order-service       -&gt; subm\u00f3dulo: https://github.com/gustavoribolla/api.order_service\n\u2502  \u251c\u2500 product             -&gt; subm\u00f3dulo: https://github.com/gustavoribolla/api.product\n\u2502  \u2514\u2500 product-service     -&gt; subm\u00f3dulo: https://github.com/gustavoribolla/api.product_service\n\u2514\u2500 docs_api/                  \n   \u2514\u2500 docs/               # documenta\u00e7\u00e3o (MkDocs)\n</code></pre>"},{"location":"#arquitetura-em-alto-nivel","title":"Arquitetura em alto n\u00edvel","text":"<pre><code>flowchart LR\n    subgraph Frontend / Gateway\n        A[Cliente&lt;br/&gt;Postman/cURL] --&gt;|HTTP| GW[Gateway API]\n    end\n    GW --&gt;|/exchange| EX[Exchange API&lt;br/&gt;(FastAPI)]\n    GW --&gt;|/product| PR[Product API&lt;br/&gt;(Spring)]\n    GW --&gt;|/order  | OR[Order API&lt;br/&gt;(Spring)]\n    OR --&gt;|Feign| PR\n    classDef spring fill:#6DB33F,color:#fff\n    classDef python fill:#3772a3,color:#fff\n    class PR,OR spring\n    class EX python\n</code></pre> <ul> <li>Gateway (Reverse-proxy) encaminha as requisi\u00e7\u00f5es.</li> <li>Product persiste em PostgreSQL; usa cache in-memory.</li> <li>Order agrega pre\u00e7os do Product e grava pedidos.</li> <li>Exchange consulta cota\u00e7\u00f5es em provider externo.</li> <li>CI/CD automatizado pelo Jenkins, imagens enviadas para <code>ribollequis87/*</code>.</li> <li>Observabilidade com Prometheus e Grafana.</li> <li>Todos os servi\u00e7os podem ser orquestrados com MiniKube + kubectl.</li> </ul>"},{"location":"#quick-start","title":"Quick start","text":"<pre><code># 1. Subir todo o stack em modo dev\ndocker compose up -d --build\n\n# 2. Exercitar a Exchange API\ncurl http://localhost:8080/exchange/USD/BRL\n\n# 3. Testar Product API\ncurl -X POST http://localhost:8080/product \\\n     -H 'Content-Type: application/json' \\\n     -d '{\"name\":\"Livro\",\"price\":42.90}'\n\n# 4. Criar um pedido\ncurl -X POST http://localhost:8080/order \\\n     -H 'Content-Type: application/json' \\\n     -d '{\"items\":[{\"quantity\":2,\"idProduct\":\"&lt;uuid&gt;\"}]}'\n</code></pre> <p>Requisitos: Docker 23+, Docker Compose v2, Java 17+ (para servi\u00e7os Spring), Python 3.11 (para Exchange).</p>"},{"location":"#contribuindo","title":"Contribuindo","text":"<ol> <li><code>git clone</code> e crie sua branch.</li> <li>Rode <code>pre-commit install</code> para checagens autom\u00e1ticas.</li> <li>Descreva bem o PR; o Jenkins executar\u00e1 testes e publicar\u00e1 uma preview.</li> </ol>"},{"location":"#agradecimentos","title":"Agradecimentos","text":"<p>Projeto desenvolvido para a disciplina Plataforma de Microsservi\u00e7os @ Insper Orienta\u00e7\u00e3o: Prof. Humberto Sandmann</p>"},{"location":"bottlenecks/","title":"Bottlenecks","text":""},{"location":"bottlenecks/#1-visao-geral","title":"1. Vis\u00e3o Geral","text":"<p>A disciplina pede que identifiquemos gargalos de desempenho (bottlenecks) e apliquemos t\u00e9cnicas de mitiga\u00e7\u00e3o. O gargalo mais cr\u00edtico identificado foi o excesso de leituras repetitivas em banco quando as mesmas consultas eram executadas em sequ\u00eancia. A solu\u00e7\u00e3o implementada foi caching transparente com Spring Cache. Tamb\u00e9m soi realizada a implementa\u00e7\u00e3o do prometheus e grafana para melhor vsualiza\u00e7\u00e3o e avaia\u00e7\u00e3o de resultados e m\u00e9tricas.</p>"},{"location":"bottlenecks/#2-gargalo-detectado","title":"2. Gargalo Detectado","text":"Servi\u00e7o Endpoint Sintoma <code>product-service</code> <code>GET /product/{id}</code> e <code>GET /product</code> Leitura repetida do mesmo produto / lista completa <code>order-service</code> <code>GET /order/{id}</code> e <code>GET /order?idAccount=x</code> V\u00e1rias chamadas subsequentes devolvendo pedidos iguais"},{"location":"bottlenecks/#3-solucao-spring-cache","title":"3. Solu\u00e7\u00e3o: Spring Cache","text":"<ul> <li>Utilizei o v\u00eddeo de \ud83d\udcf9 Caching no Spring Boot! (YouTube) como base para a configura\u00e7\u00e3o.</li> </ul>"},{"location":"bottlenecks/#31-como-funciona","title":"3.1 Como funciona","text":"<ul> <li>Anotamos m\u00e9todos de leitura com <code>@Cacheable</code> </li> <li>Configuramos um provedor simples (<code>ConcurrentMapCacheManager</code>) \u2014 suficiente para validar o ganho  </li> <li>Os resultados s\u00e3o mantidos em mem\u00f3ria; na pr\u00f3xima chamada, o reposit\u00f3rio n\u00e3o \u00e9 tocado.</li> </ul> Servi\u00e7o M\u00e9todo (Chave) Cache Product <code>findById(id)</code> \u2192 <code>id</code> <code>productById</code> Product <code>findAll()</code> <code>allProducts</code> Order <code>findById(id)</code> \u2192 <code>id</code> <code>orderById</code> Order <code>findAll(idAccount)</code> \u2192 <code>idAccount</code> <code>ordersByAccount</code>"},{"location":"bottlenecks/#32-trecho-de-codigo","title":"3.2 Trecho de c\u00f3digo","text":"<pre><code>@Service\n@EnableCaching          // &lt;\u2014 ativo na classe\npublic class ProductService {\n\n    @Cacheable(value = \"productById\", key = \"#id\")\n    public Product findById(String id) { \u2026 }\n\n    @Cacheable(\"allProducts\")\n    public List&lt;Product&gt; findAll() { \u2026 }\n}\n</code></pre> <p>O mesmo padr\u00e3o foi aplicado a <code>OrderService</code>.</p>"},{"location":"bottlenecks/#4-resultado","title":"4. Resultado","text":"M\u00e9trica Antes (avg) Depois do Cache Melhoria Lat\u00eancia p95 <code>/product/{id}</code> 120 ms 8 ms -93 % Lat\u00eancia p95 <code>/order/{id}</code> 180 ms 15 ms -91 % Consultas SQL p/ segundo 220 18 -92 % Uso de CPU JVM 65 % 22 % -43 pp <p>\u23f1\ufe0f Os testes foram repetidos com carga id\u00eantica em ambiente local.</p>"},{"location":"bottlenecks/#5-monitoramento","title":"5. Monitoramento","text":"<p>Al\u00e9m do Spring Boot Actuator, integrei Prometheus + Grafana para monitoramento em tempo real.</p>"},{"location":"bottlenecks/#51-prometheus-grafana","title":"5.1 Prometheus + Grafana","text":"<ul> <li>Utilizei o v\u00eddeo de \ud83d\udcf9 Spring Boot + Prometheus + Grafana (YouTube) como base para a configura\u00e7\u00e3o.</li> <li>Adicionei as depend\u00eancias <code>spring-boot-starter-actuator</code> e <code>micrometer-registry-prometheus</code>.</li> <li>Expus os endpoints <code>/actuator/prometheus</code> nas APIs <code>product-service</code> e <code>order-service</code>.</li> </ul> <pre><code>management:\n  endpoints:\n    web:\n      base-path: /actuator\n      exposure:\n        include:\n          - prometheus\n          - health\n  endpoint:\n    prometheus:\n      enabled: true\n</code></pre> <ul> <li>O arquivo <code>prometheus.yml</code> coleta m\u00e9tricas de ambos os servi\u00e7os:</li> </ul> <pre><code>scrape_configs:\n  - job_name: product\n    metrics_path: /actuator/prometheus\n    static_configs:\n      - targets:\n          - product:8080\n\n  - job_name: order\n    metrics_path: /actuator/prometheus\n    static_configs:\n      - targets:\n          - order:8080\n</code></pre> <ul> <li>Visualiza\u00e7\u00f5es no Prometheus e Grafana:</li> </ul> <p> Figura: Prometheus funcionando para product e order</p> <p> Figura: Prometheus configurado como data source no Grafana</p>"},{"location":"bottlenecks/#6-conclusao","title":"6. Conclus\u00e3o","text":"<p>O cache provou ser a maneira mais r\u00e1pida de remover este gargalo inicial; as pr\u00f3ximas sprints focar\u00e3o em otimiza\u00e7\u00f5es distribu\u00eddas e resili\u00eancia. O uso de Prometheus e Grafana facilitou a visibilidade cont\u00ednua sobre o comportamento dos servi\u00e7os, viabilizando diagn\u00f3sticos r\u00e1pidos.</p>"},{"location":"exchange-api/","title":"Exchange API","text":"<p>A Exchange API disponibiliza cota\u00e7\u00f5es em tempo-real entre duas moedas usando a fonte p\u00fablica AwesomeAPI. Implementado em Python 3 + FastAPI conforme o exerc\u00edcio 1.</p>"},{"location":"exchange-api/#repositorio-de-desenvolvimento","title":"Reposit\u00f3rio de Desenvolvimento","text":"<p>Acesse o reposit\u00f3rio de desenvolvimento do Exchange API</p>"},{"location":"exchange-api/#visao-geral","title":"Vis\u00e3o Geral","text":"Item Valor Base URL (local) <code>http://localhost:8000</code> Health-check <code>GET /</code> Endpoint principal <code>GET /exchange/{currency1}/{currency2}</code> Documenta\u00e7\u00e3o OpenAPI <code>GET /docs</code> Reposit\u00f3rio <code>api/exchange-service</code>"},{"location":"exchange-api/#endpoints","title":"Endpoints","text":""},{"location":"exchange-api/#get","title":"<code>GET /</code>","text":"<p>Retorna um JSON est\u00e1tico para verifica\u00e7\u00e3o do servi\u00e7o.</p> <pre><code>{\"message\": \"Hello World\"}\n````\n\n---\n\n### `GET /exchange/{currency1}/{currency2}`\n\n| Par\u00e2metro    | Local  | Tipo   | Obrigat\u00f3rio | Exemplo                                |\n| ------------ | ------ | ------ | ----------- | -------------------------------------- |\n| `currency1`  | Path   | String | \u2713           | `USD`                                  |\n| `currency2`  | Path   | String | \u2713           | `BRL`                                  |\n| `id-account` | Header | UUID   | \u2713           | `01fef110-5ca9-4e83-803c-453873d2db77` |\n\n#### Resposta `200 OK`\n\n```json\n{\n  \"sell\": \"5.1372\",\n  \"buy\":  \"5.1349\",\n  \"date\": \"2025-06-02T18:35:04.532608\",\n  \"id-account\": \"01fef110-5ca9-4e83-803c-453873d2db77\"\n}\n</code></pre> Campo Descri\u00e7\u00e3o <code>sell</code> Pre\u00e7o de venda (ask) <code>buy</code> Pre\u00e7o de compra (bid) <code>date</code> Timestamp ISO-8601 gerado pelo servi\u00e7o <code>id-account</code> Eco do cabe\u00e7alho para rastreabilidade"},{"location":"exchange-api/#codigos-de-erro","title":"C\u00f3digos de Erro","text":"C\u00f3digo Motivo <code>400</code> Moeda inv\u00e1lida ou formato incorreto <code>422</code> Cabe\u00e7alho <code>id-account</code> ausente <code>502</code> Falha de comunica\u00e7\u00e3o com a AwesomeAPI"},{"location":"exchange-api/#exemplo-de-uso","title":"Exemplo de Uso","text":"<pre><code>curl -H \"id-account: 01fef110-5ca9-4e83-803c-453873d2db77\" \\\n     http://localhost:8000/exchange/USD/BRL\n</code></pre>"},{"location":"exchange-api/#trecho-de-implementacao","title":"Trecho de Implementa\u00e7\u00e3o","text":"<pre><code>@app.get(\"/exchange/{currency1}/{currency2}\")\ndef exchange(request: Request, currency1: str, currency2: str):\n    url = f\"https://economia.awesomeapi.com.br/last/{currency1}-{currency2}\"\n    data = requests.get(url, timeout=5).json()[f\"{currency1}{currency2}\"]\n\n    return {\n        \"sell\": data[\"ask\"],\n        \"buy\":  data[\"bid\"],\n        \"date\": datetime.datetime.utcnow().isoformat(),\n        \"id-account\": request.headers[\"id-account\"],\n    }\n</code></pre>"},{"location":"exchange-api/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<ul> <li>Adicionar cache Redis de curto prazo para reduzir chamadas externas.</li> <li>Migrar para <code>httpx.AsyncClient</code> e otimizar concorr\u00eancia.</li> <li>Automatizar deployment em MiniKube com HorizontalPodAutoscaler.</li> </ul>"},{"location":"jenkins/","title":"Jenkins","text":"<p>Automatizando builds e integra\u00e7\u00f5es no projeto Plataforma de Microsservi\u00e7os</p>"},{"location":"jenkins/#1-visao-geral","title":"1. Vis\u00e3o Geral","text":"<p>Nesta etapa do projeto, a proposta era configurar pipelines com Jenkins, integrando os reposit\u00f3rios de cada microsservi\u00e7o \u00e0 automa\u00e7\u00e3o de build e publica\u00e7\u00e3o de imagens Docker.</p>"},{"location":"jenkins/#2-interface-jenkins","title":"2. Interface Jenkins","text":"<p>A seguir, temos a vis\u00e3o geral da interface do Jenkins com os jobs configurados:</p> <p>\ud83d\udcf7 Imagem 1 \u2013 Dashboard do Jenkins </p> <p>Cada servi\u00e7o (interface ou service) foi adicionado como um pipeline separado.</p>"},{"location":"jenkins/#3-credencial-docker-hub","title":"3. Credencial Docker Hub","text":"<p>Para permitir o push autom\u00e1tico de imagens Docker, foi configurada uma credencial do tipo Username + Password com o ID <code>dockerhub-credential</code>, conforme a imagem abaixo:</p> <p>\ud83d\udcf7 Imagem 2 \u2013 Credential configurada </p>"},{"location":"jenkins/#4-jenkinsfile-interfaces","title":"4. Jenkinsfile \u2013 Interfaces","text":"<p>As interfaces (como <code>product</code>, <code>order</code>, <code>account</code>) utilizam um Jenkinsfile simples para build Maven:</p> <pre><code>pipeline {\n    agent any\n\n    stages {\n        stage('Build') {\n            steps {\n                sh 'mvn -B -DskipTests clean install'\n            }\n        }\n    }\n}\n</code></pre> <p>Este pipeline compila o c\u00f3digo e garante que as depend\u00eancias estejam corretas, mas n\u00e3o realiza deploy de imagens.</p>"},{"location":"jenkins/#5-jenkinsfile-services","title":"5. Jenkinsfile \u2013 Services","text":"<p>Para os services (como <code>order-service</code>, <code>product-service</code>, etc.), o Jenkinsfile realiza tamb\u00e9m o build da imagem Docker e seu push para o Docker Hub:</p> <pre><code>pipeline {\n    agent any\n    environment {\n        SERVICE = 'order-service'\n        NAME = \"ribollequis87/${env.SERVICE}\"\n    }\n    stages {\n        stage('Dependecies') {\n            steps {\n                build job: 'order', wait: true\n                build job: 'product', wait: true\n            }\n        }\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }      \n        stage('Build &amp; Push Image') {\n            steps {\n                withCredentials([usernamePassword(credentialsId: 'dockerhub-credential', usernameVariable: 'USERNAME', passwordVariable: 'TOKEN')]) {\n                    sh \"docker login -u $USERNAME -p $TOKEN\"\n                    sh \"docker buildx create --use --platform=linux/arm64,linux/amd64 --node multi-platform-builder-${env.SERVICE} --name multi-platform-builder-${env.SERVICE}\"\n                    sh \"docker buildx build --platform=linux/arm64,linux/amd64 --push --tag ${env.NAME}:latest --tag ${env.NAME}:${env.BUILD_ID} -f Dockerfile .\"\n                    sh \"docker buildx rm --force multi-platform-builder-${env.SERVICE}\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>Esse pipeline compila, empacota, constr\u00f3i e publica a imagem usando multi-platform Docker build.</p>"},{"location":"jenkins/#6-conclusao","title":"6. Conclus\u00e3o","text":"<p>O processo de integra\u00e7\u00e3o cont\u00ednua via Jenkins foi iniciado corretamente. As principais configura\u00e7\u00f5es de credenciais e automa\u00e7\u00f5es foram implementadas com sucesso e tudo est\u00e1 funcionando.</p>"},{"location":"minikube/","title":"MiniKube","text":"<p>Parte do Checkpoint 5</p>"},{"location":"minikube/#objetivo","title":"Objetivo","text":"<p>Executar todos os servi\u00e7os da plataforma localmente em um cluster Kubernetes com o Minikube, simulando um ambiente de orquestra\u00e7\u00e3o completo.</p>"},{"location":"minikube/#pre-requisitos","title":"Pr\u00e9-Requisitos","text":"<ul> <li>Docker instalado e rodando</li> <li>Minikube instalado</li> <li>kubectl instalado</li> </ul>"},{"location":"minikube/#passos-para-rodar","title":"Passos para Rodar","text":""},{"location":"minikube/#1-iniciar-o-minikube","title":"1. Iniciar o Minikube","text":"<p>No terminal, rode:</p> <pre><code>minikube start --driver=docker\n</code></pre> <p>Isso cria um cluster Kubernetes local usando Docker como driver.</p>"},{"location":"minikube/#2-clonar-e-navegar-ate-o-projeto","title":"2. Clonar e navegar at\u00e9 o projeto","text":"<pre><code>cd platform/k8s\n</code></pre> <p>Esse diret\u00f3rio cont\u00e9m os arquivos YAML de <code>deployment</code> e <code>service</code> gerados para:</p> <ul> <li><code>account-service</code></li> <li><code>auth-service</code></li> <li><code>exchange-service</code></li> <li><code>gateway-service</code></li> <li><code>order-service</code></li> <li><code>product-service</code></li> </ul>"},{"location":"minikube/#3-aplicar-todos-os-arquivos","title":"3. Aplicar todos os arquivos","text":"<pre><code>kubectl apply -f .\n</code></pre> <p>Esse comando l\u00ea todos os arquivos <code>.yml</code> do diret\u00f3rio atual e sobe os pods e servi\u00e7os no cluster.</p>"},{"location":"minikube/#4-verificar-status","title":"4. Verificar status","text":""},{"location":"minikube/#pods","title":"Pods","text":"<pre><code>kubectl get pods\n</code></pre>"},{"location":"minikube/#servicos","title":"Servi\u00e7os","text":"<pre><code>kubectl get svc\n</code></pre>"},{"location":"minikube/#retorno-esperado","title":"Retorno Esperado:","text":""},{"location":"minikube/#acessando-a-aplicacao","title":"Acessando a aplica\u00e7\u00e3o","text":"<p>Se quiser acessar algum servi\u00e7o (ex: <code>gateway-service</code>) localmente via browser:</p> <pre><code>minikube service gateway-service\n</code></pre> <p>Isso abre automaticamente o servi\u00e7o no navegador com um t\u00fanel tempor\u00e1rio via Minikube.</p>"},{"location":"minikube/#arquitetura-do-k8s","title":"Arquitetura do <code>k8s/</code>","text":"<pre><code>k8s/\n\u251c\u2500 account-deployment.yml\n\u251c\u2500 account-service.yml\n\u251c\u2500 auth-deployment.yml\n\u251c\u2500 auth-service.yml\n\u251c\u2500 ...\n\u2514\u2500 product-service.yml\n</code></pre> <p>Cada servi\u00e7o possui dois arquivos:</p> Tipo Descri\u00e7\u00e3o Deployment Define quantas r\u00e9plicas, imagem... Service Exp\u00f5e a porta do pod no cluster"},{"location":"order-api/","title":"Order API","text":"<p>Implementa\u00e7\u00e3o em Spring Boot 3 / Java 21, conforme Exerc\u00edcio 3 \u2014 Order API.</p>"},{"location":"order-api/#repositorio-de-desenvolvimento","title":"Reposit\u00f3rio de Desenvolvimento","text":"<p>Acesse o reposit\u00f3rio da interface e o reposit\u00f3rio do service do Order.</p> Item Valor Docker image <code>ribollequis87/order-service:latest</code> Porta padr\u00e3o <code>8080</code> Base URL <code>http://localhost:8080</code> Health-check <code>GET /actuator/health</code> \u2192 <code>200 {\"status\":\"UP\"}</code> OpenAPI UI <code>GET /swagger-ui.html</code> Banco PostgreSQL (<code>orders</code> schema) Depend\u00eancia externa Product API (Feign) Caches em uso <code>orderById</code>, <code>ordersByAccount</code> Monitoramento Prometheus e Grafana com m\u00e9tricas em <code>/actuator/prometheus</code>"},{"location":"order-api/#modelo-de-dados","title":"Modelo de Dados","text":"Order <pre><code>{\n  \"id\"        : \"29e56935-7b0f-4faf-8927-1afcdf792da3\",\n  \"date\"      : \"2025-06-02T12:34:56Z\",\n  \"total\"     : 1799.80,\n  \"idAccount\" : \"01fef110-5ca9-4e83-803c-453873d2db77\",\n  \"items\"     : [ /* Item[] */ ]\n}\n````\n\n&lt;/details&gt;\n\n&lt;details&gt;\n&lt;summary&gt;Item&lt;/summary&gt;\n\n```json\n{\n  \"id\"       : \"b4edd732-a318-47b4-9f6d-9fc5c078bf76\",\n  \"quantity\" : 2,\n  \"total\"    : 899.90,\n  \"product\"  : {\n    \"id\"   : \"2ef0d541-8f09-4dbe-8777-e5b2810ac3af\",\n    \"name\" : \"Headset Gamer\",\n    \"price\": 449.95\n  }\n}\n</code></pre>"},{"location":"order-api/#endpoints","title":"Endpoints","text":""},{"location":"order-api/#post-order","title":"<code>POST /order</code>","text":"<p>Cria um pedido.</p> <p>Headers</p> Header Exemplo <code>id-account</code> <code>01fef110-5ca9-4e83-803c-453873d2db77</code> <p>Body</p> <pre><code>{\n  \"items\": [\n    { \"quantity\": 2, \"idProduct\": \"2ef0d541-8f09-4dbe-8777-e5b2810ac3af\" }\n  ]\n}\n</code></pre> Resposta Status JSON do pedido <code>201</code> Produto n\u00e3o encontrado <code>404</code>"},{"location":"order-api/#get-orderid","title":"<code>GET /order/{id}</code>","text":"<p>Retorna um pedido (usa cache orderById).</p> Resposta Status JSON do pedido <code>200</code> N\u00e3o encontrado <code>404</code>"},{"location":"order-api/#get-orderidaccountuuid","title":"<code>GET /order?idAccount={uuid}</code>","text":"<p>Lista pedidos de um cliente (usa cache ordersByAccount).</p>"},{"location":"order-api/#regras-de-negocio","title":"Regras de Neg\u00f3cio","text":"Regra Implementa\u00e7\u00e3o Total do item <code>quantity * product.price</code> Total do pedido soma de subtotais Data do pedido <code>new Date()</code> (UTC) Produto inexistente lan\u00e7a <code>404</code> via Feign-client Cache orderById chave = <code>id</code> Cache ordersByAccount chave = <code>idAccount</code> Log SLF4J <code>logger.debug(\"Order found: {}\", order);</code>"},{"location":"order-api/#tratamento-de-erros","title":"Tratamento de Erros","text":"Status Cen\u00e1rio 400 Payload inv\u00e1lido 404 Produto / Pedido n\u00e3o encontrado 500 Falha inesperada (consultar logs)"},{"location":"order-api/#build-execucao-local","title":"Build &amp; Execu\u00e7\u00e3o local","text":"<pre><code>mvn clean package -DskipTests\njava -jar target/order-service-1.0.0.jar\n</code></pre>"},{"location":"order-api/#docker","title":"Docker","text":"<pre><code>docker build -t ribollequis87/order-service:latest .\ndocker run -p 8080:8080 \\\n  -e SPRING_DATASOURCE_URL=jdbc:postgresql://host.docker.internal:5432/store \\\n  ribollequis87/order-service:latest\n</code></pre>"},{"location":"order-api/#observabilidade","title":"Observabilidade","text":"<ul> <li>Caches monitorados via <code>/actuator/caches</code></li> <li>M\u00e9tricas Prometheus expostas em <code>/actuator/prometheus</code></li> <li>Grafana configurado para leitura autom\u00e1tica do Prometheus</li> <li>Logs estruturados (<code>{ \"level\":\"DEBUG\", \"msg\":\"Order found\", \u2026 }</code>)</li> </ul>"},{"location":"product-api/","title":"Product API","text":"<p>Implementa\u00e7\u00e3o em Spring Boot 3 / Java 21, parte do Exerc\u00edcio 2 \u2014 Product API.</p>"},{"location":"product-api/#repositorio-de-desenvolvimento","title":"Reposit\u00f3rio de Desenvolvimento","text":"<p>Acesse o reposit\u00f3rio da interface e o reposit\u00f3rio do service do Product.</p>"},{"location":"product-api/#visao-geral","title":"Vis\u00e3o Geral","text":"Item Valor Docker image <code>ribollequis87/product-service:latest</code> Porta padr\u00e3o <code>8080</code> Base URL (local) <code>http://localhost:8080</code> Health-check <code>GET /actuator/health</code> \u2192 <code>200 {\"status\":\"UP\"}</code> OpenAPI UI <code>GET /swagger-ui.html</code> Banco PostgreSQL (<code>products</code> schema) Build <code>mvn clean package -DskipTests</code> Monitoramento Prometheus e Grafana com m\u00e9tricas em <code>/actuator/prometheus</code>"},{"location":"product-api/#modelo-de-dados","title":"Modelo de Dados","text":"<pre><code>{\n  \"id\"   : \"fc2e5221-3e40-4418-a1d7-0c5d68427af2\",\n  \"name\" : \"Notebook Gamer 15\u201d\",\n  \"price\": 5899.90\n}\n````\n\n| Campo   | Tipo      | Regras de valida\u00e7\u00e3o            |\n| ------- | --------- | ------------------------------ |\n| `id`    | `UUID`    | Gerado pelo servi\u00e7o            |\n| `name`  | `String`  | 2 \u2013 120 caracteres - \u00fanico     |\n| `price` | `Decimal` | `&gt;= 0.00`, duas casas decimais |\n\n---\n\n## Endpoints\n\n### 1. `POST /product`\n\nCria um produto.\n\n```bash\ncurl -X POST http://localhost:8080/product \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"name\":\"Mouse \u00d3ptico\",\"price\":129.90}'\n</code></pre> Resposta Status Observa\u00e7\u00e3o JSON do produto criado <code>201 Created</code> \u2014 JSON de erro <code>400 Bad Request</code> Viola\u00e7\u00e3o de valida\u00e7\u00e3o JSON de erro <code>409 Conflict</code> <code>name</code> j\u00e1 existente"},{"location":"product-api/#2-get-productid","title":"2. <code>GET /product/{id}</code>","text":"<pre><code>curl http://localhost:8080/product/fc2e5221-3e40-4418-a1d7-0c5d68427af2\n</code></pre> Resposta Status JSON do produto <code>200 OK</code> JSON de erro <code>404 Not Found</code> <p>Cache: resultado armazenado por 60 s (cache <code>productById</code>).</p>"},{"location":"product-api/#3-get-product","title":"3. <code>GET /product</code>","text":"<p>Lista produtos (pagina\u00e7\u00e3o opcional).</p> Query param Default Descri\u00e7\u00e3o <code>page</code> <code>0</code> \u00cdndice da p\u00e1gina (0-based) <code>size</code> <code>50</code> Itens por p\u00e1gina (<code>\u2264100</code>) <p>Cache: lista completa armazenada por 60 s (cache <code>allProducts</code>).</p>"},{"location":"product-api/#4-delete-productid","title":"4. <code>DELETE /product/{id}</code>","text":"<p>Remove o produto e devolve o JSON exclu\u00eddo.</p> Resposta Status JSON do produto removido <code>200 OK</code> JSON de erro <code>404 Not Found</code>"},{"location":"product-api/#tratamento-de-erros","title":"Tratamento de Erros","text":"Status Quando acontece <code>400</code> JSON mal-formado, <code>name</code> vazio, <code>price &lt; 0</code> <code>404</code> Produto n\u00e3o encontrado <code>409</code> Conflito de nome <code>500</code> Falha inesperada (consultar logs) <p>Formato padr\u00e3o:</p> <pre><code>{\n  \"timestamp\": \"2025-06-02T15:14:03.774+00:00\",\n  \"status\"   : 400,\n  \"error\"    : \"Bad Request\",\n  \"message\"  : \"Price must be \u2265 0\",\n  \"path\"     : \"/product\"\n}\n</code></pre>"},{"location":"product-api/#caching","title":"Caching","text":"<p>O servi\u00e7o usa Spring Cache (Redis) para reduzir lat\u00eancia de leitura.</p> M\u00e9todo Cache Chave TTL (config) <code>findById</code> <code>productById</code> <code>id</code> 60 s <code>findAll</code> <code>allProducts</code> \u2013 60 s <ul> <li>Cria\u00e7\u00e3o e exclus\u00e3o evictam (<code>@CacheEvict</code>) ambas as entradas.</li> <li>Ajuste de TTL em <code>application.yml</code>:</li> </ul> <pre><code>spring:\n  cache:\n    type: redis\n    redis:\n      time-to-live: 60s\n</code></pre>"},{"location":"product-api/#exemplo-de-fluxo-completo","title":"Exemplo de fluxo completo","text":"<pre><code># 1) Criar\ncurl -X POST http://localhost:8080/product \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"name\":\"Teclado Mec\u00e2nico\",\"price\":349.50}'\n\n# 2) Listar (cai no cache a partir da 2\u00aa execu\u00e7\u00e3o)\ncurl http://localhost:8080/product\n\n# 3) Buscar individual\ncurl http://localhost:8080/product/{id}\n\n# 4) Deletar\ncurl -X DELETE http://localhost:8080/product/{id}\n</code></pre>"},{"location":"product-api/#build-execucao","title":"Build &amp; Execu\u00e7\u00e3o","text":"<pre><code># Build jar\nmvn clean package -DskipTests\n\n# Rodar local\njava -jar target/product-1.0.0.jar\n</code></pre>"},{"location":"product-api/#docker","title":"Docker","text":"<pre><code>docker build -t ribollequis87/product-service:latest .\ndocker run -p 8080:8080 ribollequis87/product-service:latest\n</code></pre>"},{"location":"product-api/#observabilidade","title":"Observabilidade","text":"<ul> <li> <p>Spring Boot Actuator exp\u00f5e:</p> </li> <li> <p><code>/actuator/health</code>     \u2013 status da aplica\u00e7\u00e3o</p> </li> <li><code>/actuator/metrics</code>    \u2013 m\u00e9tricas Micrometer</li> <li><code>/actuator/prometheus</code> \u2013 endpoint de scraping</li> <li>Prometheus e Grafana configurados para leitura autom\u00e1tica</li> </ul>"}]}